
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005fb0  08005fb0  00015fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e4  080063e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080063e4  080063e4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063e4  080063e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001dc  080065c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080065c8  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b155  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f22  00000000  00000000  0002b35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184f1  00000000  00000000  0002e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb77  00000000  00000000  00046c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087757  00000000  00000000  00052780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  000d9f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f94 	.word	0x08005f94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005f94 	.word	0x08005f94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <check_row>:
		'1','2','3','-',
		'#','0','=','+'
};
char operator;

unsigned char check_row(unsigned char col){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOB, R0_Pin) == 0 )	return KEY[col];
 8000a92:	2102      	movs	r1, #2
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <check_row+0x78>)
 8000a96:	f001 fbb5 	bl	8002204 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <check_row+0x20>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <check_row+0x7c>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	e026      	b.n	8000af6 <check_row+0x6e>
	else if (HAL_GPIO_ReadPin(GPIOB, R1_Pin) == 0)	return KEY[4+col];
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4815      	ldr	r0, [pc, #84]	; (8000b00 <check_row+0x78>)
 8000aac:	f001 fbaa 	bl	8002204 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d104      	bne.n	8000ac0 <check_row+0x38>
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <check_row+0x7c>)
 8000abc:	5cd3      	ldrb	r3, [r2, r3]
 8000abe:	e01a      	b.n	8000af6 <check_row+0x6e>
	else if (HAL_GPIO_ReadPin(GPIOB, R2_Pin) == 0)	return KEY[8+col];
 8000ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <check_row+0x78>)
 8000ac6:	f001 fb9d 	bl	8002204 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <check_row+0x52>
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <check_row+0x7c>)
 8000ad6:	5cd3      	ldrb	r3, [r2, r3]
 8000ad8:	e00d      	b.n	8000af6 <check_row+0x6e>
	else if (HAL_GPIO_ReadPin(GPIOB, R3_Pin) == 0)	return KEY[12+col];
 8000ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <check_row+0x78>)
 8000ae0:	f001 fb90 	bl	8002204 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d104      	bne.n	8000af4 <check_row+0x6c>
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	330c      	adds	r3, #12
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <check_row+0x7c>)
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	e000      	b.n	8000af6 <check_row+0x6e>
	else return 0xFF;
 8000af4:	23ff      	movs	r3, #255	; 0xff
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	08005fe4 	.word	0x08005fe4

08000b08 <KEYPAD_Read>:
unsigned char KEYPAD_Read(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	unsigned char key;
	HAL_GPIO_WritePin(GPIOA, C0_Pin|C1_Pin|C2_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2113      	movs	r1, #19
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b14:	f001 fb8d 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C3_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <KEYPAD_Read+0xc8>)
 8000b1e:	f001 fb88 	bl	8002232 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, C0_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	4829      	ldr	r0, [pc, #164]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b28:	f001 fb83 	bl	8002232 <HAL_GPIO_WritePin>
	key = check_row(0);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff ffab 	bl	8000a88 <check_row>
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, C0_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4824      	ldr	r0, [pc, #144]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b3c:	f001 fb79 	bl	8002232 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2bff      	cmp	r3, #255	; 0xff
 8000b44:	d001      	beq.n	8000b4a <KEYPAD_Read+0x42>
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	e03c      	b.n	8000bc4 <KEYPAD_Read+0xbc>

	HAL_GPIO_WritePin(GPIOA, C1_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	481f      	ldr	r0, [pc, #124]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b50:	f001 fb6f 	bl	8002232 <HAL_GPIO_WritePin>
	key = check_row(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff ff97 	bl	8000a88 <check_row>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, C1_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2102      	movs	r1, #2
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b64:	f001 fb65 	bl	8002232 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2bff      	cmp	r3, #255	; 0xff
 8000b6c:	d001      	beq.n	8000b72 <KEYPAD_Read+0x6a>
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	e028      	b.n	8000bc4 <KEYPAD_Read+0xbc>

	HAL_GPIO_WritePin(GPIOA, C2_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2110      	movs	r1, #16
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b78:	f001 fb5b 	bl	8002232 <HAL_GPIO_WritePin>
	key = check_row(2);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff ff83 	bl	8000a88 <check_row>
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, C2_Pin, SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4810      	ldr	r0, [pc, #64]	; (8000bcc <KEYPAD_Read+0xc4>)
 8000b8c:	f001 fb51 	bl	8002232 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d001      	beq.n	8000b9a <KEYPAD_Read+0x92>
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	e014      	b.n	8000bc4 <KEYPAD_Read+0xbc>

	HAL_GPIO_WritePin(GPIOB, C3_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <KEYPAD_Read+0xc8>)
 8000ba0:	f001 fb47 	bl	8002232 <HAL_GPIO_WritePin>
	key = check_row(3);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f7ff ff6f 	bl	8000a88 <check_row>
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, C3_Pin, SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <KEYPAD_Read+0xc8>)
 8000bb4:	f001 fb3d 	bl	8002232 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d001      	beq.n	8000bc2 <KEYPAD_Read+0xba>
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	e000      	b.n	8000bc4 <KEYPAD_Read+0xbc>

	return 0xFF;
 8000bc2:	23ff      	movs	r3, #255	; 0xff
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <Key_Read>:

void Key_Read(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	char text = KEYPAD_Read();
 8000bda:	f7ff ff95 	bl	8000b08 <KEYPAD_Read>
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	if(text != 0xFF)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2bff      	cmp	r3, #255	; 0xff
 8000be6:	d00a      	beq.n	8000bfe <Key_Read+0x2a>
	{
		text = KEYPAD_Read();
 8000be8:	f7ff ff8e 	bl	8000b08 <KEYPAD_Read>
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
		if(text != 0xFF)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2bff      	cmp	r3, #255	; 0xff
 8000bf4:	d003      	beq.n	8000bfe <Key_Read+0x2a>
		{
			LCD_add_To_String(text);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 faaf 	bl	800115c <LCD_add_To_String>
		}

	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <logicCal>:
#include <stdio.h>

char final[16];

int logicCal(char str1[16], char str2[16], char cal, int check2, int temp, int checkdiv, int i, int j)
{
 8000c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c0c:	b0a2      	sub	sp, #136	; 0x88
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000c12:	62b9      	str	r1, [r7, #40]	; 0x28
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	4613      	mov	r3, r2
 8000c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int num1 = 0, count1 = 0, count2 = 0, count3 = 0, check1 = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c28:	2300      	movs	r3, #0
 8000c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000c30:	2300      	movs	r3, #0
 8000c32:	677b      	str	r3, [r7, #116]	; 0x74
	unsigned long long num2 = 0, result1 = 0;
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double result2 = 0;
 8000c4c:	f04f 0200 	mov.w	r2, #0
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (temp == 2)
 8000c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d11e      	bne.n	8000c9e <logicCal+0x96>
	{
		i = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (final[count3] != '\0')
 8000c66:	e014      	b.n	8000c92 <logicCal+0x8a>
		{
			str1[count3] = final[count3];
 8000c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c6c:	18d1      	adds	r1, r2, r3
 8000c6e:	4ab3      	ldr	r2, [pc, #716]	; (8000f3c <logicCal+0x334>)
 8000c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c72:	4413      	add	r3, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	700b      	strb	r3, [r1, #0]
			final[count3] = '\0';
 8000c78:	4ab0      	ldr	r2, [pc, #704]	; (8000f3c <logicCal+0x334>)
 8000c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c7c:	441a      	add	r2, r3
 8000c7e:	2300      	movs	r3, #0
 8000c80:	7013      	strb	r3, [r2, #0]
			i++; count3++;
 8000c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c86:	3301      	adds	r3, #1
 8000c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c8e:	3301      	adds	r3, #1
 8000c90:	67bb      	str	r3, [r7, #120]	; 0x78
		while (final[count3] != '\0')
 8000c92:	4aaa      	ldr	r2, [pc, #680]	; (8000f3c <logicCal+0x334>)
 8000c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1e4      	bne.n	8000c68 <logicCal+0x60>
		}
	}

	if (check2 == 1)
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d155      	bne.n	8000d50 <logicCal+0x148>
	{
		for (int l = 0; l < 16; l++) final[l] = '\0';
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8000ca8:	e007      	b.n	8000cba <logicCal+0xb2>
 8000caa:	4aa4      	ldr	r2, [pc, #656]	; (8000f3c <logicCal+0x334>)
 8000cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cae:	441a      	add	r2, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	7013      	strb	r3, [r2, #0]
 8000cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
 8000cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	ddf4      	ble.n	8000caa <logicCal+0xa2>
	}

	while (count1 < i)
 8000cc0:	e046      	b.n	8000d50 <logicCal+0x148>
	{
		if (str1[count1] == '-')
 8000cc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b2d      	cmp	r3, #45	; 0x2d
 8000cce:	d128      	bne.n	8000d22 <logicCal+0x11a>
	    {
			count1++;
 8000cd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	        while (count1 < i)
 8000cda:	e016      	b.n	8000d0a <logicCal+0x102>
	        {
	        	int temp1 = (int)str1[count1] - 48;
 8000cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3b30      	subs	r3, #48	; 0x30
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
	        	num1 = num1 * 10 + temp1;
 8000cea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	            count1++;
 8000d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	        while (count1 < i)
 8000d0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbe2      	blt.n	8000cdc <logicCal+0xd4>
	        }
	        num1 *= -1;
 8000d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	        break;
 8000d20:	e01c      	b.n	8000d5c <logicCal+0x154>
	    }
	    int temp1 = (int)str1[count1] - 48;
 8000d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3b30      	subs	r3, #48	; 0x30
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	    num1 = num1 * 10 + temp1;
 8000d30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d40:	4413      	add	r3, r2
 8000d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	    count1++;
 8000d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while (count1 < i)
 8000d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbb2      	blt.n	8000cc2 <logicCal+0xba>
	}
	while (count2 < j)
 8000d5c:	e071      	b.n	8000e42 <logicCal+0x23a>
	{
		if (str2[count2] == '-')
 8000d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b2d      	cmp	r3, #45	; 0x2d
 8000d68:	d13f      	bne.n	8000dea <logicCal+0x1e2>
	    {
			count2++;
 8000d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
	    	while (count2 < j)
 8000d70:	e02e      	b.n	8000dd0 <logicCal+0x1c8>
	    	{
	    		int temp2 = (int)str2[count2] - 48;
 8000d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3b30      	subs	r3, #48	; 0x30
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
	    		num2 = num2 * 10 + temp2;
 8000d7e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000d82:	4622      	mov	r2, r4
 8000d84:	462b      	mov	r3, r5
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	f04f 0100 	mov.w	r1, #0
 8000d8e:	0099      	lsls	r1, r3, #2
 8000d90:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d94:	0090      	lsls	r0, r2, #2
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	1912      	adds	r2, r2, r4
 8000d9c:	eb45 0303 	adc.w	r3, r5, r3
 8000da0:	1891      	adds	r1, r2, r2
 8000da2:	61b9      	str	r1, [r7, #24]
 8000da4:	415b      	adcs	r3, r3
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	461a      	mov	r2, r3
 8000db4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000db8:	1884      	adds	r4, r0, r2
 8000dba:	613c      	str	r4, [r7, #16]
 8000dbc:	eb41 0303 	adc.w	r3, r1, r3
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000dc6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	    		count2++;
 8000dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dcc:	3301      	adds	r3, #1
 8000dce:	67fb      	str	r3, [r7, #124]	; 0x7c
	    	while (count2 < j)
 8000dd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbcb      	blt.n	8000d72 <logicCal+0x16a>
	    	}
	    	num2 *= -1;
 8000dda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000dde:	4252      	negs	r2, r2
 8000de0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	    	break;
 8000de8:	e030      	b.n	8000e4c <logicCal+0x244>
	    }
	    int temp2 = (int)str2[count2] - 48;
 8000dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	3b30      	subs	r3, #48	; 0x30
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
	    num2 = num2 * 10 + temp2;
 8000df6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	462b      	mov	r3, r5
 8000dfe:	f04f 0000 	mov.w	r0, #0
 8000e02:	f04f 0100 	mov.w	r1, #0
 8000e06:	0099      	lsls	r1, r3, #2
 8000e08:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e0c:	0090      	lsls	r0, r2, #2
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	1912      	adds	r2, r2, r4
 8000e14:	eb45 0303 	adc.w	r3, r5, r3
 8000e18:	1891      	adds	r1, r2, r2
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	415b      	adcs	r3, r3
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e30:	eb10 0802 	adds.w	r8, r0, r2
 8000e34:	eb41 0903 	adc.w	r9, r1, r3
 8000e38:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	    count2++;
 8000e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e3e:	3301      	adds	r3, #1
 8000e40:	67fb      	str	r3, [r7, #124]	; 0x7c
	while (count2 < j)
 8000e42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	db88      	blt.n	8000d5e <logicCal+0x156>
	}

	if (cal == '\0')
 8000e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d108      	bne.n	8000e66 <logicCal+0x25e>
	{
		LCD_Put_Cur(1, 11);
 8000e54:	210b      	movs	r1, #11
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 fbf4 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000e5c:	4838      	ldr	r0, [pc, #224]	; (8000f40 <logicCal+0x338>)
 8000e5e:	f000 fbd5 	bl	800160c <LCD_Send_String>
	    return 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e12a      	b.n	80010bc <logicCal+0x4b4>
	}
	else if (count1 == 0)
 8000e66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d108      	bne.n	8000e80 <logicCal+0x278>
	{
		LCD_Put_Cur(1, 11);
 8000e6e:	210b      	movs	r1, #11
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fbe7 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000e76:	4832      	ldr	r0, [pc, #200]	; (8000f40 <logicCal+0x338>)
 8000e78:	f000 fbc8 	bl	800160c <LCD_Send_String>
		return 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e11d      	b.n	80010bc <logicCal+0x4b4>
	}
	else if (count2 == 0)
 8000e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d108      	bne.n	8000e98 <logicCal+0x290>
	{
		LCD_Put_Cur(1, 11);
 8000e86:	210b      	movs	r1, #11
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fbdb 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000e8e:	482c      	ldr	r0, [pc, #176]	; (8000f40 <logicCal+0x338>)
 8000e90:	f000 fbbc 	bl	800160c <LCD_Send_String>
		return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e111      	b.n	80010bc <logicCal+0x4b4>
	}
	else if (checkdiv > 1)
 8000e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	dd1d      	ble.n	8000edc <logicCal+0x2d4>
	{
		int tmpcount = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
		for(int z = 0; z < 16; z++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ea8:	e00c      	b.n	8000ec4 <logicCal+0x2bc>
		{
			LCD_Put_Cur(1, tmpcount);
 8000eaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fbc9 	bl	8001644 <LCD_Put_Cur>
			LCD_Send_Data('\0');
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 fb88 	bl	80015c8 <LCD_Send_Data>
			tmpcount++;
 8000eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eba:	3301      	adds	r3, #1
 8000ebc:	653b      	str	r3, [r7, #80]	; 0x50
		for(int z = 0; z < 16; z++)
 8000ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec6:	2b0f      	cmp	r3, #15
 8000ec8:	ddef      	ble.n	8000eaa <logicCal+0x2a2>
		}
		LCD_Put_Cur(1, 11);
 8000eca:	210b      	movs	r1, #11
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fbb9 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000ed2:	481b      	ldr	r0, [pc, #108]	; (8000f40 <logicCal+0x338>)
 8000ed4:	f000 fb9a 	bl	800160c <LCD_Send_String>
		return 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e0ef      	b.n	80010bc <logicCal+0x4b4>
	}

	switch(cal)
 8000edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee0:	2b78      	cmp	r3, #120	; 0x78
 8000ee2:	d02f      	beq.n	8000f44 <logicCal+0x33c>
 8000ee4:	2b78      	cmp	r3, #120	; 0x78
 8000ee6:	f300 80a0 	bgt.w	800102a <logicCal+0x422>
 8000eea:	2b2f      	cmp	r3, #47	; 0x2f
 8000eec:	d078      	beq.n	8000fe0 <logicCal+0x3d8>
 8000eee:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef0:	f300 809b 	bgt.w	800102a <logicCal+0x422>
 8000ef4:	2b2b      	cmp	r3, #43	; 0x2b
 8000ef6:	d002      	beq.n	8000efe <logicCal+0x2f6>
 8000ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8000efa:	d011      	beq.n	8000f20 <logicCal+0x318>
 8000efc:	e095      	b.n	800102a <logicCal+0x422>
	{
		case '+':
			result1 = num1+num2;
 8000efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f02:	461a      	mov	r2, r3
 8000f04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000f0c:	1884      	adds	r4, r0, r2
 8000f0e:	603c      	str	r4, [r7, #0]
 8000f10:	eb41 0303 	adc.w	r3, r1, r3
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f1a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	        break;
 8000f1e:	e084      	b.n	800102a <logicCal+0x422>
	    case '-':
	        result1 = num1-num2;
 8000f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f24:	4618      	mov	r0, r3
 8000f26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000f2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000f2e:	ebb0 0a02 	subs.w	sl, r0, r2
 8000f32:	eb61 0b03 	sbc.w	fp, r1, r3
 8000f36:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	        break;
 8000f3a:	e076      	b.n	800102a <logicCal+0x422>
 8000f3c:	20000228 	.word	0x20000228
 8000f40:	08005fb0 	.word	0x08005fb0
	    case 'x':
	        result1 = num1*num2;
 8000f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f48:	461a      	mov	r2, r3
 8000f4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f4e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000f50:	fb02 f001 	mul.w	r0, r2, r1
 8000f54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f56:	fb03 f101 	mul.w	r1, r3, r1
 8000f5a:	4401      	add	r1, r0
 8000f5c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000f5e:	fba0 2302 	umull	r2, r3, r0, r2
 8000f62:	4419      	add	r1, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8000f6a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        if (num1*num2 < -2147483648 && num1*num2 > 2147483648)
 8000f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f72:	461a      	mov	r2, r3
 8000f74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f7a:	fb03 f001 	mul.w	r0, r3, r1
 8000f7e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000f80:	fb02 f101 	mul.w	r1, r2, r1
 8000f84:	4401      	add	r1, r0
 8000f86:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000f88:	fba0 2302 	umull	r2, r3, r0, r2
 8000f8c:	4419      	add	r1, r3
 8000f8e:	460b      	mov	r3, r1
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	bf08      	it	eq
 8000f96:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8000f9a:	d245      	bcs.n	8001028 <logicCal+0x420>
 8000f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000fa8:	fb03 f001 	mul.w	r0, r3, r1
 8000fac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000fae:	fb02 f101 	mul.w	r1, r2, r1
 8000fb2:	4401      	add	r1, r0
 8000fb4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000fb6:	fba0 2302 	umull	r2, r3, r0, r2
 8000fba:	4419      	add	r1, r3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000fc2:	f04f 0100 	mov.w	r1, #0
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	bf08      	it	eq
 8000fca:	4290      	cmpeq	r0, r2
 8000fcc:	d22c      	bcs.n	8001028 <logicCal+0x420>
	        {
	        	LCD_Put_Cur(1, 6);
 8000fce:	2106      	movs	r1, #6
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f000 fb37 	bl	8001644 <LCD_Put_Cur>
	        	LCD_Send_String("math error");
 8000fd6:	483c      	ldr	r0, [pc, #240]	; (80010c8 <logicCal+0x4c0>)
 8000fd8:	f000 fb18 	bl	800160c <LCD_Send_String>
	        	return 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e06d      	b.n	80010bc <logicCal+0x4b4>
	        }
	        break;
	    case '/':
	        if(num2 == 0)
 8000fe0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	d108      	bne.n	8000ffa <logicCal+0x3f2>
	        {
	        	LCD_Put_Cur(1, 11);
 8000fe8:	210b      	movs	r1, #11
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 fb2a 	bl	8001644 <LCD_Put_Cur>
	        	LCD_Send_String("error");
 8000ff0:	4836      	ldr	r0, [pc, #216]	; (80010cc <logicCal+0x4c4>)
 8000ff2:	f000 fb0b 	bl	800160c <LCD_Send_String>
	        	return 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e060      	b.n	80010bc <logicCal+0x4b4>
	        }
	        else
	        {
	        	check1 = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	677b      	str	r3, [r7, #116]	; 0x74
	            result2 = (double)num1/num2;
 8000ffe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001002:	f7ff f9ff 	bl	8000404 <__aeabi_i2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800100e:	f7ff fa2d 	bl	800046c <__aeabi_ul2d>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4620      	mov	r0, r4
 8001018:	4629      	mov	r1, r5
 800101a:	f7ff fb87 	bl	800072c <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        }
	        break;
 8001026:	e000      	b.n	800102a <logicCal+0x422>
	        break;
 8001028:	bf00      	nop
	}
	if (check1 == 0)
 800102a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800102c:	2b00      	cmp	r3, #0
 800102e:	d106      	bne.n	800103e <logicCal+0x436>
	{
		sprintf(final, "%d", result1);
 8001030:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001034:	4926      	ldr	r1, [pc, #152]	; (80010d0 <logicCal+0x4c8>)
 8001036:	4827      	ldr	r0, [pc, #156]	; (80010d4 <logicCal+0x4cc>)
 8001038:	f002 fd72 	bl	8003b20 <siprintf>
 800103c:	e005      	b.n	800104a <logicCal+0x442>
	}
	else
	{
		sprintf(final, "%f", result2);
 800103e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001042:	4925      	ldr	r1, [pc, #148]	; (80010d8 <logicCal+0x4d0>)
 8001044:	4823      	ldr	r0, [pc, #140]	; (80010d4 <logicCal+0x4cc>)
 8001046:	f002 fd6b 	bl	8003b20 <siprintf>
	}
	int tmpcount = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
	for(int z = 0; z < 16; z++)
 800104e:	2300      	movs	r3, #0
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
 8001052:	e00c      	b.n	800106e <logicCal+0x466>
	{
		LCD_Put_Cur(1, tmpcount);
 8001054:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001056:	2001      	movs	r0, #1
 8001058:	f000 faf4 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_Data('\0');
 800105c:	2000      	movs	r0, #0
 800105e:	f000 fab3 	bl	80015c8 <LCD_Send_Data>
		tmpcount++;
 8001062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001064:	3301      	adds	r3, #1
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
	for(int z = 0; z < 16; z++)
 8001068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800106a:	3301      	adds	r3, #1
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
 800106e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001070:	2b0f      	cmp	r3, #15
 8001072:	ddef      	ble.n	8001054 <logicCal+0x44c>
	}
	count3 = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	67bb      	str	r3, [r7, #120]	; 0x78
	while (final[count3] != '\0') count3++;
 8001078:	e002      	b.n	8001080 <logicCal+0x478>
 800107a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800107c:	3301      	adds	r3, #1
 800107e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <logicCal+0x4cc>)
 8001082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f6      	bne.n	800107a <logicCal+0x472>
	LCD_Put_Cur(1, 16 - count3);
 800108c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800108e:	f1c3 0310 	rsb	r3, r3, #16
 8001092:	4619      	mov	r1, r3
 8001094:	2001      	movs	r0, #1
 8001096:	f000 fad5 	bl	8001644 <LCD_Put_Cur>
	for(int y = 0; y < 16; y++) LCD_Send_Data(final[y]);
 800109a:	2300      	movs	r3, #0
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
 800109e:	e009      	b.n	80010b4 <logicCal+0x4ac>
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <logicCal+0x4cc>)
 80010a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fa8d 	bl	80015c8 <LCD_Send_Data>
 80010ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b0:	3301      	adds	r3, #1
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
 80010b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	ddf2      	ble.n	80010a0 <logicCal+0x498>
	return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3788      	adds	r7, #136	; 0x88
 80010c0:	46bd      	mov	sp, r7
 80010c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010c6:	bf00      	nop
 80010c8:	08005fb8 	.word	0x08005fb8
 80010cc:	08005fb0 	.word	0x08005fb0
 80010d0:	08005fc4 	.word	0x08005fc4
 80010d4:	20000228 	.word	0x20000228
 80010d8:	08005fc8 	.word	0x08005fc8

080010dc <ClearData>:
char operand[16];
int check = 0, check1 = 0, checkdiv = 0;
int i = 0, j = 0, temp = 0;

void ClearData()
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
	for (int l = 0; l < 16; l++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	e011      	b.n	800110c <ClearData+0x30>
	{
		operand1[l] = '\0';
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <ClearData+0x60>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		operand2[l] = '\0';
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <ClearData+0x64>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
		operand[l] = '\0';
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <ClearData+0x68>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	for (int l = 0; l < 16; l++)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3301      	adds	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	ddea      	ble.n	80010e8 <ClearData+0xc>
	}
	operator = '\0';
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <ClearData+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	i = 0; j = 0;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <ClearData+0x70>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <ClearData+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	check =  0; check1 = 1;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <ClearData+0x78>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <ClearData+0x7c>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000258 	.word	0x20000258
 8001140:	20000238 	.word	0x20000238
 8001144:	20000248 	.word	0x20000248
 8001148:	20000224 	.word	0x20000224
 800114c:	20000204 	.word	0x20000204
 8001150:	20000208 	.word	0x20000208
 8001154:	200001f8 	.word	0x200001f8
 8001158:	200001fc 	.word	0x200001fc

0800115c <LCD_add_To_String>:

void LCD_add_To_String(char data)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b090      	sub	sp, #64	; 0x40
 8001160:	af04      	add	r7, sp, #16
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	if (temp == 0 && check1 == 0)
 8001166:	4b9a      	ldr	r3, [pc, #616]	; (80013d0 <LCD_add_To_String+0x274>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <LCD_add_To_String+0x22>
 800116e:	4b99      	ldr	r3, [pc, #612]	; (80013d4 <LCD_add_To_String+0x278>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <LCD_add_To_String+0x22>
	{
		ClearData();
 8001176:	f7ff ffb1 	bl	80010dc <ClearData>
		LCD_Clear();
 800117a:	f000 fa85 	bl	8001688 <LCD_Clear>
	}
	if (data == '#')
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b23      	cmp	r3, #35	; 0x23
 8001182:	d107      	bne.n	8001194 <LCD_add_To_String+0x38>
	{
		ClearData();
 8001184:	f7ff ffaa 	bl	80010dc <ClearData>
		checkdiv = 0;
 8001188:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <LCD_add_To_String+0x27c>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
		LCD_Clear();
 800118e:	f000 fa7b 	bl	8001688 <LCD_Clear>
		return;
 8001192:	e174      	b.n	800147e <LCD_add_To_String+0x322>
	}
	else if (data == '=')
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b3d      	cmp	r3, #61	; 0x3d
 8001198:	d128      	bne.n	80011ec <LCD_add_To_String+0x90>
	{
		if ((i + j + 1) > 16)
 800119a:	4b90      	ldr	r3, [pc, #576]	; (80013dc <LCD_add_To_String+0x280>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b90      	ldr	r3, [pc, #576]	; (80013e0 <LCD_add_To_String+0x284>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	dd04      	ble.n	80011b2 <LCD_add_To_String+0x56>
		{
			ClearData();
 80011a8:	f7ff ff98 	bl	80010dc <ClearData>
			LCD_Clear();
 80011ac:	f000 fa6c 	bl	8001688 <LCD_Clear>
			return;
 80011b0:	e165      	b.n	800147e <LCD_add_To_String+0x322>
		}
		temp = logicCal(operand1, operand2, operator, check1, temp, checkdiv, i, j);
 80011b2:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <LCD_add_To_String+0x288>)
 80011b4:	781c      	ldrb	r4, [r3, #0]
 80011b6:	4b87      	ldr	r3, [pc, #540]	; (80013d4 <LCD_add_To_String+0x278>)
 80011b8:	681d      	ldr	r5, [r3, #0]
 80011ba:	4b85      	ldr	r3, [pc, #532]	; (80013d0 <LCD_add_To_String+0x274>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a86      	ldr	r2, [pc, #536]	; (80013d8 <LCD_add_To_String+0x27c>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4986      	ldr	r1, [pc, #536]	; (80013dc <LCD_add_To_String+0x280>)
 80011c4:	6809      	ldr	r1, [r1, #0]
 80011c6:	4886      	ldr	r0, [pc, #536]	; (80013e0 <LCD_add_To_String+0x284>)
 80011c8:	6800      	ldr	r0, [r0, #0]
 80011ca:	9003      	str	r0, [sp, #12]
 80011cc:	9102      	str	r1, [sp, #8]
 80011ce:	9201      	str	r2, [sp, #4]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	462b      	mov	r3, r5
 80011d4:	4622      	mov	r2, r4
 80011d6:	4984      	ldr	r1, [pc, #528]	; (80013e8 <LCD_add_To_String+0x28c>)
 80011d8:	4884      	ldr	r0, [pc, #528]	; (80013ec <LCD_add_To_String+0x290>)
 80011da:	f7ff fd15 	bl	8000c08 <logicCal>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a7b      	ldr	r2, [pc, #492]	; (80013d0 <LCD_add_To_String+0x274>)
 80011e2:	6013      	str	r3, [r2, #0]
		check1 = 0;
 80011e4:	4b7b      	ldr	r3, [pc, #492]	; (80013d4 <LCD_add_To_String+0x278>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
		return;
 80011ea:	e148      	b.n	800147e <LCD_add_To_String+0x322>
	}
	else if (temp == 1 && check1 == 0)
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <LCD_add_To_String+0x274>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d175      	bne.n	80012e0 <LCD_add_To_String+0x184>
 80011f4:	4b77      	ldr	r3, [pc, #476]	; (80013d4 <LCD_add_To_String+0x278>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d171      	bne.n	80012e0 <LCD_add_To_String+0x184>
	{
		for (int l = 0; l < 16; l++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001200:	e011      	b.n	8001226 <LCD_add_To_String+0xca>
		{
			operand1[l] = '\0';
 8001202:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <LCD_add_To_String+0x290>)
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	4413      	add	r3, r2
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
			operand2[l] = '\0';
 800120c:	4a76      	ldr	r2, [pc, #472]	; (80013e8 <LCD_add_To_String+0x28c>)
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	4413      	add	r3, r2
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
			operand[l] = '\0';
 8001216:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <LCD_add_To_String+0x294>)
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	4413      	add	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
		for (int l = 0; l < 16; l++)
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	3301      	adds	r3, #1
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	2b0f      	cmp	r3, #15
 800122a:	ddea      	ble.n	8001202 <LCD_add_To_String+0xa6>
		}
		operator = '\0';
 800122c:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <LCD_add_To_String+0x288>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
		int tmpcount = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int z = 0; z < 16; z++)
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
 800123a:	e00c      	b.n	8001256 <LCD_add_To_String+0xfa>
		{
			LCD_Put_Cur(0, tmpcount);
 800123c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fa00 	bl	8001644 <LCD_Put_Cur>
			LCD_Send_Data('\0');
 8001244:	2000      	movs	r0, #0
 8001246:	f000 f9bf 	bl	80015c8 <LCD_Send_Data>
			tmpcount++;
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	3301      	adds	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int z = 0; z < 16; z++)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2b0f      	cmp	r3, #15
 800125a:	ddef      	ble.n	800123c <LCD_add_To_String+0xe0>
		}

		for(int z = 0; z < 15; z++)
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
 8001260:	e00b      	b.n	800127a <LCD_add_To_String+0x11e>
		{
			operand[z] = operand[z+1];
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	3301      	adds	r3, #1
 8001266:	4a62      	ldr	r2, [pc, #392]	; (80013f0 <LCD_add_To_String+0x294>)
 8001268:	5cd1      	ldrb	r1, [r2, r3]
 800126a:	4a61      	ldr	r2, [pc, #388]	; (80013f0 <LCD_add_To_String+0x294>)
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
		for(int z = 0; z < 15; z++)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	3301      	adds	r3, #1
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	2b0e      	cmp	r3, #14
 800127e:	ddf0      	ble.n	8001262 <LCD_add_To_String+0x106>
		}
		operand[15] = data;
 8001280:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <LCD_add_To_String+0x294>)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	73d3      	strb	r3, [r2, #15]
		LCD_Put_Cur(0,0);
 8001286:	2100      	movs	r1, #0
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f9db 	bl	8001644 <LCD_Put_Cur>
		for(int z = 0; z < 16; z++) LCD_Send_Data(operand[z]);
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e009      	b.n	80012a8 <LCD_add_To_String+0x14c>
 8001294:	4a56      	ldr	r2, [pc, #344]	; (80013f0 <LCD_add_To_String+0x294>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f993 	bl	80015c8 <LCD_Send_Data>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	ddf2      	ble.n	8001294 <LCD_add_To_String+0x138>

		operator = data;
 80012ae:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <LCD_add_To_String+0x288>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	7013      	strb	r3, [r2, #0]
		if (operator == '/') checkdiv++;
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <LCD_add_To_String+0x288>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b2f      	cmp	r3, #47	; 0x2f
 80012ba:	d104      	bne.n	80012c6 <LCD_add_To_String+0x16a>
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <LCD_add_To_String+0x27c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <LCD_add_To_String+0x27c>)
 80012c4:	6013      	str	r3, [r2, #0]
		i = 1; j = 0;
 80012c6:	4b45      	ldr	r3, [pc, #276]	; (80013dc <LCD_add_To_String+0x280>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <LCD_add_To_String+0x284>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
		temp = 2; check = 1;
 80012d2:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <LCD_add_To_String+0x274>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <LCD_add_To_String+0x298>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

		return;
 80012de:	e0ce      	b.n	800147e <LCD_add_To_String+0x322>
	}


	if (operator != '\0')
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <LCD_add_To_String+0x288>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d015      	beq.n	8001314 <LCD_add_To_String+0x1b8>
	{
		if (data == '+' || data == 'x' || data == '/')
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b2b      	cmp	r3, #43	; 0x2b
 80012ec:	d005      	beq.n	80012fa <LCD_add_To_String+0x19e>
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b78      	cmp	r3, #120	; 0x78
 80012f2:	d002      	beq.n	80012fa <LCD_add_To_String+0x19e>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b2f      	cmp	r3, #47	; 0x2f
 80012f8:	d10c      	bne.n	8001314 <LCD_add_To_String+0x1b8>
		{
			operator = data;
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <LCD_add_To_String+0x288>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	7013      	strb	r3, [r2, #0]
			if (data == '/') checkdiv++;
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b2f      	cmp	r3, #47	; 0x2f
 8001304:	f040 80ba 	bne.w	800147c <LCD_add_To_String+0x320>
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <LCD_add_To_String+0x27c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <LCD_add_To_String+0x27c>)
 8001310:	6013      	str	r3, [r2, #0]
			return;
 8001312:	e0b3      	b.n	800147c <LCD_add_To_String+0x320>
		}
	}

	if (data >= '0' && data <= '9')
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b2f      	cmp	r3, #47	; 0x2f
 8001318:	d91c      	bls.n	8001354 <LCD_add_To_String+0x1f8>
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b39      	cmp	r3, #57	; 0x39
 800131e:	d819      	bhi.n	8001354 <LCD_add_To_String+0x1f8>
	{
		if (check == 0)
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <LCD_add_To_String+0x298>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10a      	bne.n	800133e <LCD_add_To_String+0x1e2>
		{
			operand1[i] = data;
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <LCD_add_To_String+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	492f      	ldr	r1, [pc, #188]	; (80013ec <LCD_add_To_String+0x290>)
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	54ca      	strb	r2, [r1, r3]
			i++;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <LCD_add_To_String+0x280>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a28      	ldr	r2, [pc, #160]	; (80013dc <LCD_add_To_String+0x280>)
 800133a:	6013      	str	r3, [r2, #0]
		if (check == 0)
 800133c:	e074      	b.n	8001428 <LCD_add_To_String+0x2cc>
		}
		else
		{
			operand2[j] = data;
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <LCD_add_To_String+0x284>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4929      	ldr	r1, [pc, #164]	; (80013e8 <LCD_add_To_String+0x28c>)
 8001344:	79fa      	ldrb	r2, [r7, #7]
 8001346:	54ca      	strb	r2, [r1, r3]
			j++;
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <LCD_add_To_String+0x284>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <LCD_add_To_String+0x284>)
 8001350:	6013      	str	r3, [r2, #0]
		if (check == 0)
 8001352:	e069      	b.n	8001428 <LCD_add_To_String+0x2cc>
		}
	}
	else if (data == '+' || data == '-' || data == 'x' || data == '/')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b2b      	cmp	r3, #43	; 0x2b
 8001358:	d008      	beq.n	800136c <LCD_add_To_String+0x210>
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b2d      	cmp	r3, #45	; 0x2d
 800135e:	d005      	beq.n	800136c <LCD_add_To_String+0x210>
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b78      	cmp	r3, #120	; 0x78
 8001364:	d002      	beq.n	800136c <LCD_add_To_String+0x210>
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b2f      	cmp	r3, #47	; 0x2f
 800136a:	d12c      	bne.n	80013c6 <LCD_add_To_String+0x26a>
	{
		if (i == 0)
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <LCD_add_To_String+0x280>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10a      	bne.n	800138a <LCD_add_To_String+0x22e>
		{
			operand1[i] = data;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <LCD_add_To_String+0x280>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	491c      	ldr	r1, [pc, #112]	; (80013ec <LCD_add_To_String+0x290>)
 800137a:	79fa      	ldrb	r2, [r7, #7]
 800137c:	54ca      	strb	r2, [r1, r3]
			i++;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <LCD_add_To_String+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	4a15      	ldr	r2, [pc, #84]	; (80013dc <LCD_add_To_String+0x280>)
 8001386:	6013      	str	r3, [r2, #0]
		if (i == 0)
 8001388:	e04e      	b.n	8001428 <LCD_add_To_String+0x2cc>
		}
		else if (check == 0)
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <LCD_add_To_String+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10e      	bne.n	80013b0 <LCD_add_To_String+0x254>
		{
			operator = data;
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <LCD_add_To_String+0x288>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	7013      	strb	r3, [r2, #0]
			if (data == '/') checkdiv++;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b2f      	cmp	r3, #47	; 0x2f
 800139c:	d104      	bne.n	80013a8 <LCD_add_To_String+0x24c>
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <LCD_add_To_String+0x27c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <LCD_add_To_String+0x27c>)
 80013a6:	6013      	str	r3, [r2, #0]
			check = 1;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <LCD_add_To_String+0x298>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
		if (i == 0)
 80013ae:	e03b      	b.n	8001428 <LCD_add_To_String+0x2cc>
		}
		else
		{
			operand2[j] = data;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LCD_add_To_String+0x284>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <LCD_add_To_String+0x28c>)
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	54ca      	strb	r2, [r1, r3]
		    j++;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <LCD_add_To_String+0x284>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <LCD_add_To_String+0x284>)
 80013c2:	6013      	str	r3, [r2, #0]
		if (i == 0)
 80013c4:	e030      	b.n	8001428 <LCD_add_To_String+0x2cc>
		}
	}
	else
	{
		int tmpcount = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
		for(int z = 0; z < 16; z++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e020      	b.n	8001412 <LCD_add_To_String+0x2b6>
 80013d0:	2000020c 	.word	0x2000020c
 80013d4:	200001fc 	.word	0x200001fc
 80013d8:	20000200 	.word	0x20000200
 80013dc:	20000204 	.word	0x20000204
 80013e0:	20000208 	.word	0x20000208
 80013e4:	20000224 	.word	0x20000224
 80013e8:	20000238 	.word	0x20000238
 80013ec:	20000258 	.word	0x20000258
 80013f0:	20000248 	.word	0x20000248
 80013f4:	200001f8 	.word	0x200001f8
		{
			LCD_Put_Cur(1, tmpcount);
 80013f8:	69b9      	ldr	r1, [r7, #24]
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 f922 	bl	8001644 <LCD_Put_Cur>
			LCD_Send_Data('\0');
 8001400:	2000      	movs	r0, #0
 8001402:	f000 f8e1 	bl	80015c8 <LCD_Send_Data>
			tmpcount++;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	3301      	adds	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
		for(int z = 0; z < 16; z++)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	ddef      	ble.n	80013f8 <LCD_add_To_String+0x29c>
		}
		LCD_Put_Cur(1, 11);
 8001418:	210b      	movs	r1, #11
 800141a:	2001      	movs	r0, #1
 800141c:	f000 f912 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <LCD_add_To_String+0x328>)
 8001422:	f000 f8f3 	bl	800160c <LCD_Send_String>
        return;
 8001426:	e02a      	b.n	800147e <LCD_add_To_String+0x322>
    }

	for(int z = 0; z < 15; z++)
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	e00b      	b.n	8001446 <LCD_add_To_String+0x2ea>
	{
		operand[z] = operand[z+1];
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	3301      	adds	r3, #1
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <LCD_add_To_String+0x32c>)
 8001434:	5cd1      	ldrb	r1, [r2, r3]
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <LCD_add_To_String+0x32c>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4413      	add	r3, r2
 800143c:	460a      	mov	r2, r1
 800143e:	701a      	strb	r2, [r3, #0]
	for(int z = 0; z < 15; z++)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3301      	adds	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b0e      	cmp	r3, #14
 800144a:	ddf0      	ble.n	800142e <LCD_add_To_String+0x2d2>
	}
	operand[15] = data;
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LCD_add_To_String+0x32c>)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	73d3      	strb	r3, [r2, #15]
	LCD_Put_Cur(0,0);
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f8f5 	bl	8001644 <LCD_Put_Cur>
	for(int z = 0; z < 16; z++) LCD_Send_Data(operand[z]);
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e009      	b.n	8001474 <LCD_add_To_String+0x318>
 8001460:	4a09      	ldr	r2, [pc, #36]	; (8001488 <LCD_add_To_String+0x32c>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f8ad 	bl	80015c8 <LCD_Send_Data>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	ddf2      	ble.n	8001460 <LCD_add_To_String+0x304>
 800147a:	e000      	b.n	800147e <LCD_add_To_String+0x322>
			return;
 800147c:	bf00      	nop
}
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bdb0      	pop	{r4, r5, r7, pc}
 8001484:	08005fcc 	.word	0x08005fcc
 8001488:	20000248 	.word	0x20000248

0800148c <send8bitstoLCD>:

void send8bitstoLCD(char vee){
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	int b0,b1,b2,b3,b4,b5,b6,b7;

	b0 = vee & 1;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
	b1 = vee & 2;
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	623b      	str	r3, [r7, #32]
	b2 = vee & 4;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	61fb      	str	r3, [r7, #28]
	b3 = vee & 8;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	61bb      	str	r3, [r7, #24]
	b4 = vee & 16;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
	b5 = vee & 32;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	613b      	str	r3, [r7, #16]
	b6 = vee & 64;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014cc:	60fb      	str	r3, [r7, #12]
	b7 = vee & 128;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d4:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, b0);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	2108      	movs	r1, #8
 80014de:	481d      	ldr	r0, [pc, #116]	; (8001554 <send8bitstoLCD+0xc8>)
 80014e0:	f000 fea7 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, b1);
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2104      	movs	r1, #4
 80014ec:	4819      	ldr	r0, [pc, #100]	; (8001554 <send8bitstoLCD+0xc8>)
 80014ee:	f000 fea0 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, b2);
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <send8bitstoLCD+0xc8>)
 80014fe:	f000 fe98 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, b3);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	2108      	movs	r1, #8
 800150a:	4813      	ldr	r0, [pc, #76]	; (8001558 <send8bitstoLCD+0xcc>)
 800150c:	f000 fe91 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, b4);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	2120      	movs	r1, #32
 8001518:	480f      	ldr	r0, [pc, #60]	; (8001558 <send8bitstoLCD+0xcc>)
 800151a:	f000 fe8a 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, b5);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	2110      	movs	r1, #16
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <send8bitstoLCD+0xcc>)
 8001528:	f000 fe83 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, b6);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <send8bitstoLCD+0xcc>)
 8001538:	f000 fe7b 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, b7);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <send8bitstoLCD+0xc8>)
 8001548:	f000 fe73 	bl	8002232 <HAL_GPIO_WritePin>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010800 	.word	0x40010800
 8001558:	40010c00 	.word	0x40010c00

0800155c <LCD_Init>:

void LCD_Init(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	LCD_Send_CMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
 8001560:	2038      	movs	r0, #56	; 0x38
 8001562:	f000 f80f 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x0C);		/* Display ON Cursor OFF */
 8001566:	200c      	movs	r0, #12
 8001568:	f000 f80c 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x06);		/* Auto Increment cursor */
 800156c:	2006      	movs	r0, #6
 800156e:	f000 f809 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x01);		/* Clear display */
 8001572:	2001      	movs	r0, #1
 8001574:	f000 f806 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x80);		/* Cursor at home position */
 8001578:	2080      	movs	r0, #128	; 0x80
 800157a:	f000 f803 	bl	8001584 <LCD_Send_CMD>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <LCD_Send_CMD>:

void LCD_Send_CMD(char cmd){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 0); // RS = 0 nean send command
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <LCD_Send_CMD+0x40>)
 8001596:	f000 fe4c 	bl	8002232 <HAL_GPIO_WritePin>
	send8bitstoLCD(cmd);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff75 	bl	800148c <send8bitstoLCD>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <LCD_Send_CMD+0x40>)
 80015aa:	f000 fe42 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <LCD_Send_CMD+0x40>)
 80015b6:	f000 fe3c 	bl	8002232 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010800 	.word	0x40010800

080015c8 <LCD_Send_Data>:

void LCD_Send_Data(char data){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 1); // RS = 1 send data
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LCD_Send_Data+0x40>)
 80015da:	f000 fe2a 	bl	8002232 <HAL_GPIO_WritePin>
	send8bitstoLCD(data);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff53 	bl	800148c <send8bitstoLCD>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <LCD_Send_Data+0x40>)
 80015ee:	f000 fe20 	bl	8002232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <LCD_Send_Data+0x40>)
 80015fa:	f000 fe1a 	bl	8002232 <HAL_GPIO_WritePin>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40010800 	.word	0x40010800

0800160c <LCD_Send_String>:

void LCD_Send_String(char *str){
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i] != '\0'; i++){
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e009      	b.n	800162e <LCD_Send_String+0x22>
		LCD_Send_Data(str[i]);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffd0 	bl	80015c8 <LCD_Send_Data>
	for (int i = 0; str[i] != '\0'; i++){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ef      	bne.n	800161a <LCD_Send_String+0xe>
	}
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LCD_Put_Cur>:

void LCD_Put_Cur(int row,int col){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	LCD_Send_CMD(0x3C);		//Activate second line
 800164e:	203c      	movs	r0, #60	; 0x3c
 8001650:	f7ff ff98 	bl	8001584 <LCD_Send_CMD>
	switch(row){
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <LCD_Put_Cur+0x1e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <LCD_Put_Cur+0x28>
 8001660:	e009      	b.n	8001676 <LCD_Put_Cur+0x32>
	case 0:
		col |= 0x80;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	603b      	str	r3, [r7, #0]
		break;
 800166a:	e004      	b.n	8001676 <LCD_Put_Cur+0x32>
	case 1:
		col |= 0xC0;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001672:	603b      	str	r3, [r7, #0]
		break;
 8001674:	bf00      	nop
	}
	LCD_Send_CMD(col);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff82 	bl	8001584 <LCD_Send_CMD>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <LCD_Clear>:

void LCD_Clear(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	LCD_Send_CMD(0x01);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ff79 	bl	8001584 <LCD_Send_CMD>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f000 faa4 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f812 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f000 f898 	bl	80017d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016a8:	f000 f84a 	bl	8001740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <main+0x2c>)
 80016ae:	f001 fa11 	bl	8002ad4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init();
 80016b2:	f7ff ff53 	bl	800155c <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	  Key_Read();
 80016b6:	f7ff fa8d 	bl	8000bd4 <Key_Read>
	  HAL_Delay(300);
 80016ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016be:	f000 faf5 	bl	8001cac <HAL_Delay>
	  Key_Read();
 80016c2:	e7f8      	b.n	80016b6 <main+0x1e>
 80016c4:	20000268 	.word	0x20000268

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	; 0x40
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2228      	movs	r2, #40	; 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fdba 	bl	8003250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f2:	2310      	movs	r3, #16
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fdb0 	bl	8002264 <HAL_RCC_OscConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800170a:	f000 f8d9 	bl	80018c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170e:	230f      	movs	r3, #15
 8001710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f001 f81c 	bl	8002764 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001732:	f000 f8c5 	bl	80018c0 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	; 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_TIM2_Init+0x94>)
 800175e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001766:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800176a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM2_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001774:	2209      	movs	r2, #9
 8001776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_TIM2_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001784:	4813      	ldr	r0, [pc, #76]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001786:	f001 f955 	bl	8002a34 <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001790:	f000 f896 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <MX_TIM2_Init+0x94>)
 80017a2:	f001 faeb 	bl	8002d7c <HAL_TIM_ConfigClockSource>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017ac:	f000 f888 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM2_Init+0x94>)
 80017be:	f001 fcb3 	bl	8003128 <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 f87a 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000268 	.word	0x20000268

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <MX_GPIO_Init+0xc8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <MX_GPIO_Init+0xc8>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_GPIO_Init+0xc8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_GPIO_Init+0xc8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <MX_GPIO_Init+0xc8>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <MX_GPIO_Init+0xc8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C0_Pin|C1_Pin|D1_Pin|D0_Pin
 800181c:	2200      	movs	r2, #0
 800181e:	f641 511f 	movw	r1, #7455	; 0x1d1f
 8001822:	4820      	ldr	r0, [pc, #128]	; (80018a4 <MX_GPIO_Init+0xcc>)
 8001824:	f000 fd05 	bl	8002232 <HAL_GPIO_WritePin>
                          |C2_Pin|D7_Pin|D2_Pin|RS_Pin
                          |EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C3_Pin|D6_Pin|D3_Pin|D5_Pin
 8001828:	2200      	movs	r2, #0
 800182a:	f240 4139 	movw	r1, #1081	; 0x439
 800182e:	481e      	ldr	r0, [pc, #120]	; (80018a8 <MX_GPIO_Init+0xd0>)
 8001830:	f000 fcff 	bl	8002232 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB,R0_Pin|R1_Pin|R2_Pin|R3_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f641 0106 	movw	r1, #6150	; 0x1806
 800183a:	481b      	ldr	r0, [pc, #108]	; (80018a8 <MX_GPIO_Init+0xd0>)
 800183c:	f000 fcf9 	bl	8002232 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : C0_Pin C1_Pin D1_Pin D0_Pin
                           C2_Pin D7_Pin D2_Pin RS_Pin
                           EN_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|D1_Pin|D0_Pin
 8001840:	f641 531f 	movw	r3, #7455	; 0x1d1f
 8001844:	60bb      	str	r3, [r7, #8]
                          |C2_Pin|D7_Pin|D2_Pin|RS_Pin
                          |EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2302      	movs	r3, #2
 8001850:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4619      	mov	r1, r3
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_GPIO_Init+0xcc>)
 800185a:	f000 fb59 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin R0_Pin R1_Pin D6_Pin
                           R2_Pin R3_Pin D3_Pin */
  GPIO_InitStruct.Pin = C3_Pin|R0_Pin|R1_Pin|D6_Pin
 800185e:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001862:	60bb      	str	r3, [r7, #8]
                          |R2_Pin|R3_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2302      	movs	r3, #2
 800186e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4619      	mov	r1, r3
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <MX_GPIO_Init+0xd0>)
 8001878:	f000 fb4a 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 800187c:	2330      	movs	r3, #48	; 0x30
 800187e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_GPIO_Init+0xd0>)
 8001894:	f000 fb3c 	bl	8001f10 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00

080018ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	timerRun();
 80018b4:	f000 f80a 	bl	80018cc <timerRun>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>
	...

080018cc <timerRun>:
void setTimer1(int duration){
	timer1_counter = duration / TIMER_CYCLE;
	timer1_flag = 0;
}

void timerRun(){
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <timerRun+0x2c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dd0b      	ble.n	80018f0 <timerRun+0x24>
		timer1_counter--;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <timerRun+0x2c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <timerRun+0x2c>)
 80018e0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <timerRun+0x2c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	dc02      	bgt.n	80018f0 <timerRun+0x24>
			timer1_flag = 1;
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <timerRun+0x30>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
		}
	}
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000214 	.word	0x20000214
 80018fc:	20000210 	.word	0x20000210

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_MspInit+0x5c>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_MspInit+0x5c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6193      	str	r3, [r2, #24]
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_MspInit+0x5c>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_MspInit+0x5c>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_MspInit+0x5c>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	61d3      	str	r3, [r2, #28]
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_MspInit+0x5c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_MspInit+0x60>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_MspInit+0x60>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d113      	bne.n	800199e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201c      	movs	r0, #28
 8001994:	f000 fa85 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001998:	201c      	movs	r0, #28
 800199a:	f000 fa9e 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 f93f 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM2_IRQHandler+0x10>)
 8001a02:	f001 f8b3 	bl	8002b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000268 	.word	0x20000268

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_kill>:

int _kill(int pid, int sig)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a28:	f001 fbe8 	bl	80031fc <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2216      	movs	r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
	return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_exit>:

void _exit (int status)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a46:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffe7 	bl	8001a1e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a50:	e7fe      	b.n	8001a50 <_exit+0x12>

08001a52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e00a      	b.n	8001a7a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a64:	f3af 8000 	nop.w
 8001a68:	4601      	mov	r1, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60ba      	str	r2, [r7, #8]
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbf0      	blt.n	8001a64 <_read+0x12>
	}

return len;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e009      	b.n	8001ab2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60ba      	str	r2, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf1      	blt.n	8001a9e <_write+0x12>
	}
	return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_close>:

int _close(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <_isatty>:

int _isatty(int file)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f001 fb52 	bl	80031fc <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20002800 	.word	0x20002800
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20000218 	.word	0x20000218
 8001b8c:	200002c8 	.word	0x200002c8

08001b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc2:	f7ff ffe5 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f001 fb1f 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff fd65 	bl	8001698 <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bd8:	080063ec 	.word	0x080063ec
  ldr r2, =_sbss
 8001bdc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001be0:	200002c4 	.word	0x200002c4

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f947 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fe7c 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f95f 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f927 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000008 	.word	0x20000008
 8001c94:	200002b0 	.word	0x200002b0

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	200002b0 	.word	0x200002b0

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffe0 	bl	8001c98 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4906      	ldr	r1, [pc, #24]	; (8001d8c <__NVIC_EnableIRQ+0x34>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff90 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff2d 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff42 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff90 	bl	8001de4 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff35 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b08b      	sub	sp, #44	; 0x2c
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	e148      	b.n	80021b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f24:	2201      	movs	r2, #1
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8137 	bne.w	80021b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4aa3      	ldr	r2, [pc, #652]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d05e      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f4c:	4aa1      	ldr	r2, [pc, #644]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d875      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f52:	4aa1      	ldr	r2, [pc, #644]	; (80021d8 <HAL_GPIO_Init+0x2c8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d058      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f58:	4a9f      	ldr	r2, [pc, #636]	; (80021d8 <HAL_GPIO_Init+0x2c8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d86f      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f5e:	4a9f      	ldr	r2, [pc, #636]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d052      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f64:	4a9d      	ldr	r2, [pc, #628]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d869      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f6a:	4a9d      	ldr	r2, [pc, #628]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04c      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f70:	4a9b      	ldr	r2, [pc, #620]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d863      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f76:	4a9b      	ldr	r2, [pc, #620]	; (80021e4 <HAL_GPIO_Init+0x2d4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d046      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a99      	ldr	r2, [pc, #612]	; (80021e4 <HAL_GPIO_Init+0x2d4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d85d      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d82a      	bhi.n	8001fdc <HAL_GPIO_Init+0xcc>
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d859      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_GPIO_Init+0x80>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	0800200b 	.word	0x0800200b
 8001f94:	08001fe5 	.word	0x08001fe5
 8001f98:	08001ff7 	.word	0x08001ff7
 8001f9c:	08002039 	.word	0x08002039
 8001fa0:	0800203f 	.word	0x0800203f
 8001fa4:	0800203f 	.word	0x0800203f
 8001fa8:	0800203f 	.word	0x0800203f
 8001fac:	0800203f 	.word	0x0800203f
 8001fb0:	0800203f 	.word	0x0800203f
 8001fb4:	0800203f 	.word	0x0800203f
 8001fb8:	0800203f 	.word	0x0800203f
 8001fbc:	0800203f 	.word	0x0800203f
 8001fc0:	0800203f 	.word	0x0800203f
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	0800203f 	.word	0x0800203f
 8001fcc:	0800203f 	.word	0x0800203f
 8001fd0:	0800203f 	.word	0x0800203f
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	08002001 	.word	0x08002001
 8001fdc:	4a82      	ldr	r2, [pc, #520]	; (80021e8 <HAL_GPIO_Init+0x2d8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fe2:	e02c      	b.n	800203e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e029      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e024      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	623b      	str	r3, [r7, #32]
          break;
 8001ffe:	e01f      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	330c      	adds	r3, #12
 8002006:	623b      	str	r3, [r7, #32]
          break;
 8002008:	e01a      	b.n	8002040 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002012:	2304      	movs	r3, #4
 8002014:	623b      	str	r3, [r7, #32]
          break;
 8002016:	e013      	b.n	8002040 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	611a      	str	r2, [r3, #16]
          break;
 800202a:	e009      	b.n	8002040 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	615a      	str	r2, [r3, #20]
          break;
 8002036:	e003      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x130>
          break;
 800203e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d801      	bhi.n	800204a <HAL_GPIO_Init+0x13a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	e001      	b.n	800204e <HAL_GPIO_Init+0x13e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d802      	bhi.n	800205c <HAL_GPIO_Init+0x14c>
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	e002      	b.n	8002062 <HAL_GPIO_Init+0x152>
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3b08      	subs	r3, #8
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	210f      	movs	r1, #15
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	401a      	ands	r2, r3
 8002074:	6a39      	ldr	r1, [r7, #32]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8090 	beq.w	80021b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002090:	4b56      	ldr	r3, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x2dc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a55      	ldr	r2, [pc, #340]	; (80021ec <HAL_GPIO_Init+0x2dc>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_GPIO_Init+0x2dc>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a8:	4a51      	ldr	r2, [pc, #324]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <HAL_GPIO_Init+0x2e4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00d      	beq.n	80020f0 <HAL_GPIO_Init+0x1e0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <HAL_GPIO_Init+0x2e8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_Init+0x1dc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a47      	ldr	r2, [pc, #284]	; (80021fc <HAL_GPIO_Init+0x2ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_GPIO_Init+0x1d8>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020e8:	2303      	movs	r3, #3
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020f0:	2300      	movs	r3, #0
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002102:	493b      	ldr	r1, [pc, #236]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800212a:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4933      	ldr	r1, [pc, #204]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002134:	4013      	ands	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	492d      	ldr	r1, [pc, #180]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4929      	ldr	r1, [pc, #164]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800215c:	4013      	ands	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4923      	ldr	r1, [pc, #140]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	491f      	ldr	r1, [pc, #124]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002184:	4013      	ands	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4919      	ldr	r1, [pc, #100]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4915      	ldr	r1, [pc, #84]	; (8002200 <HAL_GPIO_Init+0x2f0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	3301      	adds	r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f47f aeaf 	bne.w	8001f24 <HAL_GPIO_Init+0x14>
  }
}
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
 80021ca:	372c      	adds	r7, #44	; 0x2c
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	10320000 	.word	0x10320000
 80021d8:	10310000 	.word	0x10310000
 80021dc:	10220000 	.word	0x10220000
 80021e0:	10210000 	.word	0x10210000
 80021e4:	10120000 	.word	0x10120000
 80021e8:	10110000 	.word	0x10110000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	40011000 	.word	0x40011000
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]
 800223e:	4613      	mov	r3, r2
 8002240:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002242:	787b      	ldrb	r3, [r7, #1]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002248:	887a      	ldrh	r2, [r7, #2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800224e:	e003      	b.n	8002258 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e26c      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002290:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
 800229c:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x12c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e246      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x76>
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7f      	ldr	r2, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7a      	ldr	r2, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xbc>
 8002306:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a71      	ldr	r2, [pc, #452]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 8002320:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff fcaa 	bl	8001c98 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fca6 	bl	8001c98 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1fa      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe4>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fc96 	bl	8001c98 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fc92 	bl	8001c98 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1e6      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x10c>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
 80023b6:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1ba      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fc4b 	bl	8001c98 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff fc47 	bl	8001c98 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e19b      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4927      	ldr	r1, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fc2a 	bl	8001c98 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7ff fc26 	bl	8001c98 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e17a      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d019      	beq.n	80024ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7ff fc0a 	bl	8001c98 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7ff fc06 	bl	8001c98 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e15a      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 faa6 	bl	80029f8 <RCC_Delay>
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7ff fbf0 	bl	8001c98 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	e00f      	b.n	80024dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff fbec 	bl	8001c98 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d908      	bls.n	80024dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e140      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	42420000 	.word	0x42420000
 80024d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b9e      	ldr	r3, [pc, #632]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e9      	bne.n	80024bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a6 	beq.w	8002642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b97      	ldr	r3, [pc, #604]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a93      	ldr	r2, [pc, #588]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b8e      	ldr	r3, [pc, #568]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a8a      	ldr	r2, [pc, #552]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7ff fbad 	bl	8001c98 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7ff fba9 	bl	8001c98 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	; 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0fd      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x312>
 8002568:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x334>
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a75      	ldr	r2, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	e01c      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_OscConfig+0x356>
 80025a0:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a6c      	ldr	r2, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a69      	ldr	r2, [pc, #420]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e00b      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a66      	ldr	r2, [pc, #408]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b64      	ldr	r3, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a63      	ldr	r2, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7ff fb5d 	bl	8001c98 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7ff fb59 	bl	8001c98 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ab      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	4b57      	ldr	r3, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ee      	beq.n	80025e2 <HAL_RCC_OscConfig+0x37e>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7ff fb47 	bl	8001c98 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7ff fb43 	bl	8001c98 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e095      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8081 	beq.w	800274e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d061      	beq.n	800271c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff fb17 	bl	8001c98 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff fb13 	bl	8001c98 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e067      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d108      	bne.n	80026a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	492d      	ldr	r1, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a19      	ldr	r1, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	430b      	orrs	r3, r1
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff fae7 	bl	8001c98 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff fae3 	bl	8001c98 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e037      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x46a>
 80026ec:	e02f      	b.n	800274e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fad0 	bl	8001c98 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff facc 	bl	8001c98 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e020      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
 800271a:	e018      	b.n	800274e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	42420060 	.word	0x42420060

08002764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d0      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4965      	ldr	r1, [pc, #404]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b8      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494d      	ldr	r1, [pc, #308]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d040      	beq.n	8002884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07f      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e073      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06b      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4936      	ldr	r1, [pc, #216]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002854:	f7ff fa20 	bl	8001c98 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7ff fa1c 	bl	8001c98 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e053      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d210      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4922      	ldr	r1, [pc, #136]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e032      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490e      	ldr	r1, [pc, #56]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f821 	bl	8002938 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490a      	ldr	r1, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1d0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f97e 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40022000 	.word	0x40022000
 8002928:	40021000 	.word	0x40021000
 800292c:	08005ff4 	.word	0x08005ff4
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002938:	b490      	push	{r4, r7}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002940:	1d3c      	adds	r4, r7, #4
 8002942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002948:	f240 2301 	movw	r3, #513	; 0x201
 800294c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b04      	cmp	r3, #4
 8002970:	d002      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x40>
 8002972:	2b08      	cmp	r3, #8
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x46>
 8002976:	e02d      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297a:	623b      	str	r3, [r7, #32]
      break;
 800297c:	e02d      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800298a:	4413      	add	r3, r2
 800298c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002990:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0c5b      	lsrs	r3, r3, #17
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029aa:	4413      	add	r3, r2
 80029ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b6:	fb02 f203 	mul.w	r2, r2, r3
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e004      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	623b      	str	r3, [r7, #32]
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d6:	623b      	str	r3, [r7, #32]
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	6a3b      	ldr	r3, [r7, #32]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc90      	pop	{r4, r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	08005fd4 	.word	0x08005fd4
 80029ec:	40021000 	.word	0x40021000
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	003d0900 	.word	0x003d0900

080029f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <RCC_Delay+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <RCC_Delay+0x38>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a14:	bf00      	nop
  }
  while (Delay --);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <RCC_Delay+0x1c>
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	10624dd3 	.word	0x10624dd3

08002a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e041      	b.n	8002aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe ff82 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 fa6a 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d001      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e035      	b.n	8002b58 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_TIM_Base_Start_IT+0x90>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x4e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d004      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x4e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <HAL_TIM_Base_Start_IT+0x94>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d111      	bne.n	8002b46 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d010      	beq.n	8002b56 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	e007      	b.n	8002b56 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400

08002b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0202 	mvn.w	r2, #2
 8002b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f9b1 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9a4 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f9b3 	bl	8002f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d122      	bne.n	8002c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d11b      	bne.n	8002c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0204 	mvn.w	r2, #4
 8002bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f987 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f97a 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f989 	bl	8002f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0208 	mvn.w	r2, #8
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2204      	movs	r2, #4
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f95d 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f950 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f95f 	bl	8002f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0210 	mvn.w	r2, #16
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f933 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f926 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f935 	bl	8002f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0201 	mvn.w	r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe fdde 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d10e      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d107      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa67 	bl	80031ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	d10e      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d107      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8f9 	bl	8002f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0220 	mvn.w	r2, #32
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa32 	bl	80031d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0x18>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0b3      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x180>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dcc:	d03e      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0xd0>
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	f200 8087 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	f000 8085 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	d87f      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d01a      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0xa2>
 8002de8:	2b70      	cmp	r3, #112	; 0x70
 8002dea:	d87b      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002dec:	2b60      	cmp	r3, #96	; 0x60
 8002dee:	d050      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x116>
 8002df0:	2b60      	cmp	r3, #96	; 0x60
 8002df2:	d877      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002df4:	2b50      	cmp	r3, #80	; 0x50
 8002df6:	d03c      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0xf6>
 8002df8:	2b50      	cmp	r3, #80	; 0x50
 8002dfa:	d873      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d058      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x136>
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d86f      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002e04:	2b30      	cmp	r3, #48	; 0x30
 8002e06:	d064      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x156>
 8002e08:	2b30      	cmp	r3, #48	; 0x30
 8002e0a:	d86b      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d060      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x156>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d867      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05c      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x156>
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d05a      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e1c:	e062      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6899      	ldr	r1, [r3, #8]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f000 f95c 	bl	80030ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	609a      	str	r2, [r3, #8]
      break;
 8002e4a:	e04e      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6899      	ldr	r1, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f000 f945 	bl	80030ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6e:	609a      	str	r2, [r3, #8]
      break;
 8002e70:	e03b      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f000 f8bc 	bl	8002ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2150      	movs	r1, #80	; 0x50
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f913 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002e90:	e02b      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f000 f8da 	bl	8003058 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2160      	movs	r1, #96	; 0x60
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f903 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002eb0:	e01b      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f000 f89c 	bl	8002ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f8f3 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e00b      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f000 f8ea 	bl	80030b6 <TIM_ITRx_SetConfig>
        break;
 8002ee2:	e002      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <TIM_Base_SetConfig+0xa8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0x28>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0x28>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <TIM_Base_SetConfig+0xac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d108      	bne.n	8002f86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <TIM_Base_SetConfig+0xa8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <TIM_Base_SetConfig+0x52>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d003      	beq.n	8002f9e <TIM_Base_SetConfig+0x52>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <TIM_Base_SetConfig+0xac>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <TIM_Base_SetConfig+0xa8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400

08002ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 030a 	bic.w	r3, r3, #10
 8003038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 0210 	bic.w	r2, r3, #16
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	031b      	lsls	r3, r3, #12
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 0307 	orr.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b087      	sub	sp, #28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003104:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4313      	orrs	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e041      	b.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d004      	beq.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10c      	bne.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400

080031d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <__errno>:
 80031fc:	4b01      	ldr	r3, [pc, #4]	; (8003204 <__errno+0x8>)
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	2000000c 	.word	0x2000000c

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	2600      	movs	r6, #0
 800320c:	4d0c      	ldr	r5, [pc, #48]	; (8003240 <__libc_init_array+0x38>)
 800320e:	4c0d      	ldr	r4, [pc, #52]	; (8003244 <__libc_init_array+0x3c>)
 8003210:	1b64      	subs	r4, r4, r5
 8003212:	10a4      	asrs	r4, r4, #2
 8003214:	42a6      	cmp	r6, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	f002 febc 	bl	8005f94 <_init>
 800321c:	2600      	movs	r6, #0
 800321e:	4d0a      	ldr	r5, [pc, #40]	; (8003248 <__libc_init_array+0x40>)
 8003220:	4c0a      	ldr	r4, [pc, #40]	; (800324c <__libc_init_array+0x44>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	42a6      	cmp	r6, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003230:	4798      	blx	r3
 8003232:	3601      	adds	r6, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f855 3b04 	ldr.w	r3, [r5], #4
 800323a:	4798      	blx	r3
 800323c:	3601      	adds	r6, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	080063e4 	.word	0x080063e4
 8003244:	080063e4 	.word	0x080063e4
 8003248:	080063e4 	.word	0x080063e4
 800324c:	080063e8 	.word	0x080063e8

08003250 <memset>:
 8003250:	4603      	mov	r3, r0
 8003252:	4402      	add	r2, r0
 8003254:	4293      	cmp	r3, r2
 8003256:	d100      	bne.n	800325a <memset+0xa>
 8003258:	4770      	bx	lr
 800325a:	f803 1b01 	strb.w	r1, [r3], #1
 800325e:	e7f9      	b.n	8003254 <memset+0x4>

08003260 <__cvt>:
 8003260:	2b00      	cmp	r3, #0
 8003262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003266:	461f      	mov	r7, r3
 8003268:	bfbb      	ittet	lt
 800326a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800326e:	461f      	movlt	r7, r3
 8003270:	2300      	movge	r3, #0
 8003272:	232d      	movlt	r3, #45	; 0x2d
 8003274:	b088      	sub	sp, #32
 8003276:	4614      	mov	r4, r2
 8003278:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800327a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800327c:	7013      	strb	r3, [r2, #0]
 800327e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003280:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003284:	f023 0820 	bic.w	r8, r3, #32
 8003288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800328c:	d005      	beq.n	800329a <__cvt+0x3a>
 800328e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003292:	d100      	bne.n	8003296 <__cvt+0x36>
 8003294:	3501      	adds	r5, #1
 8003296:	2302      	movs	r3, #2
 8003298:	e000      	b.n	800329c <__cvt+0x3c>
 800329a:	2303      	movs	r3, #3
 800329c:	aa07      	add	r2, sp, #28
 800329e:	9204      	str	r2, [sp, #16]
 80032a0:	aa06      	add	r2, sp, #24
 80032a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032a6:	e9cd 3500 	strd	r3, r5, [sp]
 80032aa:	4622      	mov	r2, r4
 80032ac:	463b      	mov	r3, r7
 80032ae:	f000 fce7 	bl	8003c80 <_dtoa_r>
 80032b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032b6:	4606      	mov	r6, r0
 80032b8:	d102      	bne.n	80032c0 <__cvt+0x60>
 80032ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032bc:	07db      	lsls	r3, r3, #31
 80032be:	d522      	bpl.n	8003306 <__cvt+0xa6>
 80032c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032c4:	eb06 0905 	add.w	r9, r6, r5
 80032c8:	d110      	bne.n	80032ec <__cvt+0x8c>
 80032ca:	7833      	ldrb	r3, [r6, #0]
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d10a      	bne.n	80032e6 <__cvt+0x86>
 80032d0:	2200      	movs	r2, #0
 80032d2:	2300      	movs	r3, #0
 80032d4:	4620      	mov	r0, r4
 80032d6:	4639      	mov	r1, r7
 80032d8:	f7fd fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80032dc:	b918      	cbnz	r0, 80032e6 <__cvt+0x86>
 80032de:	f1c5 0501 	rsb	r5, r5, #1
 80032e2:	f8ca 5000 	str.w	r5, [sl]
 80032e6:	f8da 3000 	ldr.w	r3, [sl]
 80032ea:	4499      	add	r9, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	2300      	movs	r3, #0
 80032f0:	4620      	mov	r0, r4
 80032f2:	4639      	mov	r1, r7
 80032f4:	f7fd fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80032f8:	b108      	cbz	r0, 80032fe <__cvt+0x9e>
 80032fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80032fe:	2230      	movs	r2, #48	; 0x30
 8003300:	9b07      	ldr	r3, [sp, #28]
 8003302:	454b      	cmp	r3, r9
 8003304:	d307      	bcc.n	8003316 <__cvt+0xb6>
 8003306:	4630      	mov	r0, r6
 8003308:	9b07      	ldr	r3, [sp, #28]
 800330a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800330c:	1b9b      	subs	r3, r3, r6
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	b008      	add	sp, #32
 8003312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	9107      	str	r1, [sp, #28]
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e7f0      	b.n	8003300 <__cvt+0xa0>

0800331e <__exponent>:
 800331e:	4603      	mov	r3, r0
 8003320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003322:	2900      	cmp	r1, #0
 8003324:	f803 2b02 	strb.w	r2, [r3], #2
 8003328:	bfb6      	itet	lt
 800332a:	222d      	movlt	r2, #45	; 0x2d
 800332c:	222b      	movge	r2, #43	; 0x2b
 800332e:	4249      	neglt	r1, r1
 8003330:	2909      	cmp	r1, #9
 8003332:	7042      	strb	r2, [r0, #1]
 8003334:	dd2b      	ble.n	800338e <__exponent+0x70>
 8003336:	f10d 0407 	add.w	r4, sp, #7
 800333a:	46a4      	mov	ip, r4
 800333c:	270a      	movs	r7, #10
 800333e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003342:	460a      	mov	r2, r1
 8003344:	46a6      	mov	lr, r4
 8003346:	fb07 1516 	mls	r5, r7, r6, r1
 800334a:	2a63      	cmp	r2, #99	; 0x63
 800334c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003350:	4631      	mov	r1, r6
 8003352:	f104 34ff 	add.w	r4, r4, #4294967295
 8003356:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800335a:	dcf0      	bgt.n	800333e <__exponent+0x20>
 800335c:	3130      	adds	r1, #48	; 0x30
 800335e:	f1ae 0502 	sub.w	r5, lr, #2
 8003362:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003366:	4629      	mov	r1, r5
 8003368:	1c44      	adds	r4, r0, #1
 800336a:	4561      	cmp	r1, ip
 800336c:	d30a      	bcc.n	8003384 <__exponent+0x66>
 800336e:	f10d 0209 	add.w	r2, sp, #9
 8003372:	eba2 020e 	sub.w	r2, r2, lr
 8003376:	4565      	cmp	r5, ip
 8003378:	bf88      	it	hi
 800337a:	2200      	movhi	r2, #0
 800337c:	4413      	add	r3, r2
 800337e:	1a18      	subs	r0, r3, r0
 8003380:	b003      	add	sp, #12
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003384:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003388:	f804 2f01 	strb.w	r2, [r4, #1]!
 800338c:	e7ed      	b.n	800336a <__exponent+0x4c>
 800338e:	2330      	movs	r3, #48	; 0x30
 8003390:	3130      	adds	r1, #48	; 0x30
 8003392:	7083      	strb	r3, [r0, #2]
 8003394:	70c1      	strb	r1, [r0, #3]
 8003396:	1d03      	adds	r3, r0, #4
 8003398:	e7f1      	b.n	800337e <__exponent+0x60>
	...

0800339c <_printf_float>:
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a0:	b091      	sub	sp, #68	; 0x44
 80033a2:	460c      	mov	r4, r1
 80033a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80033a8:	4616      	mov	r6, r2
 80033aa:	461f      	mov	r7, r3
 80033ac:	4605      	mov	r5, r0
 80033ae:	f001 fa55 	bl	800485c <_localeconv_r>
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	9309      	str	r3, [sp, #36]	; 0x24
 80033b8:	f7fc feca 	bl	8000150 <strlen>
 80033bc:	2300      	movs	r3, #0
 80033be:	930e      	str	r3, [sp, #56]	; 0x38
 80033c0:	f8d8 3000 	ldr.w	r3, [r8]
 80033c4:	900a      	str	r0, [sp, #40]	; 0x28
 80033c6:	3307      	adds	r3, #7
 80033c8:	f023 0307 	bic.w	r3, r3, #7
 80033cc:	f103 0208 	add.w	r2, r3, #8
 80033d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80033d4:	f8d4 b000 	ldr.w	fp, [r4]
 80033d8:	f8c8 2000 	str.w	r2, [r8]
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80033e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80033ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295
 80033f2:	4640      	mov	r0, r8
 80033f4:	4b9c      	ldr	r3, [pc, #624]	; (8003668 <_printf_float+0x2cc>)
 80033f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033f8:	f7fd fb08 	bl	8000a0c <__aeabi_dcmpun>
 80033fc:	bb70      	cbnz	r0, 800345c <_printf_float+0xc0>
 80033fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003402:	4640      	mov	r0, r8
 8003404:	4b98      	ldr	r3, [pc, #608]	; (8003668 <_printf_float+0x2cc>)
 8003406:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003408:	f7fd fae2 	bl	80009d0 <__aeabi_dcmple>
 800340c:	bb30      	cbnz	r0, 800345c <_printf_float+0xc0>
 800340e:	2200      	movs	r2, #0
 8003410:	2300      	movs	r3, #0
 8003412:	4640      	mov	r0, r8
 8003414:	4651      	mov	r1, sl
 8003416:	f7fd fad1 	bl	80009bc <__aeabi_dcmplt>
 800341a:	b110      	cbz	r0, 8003422 <_printf_float+0x86>
 800341c:	232d      	movs	r3, #45	; 0x2d
 800341e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003422:	4b92      	ldr	r3, [pc, #584]	; (800366c <_printf_float+0x2d0>)
 8003424:	4892      	ldr	r0, [pc, #584]	; (8003670 <_printf_float+0x2d4>)
 8003426:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800342a:	bf94      	ite	ls
 800342c:	4698      	movls	r8, r3
 800342e:	4680      	movhi	r8, r0
 8003430:	2303      	movs	r3, #3
 8003432:	f04f 0a00 	mov.w	sl, #0
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	f02b 0304 	bic.w	r3, fp, #4
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	4633      	mov	r3, r6
 8003440:	4621      	mov	r1, r4
 8003442:	4628      	mov	r0, r5
 8003444:	9700      	str	r7, [sp, #0]
 8003446:	aa0f      	add	r2, sp, #60	; 0x3c
 8003448:	f000 f9d4 	bl	80037f4 <_printf_common>
 800344c:	3001      	adds	r0, #1
 800344e:	f040 8090 	bne.w	8003572 <_printf_float+0x1d6>
 8003452:	f04f 30ff 	mov.w	r0, #4294967295
 8003456:	b011      	add	sp, #68	; 0x44
 8003458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800345c:	4642      	mov	r2, r8
 800345e:	4653      	mov	r3, sl
 8003460:	4640      	mov	r0, r8
 8003462:	4651      	mov	r1, sl
 8003464:	f7fd fad2 	bl	8000a0c <__aeabi_dcmpun>
 8003468:	b148      	cbz	r0, 800347e <_printf_float+0xe2>
 800346a:	f1ba 0f00 	cmp.w	sl, #0
 800346e:	bfb8      	it	lt
 8003470:	232d      	movlt	r3, #45	; 0x2d
 8003472:	4880      	ldr	r0, [pc, #512]	; (8003674 <_printf_float+0x2d8>)
 8003474:	bfb8      	it	lt
 8003476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800347a:	4b7f      	ldr	r3, [pc, #508]	; (8003678 <_printf_float+0x2dc>)
 800347c:	e7d3      	b.n	8003426 <_printf_float+0x8a>
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	d142      	bne.n	800350e <_printf_float+0x172>
 8003488:	2306      	movs	r3, #6
 800348a:	6063      	str	r3, [r4, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	9206      	str	r2, [sp, #24]
 8003490:	aa0e      	add	r2, sp, #56	; 0x38
 8003492:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003496:	aa0d      	add	r2, sp, #52	; 0x34
 8003498:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800349c:	9203      	str	r2, [sp, #12]
 800349e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80034a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034a6:	6023      	str	r3, [r4, #0]
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	4642      	mov	r2, r8
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4628      	mov	r0, r5
 80034b0:	4653      	mov	r3, sl
 80034b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80034b4:	f7ff fed4 	bl	8003260 <__cvt>
 80034b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034ba:	4680      	mov	r8, r0
 80034bc:	2947      	cmp	r1, #71	; 0x47
 80034be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034c0:	d108      	bne.n	80034d4 <_printf_float+0x138>
 80034c2:	1cc8      	adds	r0, r1, #3
 80034c4:	db02      	blt.n	80034cc <_printf_float+0x130>
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	4299      	cmp	r1, r3
 80034ca:	dd40      	ble.n	800354e <_printf_float+0x1b2>
 80034cc:	f1a9 0902 	sub.w	r9, r9, #2
 80034d0:	fa5f f989 	uxtb.w	r9, r9
 80034d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034d8:	d81f      	bhi.n	800351a <_printf_float+0x17e>
 80034da:	464a      	mov	r2, r9
 80034dc:	3901      	subs	r1, #1
 80034de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034e2:	910d      	str	r1, [sp, #52]	; 0x34
 80034e4:	f7ff ff1b 	bl	800331e <__exponent>
 80034e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034ea:	4682      	mov	sl, r0
 80034ec:	1813      	adds	r3, r2, r0
 80034ee:	2a01      	cmp	r2, #1
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	dc02      	bgt.n	80034fa <_printf_float+0x15e>
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	07d2      	lsls	r2, r2, #31
 80034f8:	d501      	bpl.n	80034fe <_printf_float+0x162>
 80034fa:	3301      	adds	r3, #1
 80034fc:	6123      	str	r3, [r4, #16]
 80034fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003502:	2b00      	cmp	r3, #0
 8003504:	d09b      	beq.n	800343e <_printf_float+0xa2>
 8003506:	232d      	movs	r3, #45	; 0x2d
 8003508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800350c:	e797      	b.n	800343e <_printf_float+0xa2>
 800350e:	2947      	cmp	r1, #71	; 0x47
 8003510:	d1bc      	bne.n	800348c <_printf_float+0xf0>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ba      	bne.n	800348c <_printf_float+0xf0>
 8003516:	2301      	movs	r3, #1
 8003518:	e7b7      	b.n	800348a <_printf_float+0xee>
 800351a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800351e:	d118      	bne.n	8003552 <_printf_float+0x1b6>
 8003520:	2900      	cmp	r1, #0
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	dd0b      	ble.n	800353e <_printf_float+0x1a2>
 8003526:	6121      	str	r1, [r4, #16]
 8003528:	b913      	cbnz	r3, 8003530 <_printf_float+0x194>
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	07d0      	lsls	r0, r2, #31
 800352e:	d502      	bpl.n	8003536 <_printf_float+0x19a>
 8003530:	3301      	adds	r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	6123      	str	r3, [r4, #16]
 8003536:	f04f 0a00 	mov.w	sl, #0
 800353a:	65a1      	str	r1, [r4, #88]	; 0x58
 800353c:	e7df      	b.n	80034fe <_printf_float+0x162>
 800353e:	b913      	cbnz	r3, 8003546 <_printf_float+0x1aa>
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	07d2      	lsls	r2, r2, #31
 8003544:	d501      	bpl.n	800354a <_printf_float+0x1ae>
 8003546:	3302      	adds	r3, #2
 8003548:	e7f4      	b.n	8003534 <_printf_float+0x198>
 800354a:	2301      	movs	r3, #1
 800354c:	e7f2      	b.n	8003534 <_printf_float+0x198>
 800354e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003554:	4299      	cmp	r1, r3
 8003556:	db05      	blt.n	8003564 <_printf_float+0x1c8>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	6121      	str	r1, [r4, #16]
 800355c:	07d8      	lsls	r0, r3, #31
 800355e:	d5ea      	bpl.n	8003536 <_printf_float+0x19a>
 8003560:	1c4b      	adds	r3, r1, #1
 8003562:	e7e7      	b.n	8003534 <_printf_float+0x198>
 8003564:	2900      	cmp	r1, #0
 8003566:	bfcc      	ite	gt
 8003568:	2201      	movgt	r2, #1
 800356a:	f1c1 0202 	rsble	r2, r1, #2
 800356e:	4413      	add	r3, r2
 8003570:	e7e0      	b.n	8003534 <_printf_float+0x198>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	055a      	lsls	r2, r3, #21
 8003576:	d407      	bmi.n	8003588 <_printf_float+0x1ec>
 8003578:	6923      	ldr	r3, [r4, #16]
 800357a:	4642      	mov	r2, r8
 800357c:	4631      	mov	r1, r6
 800357e:	4628      	mov	r0, r5
 8003580:	47b8      	blx	r7
 8003582:	3001      	adds	r0, #1
 8003584:	d12b      	bne.n	80035de <_printf_float+0x242>
 8003586:	e764      	b.n	8003452 <_printf_float+0xb6>
 8003588:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800358c:	f240 80dd 	bls.w	800374a <_printf_float+0x3ae>
 8003590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003594:	2200      	movs	r2, #0
 8003596:	2300      	movs	r3, #0
 8003598:	f7fd fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800359c:	2800      	cmp	r0, #0
 800359e:	d033      	beq.n	8003608 <_printf_float+0x26c>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	4a35      	ldr	r2, [pc, #212]	; (800367c <_printf_float+0x2e0>)
 80035a8:	47b8      	blx	r7
 80035aa:	3001      	adds	r0, #1
 80035ac:	f43f af51 	beq.w	8003452 <_printf_float+0xb6>
 80035b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b4:	429a      	cmp	r2, r3
 80035b6:	db02      	blt.n	80035be <_printf_float+0x222>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	07d8      	lsls	r0, r3, #31
 80035bc:	d50f      	bpl.n	80035de <_printf_float+0x242>
 80035be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035c2:	4631      	mov	r1, r6
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	f43f af42 	beq.w	8003452 <_printf_float+0xb6>
 80035ce:	f04f 0800 	mov.w	r8, #0
 80035d2:	f104 091a 	add.w	r9, r4, #26
 80035d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d8:	3b01      	subs	r3, #1
 80035da:	4543      	cmp	r3, r8
 80035dc:	dc09      	bgt.n	80035f2 <_printf_float+0x256>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	079b      	lsls	r3, r3, #30
 80035e2:	f100 8102 	bmi.w	80037ea <_printf_float+0x44e>
 80035e6:	68e0      	ldr	r0, [r4, #12]
 80035e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035ea:	4298      	cmp	r0, r3
 80035ec:	bfb8      	it	lt
 80035ee:	4618      	movlt	r0, r3
 80035f0:	e731      	b.n	8003456 <_printf_float+0xba>
 80035f2:	2301      	movs	r3, #1
 80035f4:	464a      	mov	r2, r9
 80035f6:	4631      	mov	r1, r6
 80035f8:	4628      	mov	r0, r5
 80035fa:	47b8      	blx	r7
 80035fc:	3001      	adds	r0, #1
 80035fe:	f43f af28 	beq.w	8003452 <_printf_float+0xb6>
 8003602:	f108 0801 	add.w	r8, r8, #1
 8003606:	e7e6      	b.n	80035d6 <_printf_float+0x23a>
 8003608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800360a:	2b00      	cmp	r3, #0
 800360c:	dc38      	bgt.n	8003680 <_printf_float+0x2e4>
 800360e:	2301      	movs	r3, #1
 8003610:	4631      	mov	r1, r6
 8003612:	4628      	mov	r0, r5
 8003614:	4a19      	ldr	r2, [pc, #100]	; (800367c <_printf_float+0x2e0>)
 8003616:	47b8      	blx	r7
 8003618:	3001      	adds	r0, #1
 800361a:	f43f af1a 	beq.w	8003452 <_printf_float+0xb6>
 800361e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003622:	4313      	orrs	r3, r2
 8003624:	d102      	bne.n	800362c <_printf_float+0x290>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	07d9      	lsls	r1, r3, #31
 800362a:	d5d8      	bpl.n	80035de <_printf_float+0x242>
 800362c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003630:	4631      	mov	r1, r6
 8003632:	4628      	mov	r0, r5
 8003634:	47b8      	blx	r7
 8003636:	3001      	adds	r0, #1
 8003638:	f43f af0b 	beq.w	8003452 <_printf_float+0xb6>
 800363c:	f04f 0900 	mov.w	r9, #0
 8003640:	f104 0a1a 	add.w	sl, r4, #26
 8003644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003646:	425b      	negs	r3, r3
 8003648:	454b      	cmp	r3, r9
 800364a:	dc01      	bgt.n	8003650 <_printf_float+0x2b4>
 800364c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364e:	e794      	b.n	800357a <_printf_float+0x1de>
 8003650:	2301      	movs	r3, #1
 8003652:	4652      	mov	r2, sl
 8003654:	4631      	mov	r1, r6
 8003656:	4628      	mov	r0, r5
 8003658:	47b8      	blx	r7
 800365a:	3001      	adds	r0, #1
 800365c:	f43f aef9 	beq.w	8003452 <_printf_float+0xb6>
 8003660:	f109 0901 	add.w	r9, r9, #1
 8003664:	e7ee      	b.n	8003644 <_printf_float+0x2a8>
 8003666:	bf00      	nop
 8003668:	7fefffff 	.word	0x7fefffff
 800366c:	08006008 	.word	0x08006008
 8003670:	0800600c 	.word	0x0800600c
 8003674:	08006014 	.word	0x08006014
 8003678:	08006010 	.word	0x08006010
 800367c:	08006018 	.word	0x08006018
 8003680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003684:	429a      	cmp	r2, r3
 8003686:	bfa8      	it	ge
 8003688:	461a      	movge	r2, r3
 800368a:	2a00      	cmp	r2, #0
 800368c:	4691      	mov	r9, r2
 800368e:	dc37      	bgt.n	8003700 <_printf_float+0x364>
 8003690:	f04f 0b00 	mov.w	fp, #0
 8003694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003698:	f104 021a 	add.w	r2, r4, #26
 800369c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80036a0:	ebaa 0309 	sub.w	r3, sl, r9
 80036a4:	455b      	cmp	r3, fp
 80036a6:	dc33      	bgt.n	8003710 <_printf_float+0x374>
 80036a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036ac:	429a      	cmp	r2, r3
 80036ae:	db3b      	blt.n	8003728 <_printf_float+0x38c>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	07da      	lsls	r2, r3, #31
 80036b4:	d438      	bmi.n	8003728 <_printf_float+0x38c>
 80036b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036ba:	eba2 030a 	sub.w	r3, r2, sl
 80036be:	eba2 0901 	sub.w	r9, r2, r1
 80036c2:	4599      	cmp	r9, r3
 80036c4:	bfa8      	it	ge
 80036c6:	4699      	movge	r9, r3
 80036c8:	f1b9 0f00 	cmp.w	r9, #0
 80036cc:	dc34      	bgt.n	8003738 <_printf_float+0x39c>
 80036ce:	f04f 0800 	mov.w	r8, #0
 80036d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036d6:	f104 0a1a 	add.w	sl, r4, #26
 80036da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	eba3 0309 	sub.w	r3, r3, r9
 80036e4:	4543      	cmp	r3, r8
 80036e6:	f77f af7a 	ble.w	80035de <_printf_float+0x242>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4652      	mov	r2, sl
 80036ee:	4631      	mov	r1, r6
 80036f0:	4628      	mov	r0, r5
 80036f2:	47b8      	blx	r7
 80036f4:	3001      	adds	r0, #1
 80036f6:	f43f aeac 	beq.w	8003452 <_printf_float+0xb6>
 80036fa:	f108 0801 	add.w	r8, r8, #1
 80036fe:	e7ec      	b.n	80036da <_printf_float+0x33e>
 8003700:	4613      	mov	r3, r2
 8003702:	4631      	mov	r1, r6
 8003704:	4642      	mov	r2, r8
 8003706:	4628      	mov	r0, r5
 8003708:	47b8      	blx	r7
 800370a:	3001      	adds	r0, #1
 800370c:	d1c0      	bne.n	8003690 <_printf_float+0x2f4>
 800370e:	e6a0      	b.n	8003452 <_printf_float+0xb6>
 8003710:	2301      	movs	r3, #1
 8003712:	4631      	mov	r1, r6
 8003714:	4628      	mov	r0, r5
 8003716:	920b      	str	r2, [sp, #44]	; 0x2c
 8003718:	47b8      	blx	r7
 800371a:	3001      	adds	r0, #1
 800371c:	f43f ae99 	beq.w	8003452 <_printf_float+0xb6>
 8003720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003722:	f10b 0b01 	add.w	fp, fp, #1
 8003726:	e7b9      	b.n	800369c <_printf_float+0x300>
 8003728:	4631      	mov	r1, r6
 800372a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	d1bf      	bne.n	80036b6 <_printf_float+0x31a>
 8003736:	e68c      	b.n	8003452 <_printf_float+0xb6>
 8003738:	464b      	mov	r3, r9
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	eb08 020a 	add.w	r2, r8, sl
 8003742:	47b8      	blx	r7
 8003744:	3001      	adds	r0, #1
 8003746:	d1c2      	bne.n	80036ce <_printf_float+0x332>
 8003748:	e683      	b.n	8003452 <_printf_float+0xb6>
 800374a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800374c:	2a01      	cmp	r2, #1
 800374e:	dc01      	bgt.n	8003754 <_printf_float+0x3b8>
 8003750:	07db      	lsls	r3, r3, #31
 8003752:	d537      	bpl.n	80037c4 <_printf_float+0x428>
 8003754:	2301      	movs	r3, #1
 8003756:	4642      	mov	r2, r8
 8003758:	4631      	mov	r1, r6
 800375a:	4628      	mov	r0, r5
 800375c:	47b8      	blx	r7
 800375e:	3001      	adds	r0, #1
 8003760:	f43f ae77 	beq.w	8003452 <_printf_float+0xb6>
 8003764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003768:	4631      	mov	r1, r6
 800376a:	4628      	mov	r0, r5
 800376c:	47b8      	blx	r7
 800376e:	3001      	adds	r0, #1
 8003770:	f43f ae6f 	beq.w	8003452 <_printf_float+0xb6>
 8003774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003778:	2200      	movs	r2, #0
 800377a:	2300      	movs	r3, #0
 800377c:	f7fd f914 	bl	80009a8 <__aeabi_dcmpeq>
 8003780:	b9d8      	cbnz	r0, 80037ba <_printf_float+0x41e>
 8003782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003784:	f108 0201 	add.w	r2, r8, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	4631      	mov	r1, r6
 800378c:	4628      	mov	r0, r5
 800378e:	47b8      	blx	r7
 8003790:	3001      	adds	r0, #1
 8003792:	d10e      	bne.n	80037b2 <_printf_float+0x416>
 8003794:	e65d      	b.n	8003452 <_printf_float+0xb6>
 8003796:	2301      	movs	r3, #1
 8003798:	464a      	mov	r2, r9
 800379a:	4631      	mov	r1, r6
 800379c:	4628      	mov	r0, r5
 800379e:	47b8      	blx	r7
 80037a0:	3001      	adds	r0, #1
 80037a2:	f43f ae56 	beq.w	8003452 <_printf_float+0xb6>
 80037a6:	f108 0801 	add.w	r8, r8, #1
 80037aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037ac:	3b01      	subs	r3, #1
 80037ae:	4543      	cmp	r3, r8
 80037b0:	dcf1      	bgt.n	8003796 <_printf_float+0x3fa>
 80037b2:	4653      	mov	r3, sl
 80037b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037b8:	e6e0      	b.n	800357c <_printf_float+0x1e0>
 80037ba:	f04f 0800 	mov.w	r8, #0
 80037be:	f104 091a 	add.w	r9, r4, #26
 80037c2:	e7f2      	b.n	80037aa <_printf_float+0x40e>
 80037c4:	2301      	movs	r3, #1
 80037c6:	4642      	mov	r2, r8
 80037c8:	e7df      	b.n	800378a <_printf_float+0x3ee>
 80037ca:	2301      	movs	r3, #1
 80037cc:	464a      	mov	r2, r9
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b8      	blx	r7
 80037d4:	3001      	adds	r0, #1
 80037d6:	f43f ae3c 	beq.w	8003452 <_printf_float+0xb6>
 80037da:	f108 0801 	add.w	r8, r8, #1
 80037de:	68e3      	ldr	r3, [r4, #12]
 80037e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80037e2:	1a5b      	subs	r3, r3, r1
 80037e4:	4543      	cmp	r3, r8
 80037e6:	dcf0      	bgt.n	80037ca <_printf_float+0x42e>
 80037e8:	e6fd      	b.n	80035e6 <_printf_float+0x24a>
 80037ea:	f04f 0800 	mov.w	r8, #0
 80037ee:	f104 0919 	add.w	r9, r4, #25
 80037f2:	e7f4      	b.n	80037de <_printf_float+0x442>

080037f4 <_printf_common>:
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	4616      	mov	r6, r2
 80037fa:	4699      	mov	r9, r3
 80037fc:	688a      	ldr	r2, [r1, #8]
 80037fe:	690b      	ldr	r3, [r1, #16]
 8003800:	4607      	mov	r7, r0
 8003802:	4293      	cmp	r3, r2
 8003804:	bfb8      	it	lt
 8003806:	4613      	movlt	r3, r2
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800380e:	460c      	mov	r4, r1
 8003810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003814:	b10a      	cbz	r2, 800381a <_printf_common+0x26>
 8003816:	3301      	adds	r3, #1
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	0699      	lsls	r1, r3, #26
 800381e:	bf42      	ittt	mi
 8003820:	6833      	ldrmi	r3, [r6, #0]
 8003822:	3302      	addmi	r3, #2
 8003824:	6033      	strmi	r3, [r6, #0]
 8003826:	6825      	ldr	r5, [r4, #0]
 8003828:	f015 0506 	ands.w	r5, r5, #6
 800382c:	d106      	bne.n	800383c <_printf_common+0x48>
 800382e:	f104 0a19 	add.w	sl, r4, #25
 8003832:	68e3      	ldr	r3, [r4, #12]
 8003834:	6832      	ldr	r2, [r6, #0]
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	42ab      	cmp	r3, r5
 800383a:	dc28      	bgt.n	800388e <_printf_common+0x9a>
 800383c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003840:	1e13      	subs	r3, r2, #0
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	bf18      	it	ne
 8003846:	2301      	movne	r3, #1
 8003848:	0692      	lsls	r2, r2, #26
 800384a:	d42d      	bmi.n	80038a8 <_printf_common+0xb4>
 800384c:	4649      	mov	r1, r9
 800384e:	4638      	mov	r0, r7
 8003850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003854:	47c0      	blx	r8
 8003856:	3001      	adds	r0, #1
 8003858:	d020      	beq.n	800389c <_printf_common+0xa8>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	68e5      	ldr	r5, [r4, #12]
 800385e:	f003 0306 	and.w	r3, r3, #6
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf18      	it	ne
 8003866:	2500      	movne	r5, #0
 8003868:	6832      	ldr	r2, [r6, #0]
 800386a:	f04f 0600 	mov.w	r6, #0
 800386e:	68a3      	ldr	r3, [r4, #8]
 8003870:	bf08      	it	eq
 8003872:	1aad      	subeq	r5, r5, r2
 8003874:	6922      	ldr	r2, [r4, #16]
 8003876:	bf08      	it	eq
 8003878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800387c:	4293      	cmp	r3, r2
 800387e:	bfc4      	itt	gt
 8003880:	1a9b      	subgt	r3, r3, r2
 8003882:	18ed      	addgt	r5, r5, r3
 8003884:	341a      	adds	r4, #26
 8003886:	42b5      	cmp	r5, r6
 8003888:	d11a      	bne.n	80038c0 <_printf_common+0xcc>
 800388a:	2000      	movs	r0, #0
 800388c:	e008      	b.n	80038a0 <_printf_common+0xac>
 800388e:	2301      	movs	r3, #1
 8003890:	4652      	mov	r2, sl
 8003892:	4649      	mov	r1, r9
 8003894:	4638      	mov	r0, r7
 8003896:	47c0      	blx	r8
 8003898:	3001      	adds	r0, #1
 800389a:	d103      	bne.n	80038a4 <_printf_common+0xb0>
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	3501      	adds	r5, #1
 80038a6:	e7c4      	b.n	8003832 <_printf_common+0x3e>
 80038a8:	2030      	movs	r0, #48	; 0x30
 80038aa:	18e1      	adds	r1, r4, r3
 80038ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038b6:	4422      	add	r2, r4
 80038b8:	3302      	adds	r3, #2
 80038ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038be:	e7c5      	b.n	800384c <_printf_common+0x58>
 80038c0:	2301      	movs	r3, #1
 80038c2:	4622      	mov	r2, r4
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	47c0      	blx	r8
 80038ca:	3001      	adds	r0, #1
 80038cc:	d0e6      	beq.n	800389c <_printf_common+0xa8>
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7d9      	b.n	8003886 <_printf_common+0x92>
	...

080038d4 <_printf_i>:
 80038d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038d8:	460c      	mov	r4, r1
 80038da:	7e27      	ldrb	r7, [r4, #24]
 80038dc:	4691      	mov	r9, r2
 80038de:	2f78      	cmp	r7, #120	; 0x78
 80038e0:	4680      	mov	r8, r0
 80038e2:	469a      	mov	sl, r3
 80038e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ea:	d807      	bhi.n	80038fc <_printf_i+0x28>
 80038ec:	2f62      	cmp	r7, #98	; 0x62
 80038ee:	d80a      	bhi.n	8003906 <_printf_i+0x32>
 80038f0:	2f00      	cmp	r7, #0
 80038f2:	f000 80d9 	beq.w	8003aa8 <_printf_i+0x1d4>
 80038f6:	2f58      	cmp	r7, #88	; 0x58
 80038f8:	f000 80a4 	beq.w	8003a44 <_printf_i+0x170>
 80038fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003904:	e03a      	b.n	800397c <_printf_i+0xa8>
 8003906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800390a:	2b15      	cmp	r3, #21
 800390c:	d8f6      	bhi.n	80038fc <_printf_i+0x28>
 800390e:	a001      	add	r0, pc, #4	; (adr r0, 8003914 <_printf_i+0x40>)
 8003910:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003914:	0800396d 	.word	0x0800396d
 8003918:	08003981 	.word	0x08003981
 800391c:	080038fd 	.word	0x080038fd
 8003920:	080038fd 	.word	0x080038fd
 8003924:	080038fd 	.word	0x080038fd
 8003928:	080038fd 	.word	0x080038fd
 800392c:	08003981 	.word	0x08003981
 8003930:	080038fd 	.word	0x080038fd
 8003934:	080038fd 	.word	0x080038fd
 8003938:	080038fd 	.word	0x080038fd
 800393c:	080038fd 	.word	0x080038fd
 8003940:	08003a8f 	.word	0x08003a8f
 8003944:	080039b1 	.word	0x080039b1
 8003948:	08003a71 	.word	0x08003a71
 800394c:	080038fd 	.word	0x080038fd
 8003950:	080038fd 	.word	0x080038fd
 8003954:	08003ab1 	.word	0x08003ab1
 8003958:	080038fd 	.word	0x080038fd
 800395c:	080039b1 	.word	0x080039b1
 8003960:	080038fd 	.word	0x080038fd
 8003964:	080038fd 	.word	0x080038fd
 8003968:	08003a79 	.word	0x08003a79
 800396c:	680b      	ldr	r3, [r1, #0]
 800396e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003972:	1d1a      	adds	r2, r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	600a      	str	r2, [r1, #0]
 8003978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800397c:	2301      	movs	r3, #1
 800397e:	e0a4      	b.n	8003aca <_printf_i+0x1f6>
 8003980:	6825      	ldr	r5, [r4, #0]
 8003982:	6808      	ldr	r0, [r1, #0]
 8003984:	062e      	lsls	r6, r5, #24
 8003986:	f100 0304 	add.w	r3, r0, #4
 800398a:	d50a      	bpl.n	80039a2 <_printf_i+0xce>
 800398c:	6805      	ldr	r5, [r0, #0]
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	2d00      	cmp	r5, #0
 8003992:	da03      	bge.n	800399c <_printf_i+0xc8>
 8003994:	232d      	movs	r3, #45	; 0x2d
 8003996:	426d      	negs	r5, r5
 8003998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800399c:	230a      	movs	r3, #10
 800399e:	485e      	ldr	r0, [pc, #376]	; (8003b18 <_printf_i+0x244>)
 80039a0:	e019      	b.n	80039d6 <_printf_i+0x102>
 80039a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039a6:	6805      	ldr	r5, [r0, #0]
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	bf18      	it	ne
 80039ac:	b22d      	sxthne	r5, r5
 80039ae:	e7ef      	b.n	8003990 <_printf_i+0xbc>
 80039b0:	680b      	ldr	r3, [r1, #0]
 80039b2:	6825      	ldr	r5, [r4, #0]
 80039b4:	1d18      	adds	r0, r3, #4
 80039b6:	6008      	str	r0, [r1, #0]
 80039b8:	0628      	lsls	r0, r5, #24
 80039ba:	d501      	bpl.n	80039c0 <_printf_i+0xec>
 80039bc:	681d      	ldr	r5, [r3, #0]
 80039be:	e002      	b.n	80039c6 <_printf_i+0xf2>
 80039c0:	0669      	lsls	r1, r5, #25
 80039c2:	d5fb      	bpl.n	80039bc <_printf_i+0xe8>
 80039c4:	881d      	ldrh	r5, [r3, #0]
 80039c6:	2f6f      	cmp	r7, #111	; 0x6f
 80039c8:	bf0c      	ite	eq
 80039ca:	2308      	moveq	r3, #8
 80039cc:	230a      	movne	r3, #10
 80039ce:	4852      	ldr	r0, [pc, #328]	; (8003b18 <_printf_i+0x244>)
 80039d0:	2100      	movs	r1, #0
 80039d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039d6:	6866      	ldr	r6, [r4, #4]
 80039d8:	2e00      	cmp	r6, #0
 80039da:	bfa8      	it	ge
 80039dc:	6821      	ldrge	r1, [r4, #0]
 80039de:	60a6      	str	r6, [r4, #8]
 80039e0:	bfa4      	itt	ge
 80039e2:	f021 0104 	bicge.w	r1, r1, #4
 80039e6:	6021      	strge	r1, [r4, #0]
 80039e8:	b90d      	cbnz	r5, 80039ee <_printf_i+0x11a>
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d04d      	beq.n	8003a8a <_printf_i+0x1b6>
 80039ee:	4616      	mov	r6, r2
 80039f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80039f4:	fb03 5711 	mls	r7, r3, r1, r5
 80039f8:	5dc7      	ldrb	r7, [r0, r7]
 80039fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039fe:	462f      	mov	r7, r5
 8003a00:	42bb      	cmp	r3, r7
 8003a02:	460d      	mov	r5, r1
 8003a04:	d9f4      	bls.n	80039f0 <_printf_i+0x11c>
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d10b      	bne.n	8003a22 <_printf_i+0x14e>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	07df      	lsls	r7, r3, #31
 8003a0e:	d508      	bpl.n	8003a22 <_printf_i+0x14e>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	6861      	ldr	r1, [r4, #4]
 8003a14:	4299      	cmp	r1, r3
 8003a16:	bfde      	ittt	le
 8003a18:	2330      	movle	r3, #48	; 0x30
 8003a1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a22:	1b92      	subs	r2, r2, r6
 8003a24:	6122      	str	r2, [r4, #16]
 8003a26:	464b      	mov	r3, r9
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f8cd a000 	str.w	sl, [sp]
 8003a30:	aa03      	add	r2, sp, #12
 8003a32:	f7ff fedf 	bl	80037f4 <_printf_common>
 8003a36:	3001      	adds	r0, #1
 8003a38:	d14c      	bne.n	8003ad4 <_printf_i+0x200>
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3e:	b004      	add	sp, #16
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a44:	4834      	ldr	r0, [pc, #208]	; (8003b18 <_printf_i+0x244>)
 8003a46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a4a:	680e      	ldr	r6, [r1, #0]
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a52:	061f      	lsls	r7, r3, #24
 8003a54:	600e      	str	r6, [r1, #0]
 8003a56:	d514      	bpl.n	8003a82 <_printf_i+0x1ae>
 8003a58:	07d9      	lsls	r1, r3, #31
 8003a5a:	bf44      	itt	mi
 8003a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a60:	6023      	strmi	r3, [r4, #0]
 8003a62:	b91d      	cbnz	r5, 8003a6c <_printf_i+0x198>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	f023 0320 	bic.w	r3, r3, #32
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	e7af      	b.n	80039d0 <_printf_i+0xfc>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f043 0320 	orr.w	r3, r3, #32
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	2378      	movs	r3, #120	; 0x78
 8003a7a:	4828      	ldr	r0, [pc, #160]	; (8003b1c <_printf_i+0x248>)
 8003a7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a80:	e7e3      	b.n	8003a4a <_printf_i+0x176>
 8003a82:	065e      	lsls	r6, r3, #25
 8003a84:	bf48      	it	mi
 8003a86:	b2ad      	uxthmi	r5, r5
 8003a88:	e7e6      	b.n	8003a58 <_printf_i+0x184>
 8003a8a:	4616      	mov	r6, r2
 8003a8c:	e7bb      	b.n	8003a06 <_printf_i+0x132>
 8003a8e:	680b      	ldr	r3, [r1, #0]
 8003a90:	6826      	ldr	r6, [r4, #0]
 8003a92:	1d1d      	adds	r5, r3, #4
 8003a94:	6960      	ldr	r0, [r4, #20]
 8003a96:	600d      	str	r5, [r1, #0]
 8003a98:	0635      	lsls	r5, r6, #24
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	d501      	bpl.n	8003aa2 <_printf_i+0x1ce>
 8003a9e:	6018      	str	r0, [r3, #0]
 8003aa0:	e002      	b.n	8003aa8 <_printf_i+0x1d4>
 8003aa2:	0671      	lsls	r1, r6, #25
 8003aa4:	d5fb      	bpl.n	8003a9e <_printf_i+0x1ca>
 8003aa6:	8018      	strh	r0, [r3, #0]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4616      	mov	r6, r2
 8003aac:	6123      	str	r3, [r4, #16]
 8003aae:	e7ba      	b.n	8003a26 <_printf_i+0x152>
 8003ab0:	680b      	ldr	r3, [r1, #0]
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	600a      	str	r2, [r1, #0]
 8003ab6:	681e      	ldr	r6, [r3, #0]
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4630      	mov	r0, r6
 8003abc:	6862      	ldr	r2, [r4, #4]
 8003abe:	f000 fed9 	bl	8004874 <memchr>
 8003ac2:	b108      	cbz	r0, 8003ac8 <_printf_i+0x1f4>
 8003ac4:	1b80      	subs	r0, r0, r6
 8003ac6:	6060      	str	r0, [r4, #4]
 8003ac8:	6863      	ldr	r3, [r4, #4]
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	2300      	movs	r3, #0
 8003ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad2:	e7a8      	b.n	8003a26 <_printf_i+0x152>
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	4640      	mov	r0, r8
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	47d0      	blx	sl
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d0ab      	beq.n	8003a3a <_printf_i+0x166>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	079b      	lsls	r3, r3, #30
 8003ae6:	d413      	bmi.n	8003b10 <_printf_i+0x23c>
 8003ae8:	68e0      	ldr	r0, [r4, #12]
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	4298      	cmp	r0, r3
 8003aee:	bfb8      	it	lt
 8003af0:	4618      	movlt	r0, r3
 8003af2:	e7a4      	b.n	8003a3e <_printf_i+0x16a>
 8003af4:	2301      	movs	r3, #1
 8003af6:	4632      	mov	r2, r6
 8003af8:	4649      	mov	r1, r9
 8003afa:	4640      	mov	r0, r8
 8003afc:	47d0      	blx	sl
 8003afe:	3001      	adds	r0, #1
 8003b00:	d09b      	beq.n	8003a3a <_printf_i+0x166>
 8003b02:	3501      	adds	r5, #1
 8003b04:	68e3      	ldr	r3, [r4, #12]
 8003b06:	9903      	ldr	r1, [sp, #12]
 8003b08:	1a5b      	subs	r3, r3, r1
 8003b0a:	42ab      	cmp	r3, r5
 8003b0c:	dcf2      	bgt.n	8003af4 <_printf_i+0x220>
 8003b0e:	e7eb      	b.n	8003ae8 <_printf_i+0x214>
 8003b10:	2500      	movs	r5, #0
 8003b12:	f104 0619 	add.w	r6, r4, #25
 8003b16:	e7f5      	b.n	8003b04 <_printf_i+0x230>
 8003b18:	0800601a 	.word	0x0800601a
 8003b1c:	0800602b 	.word	0x0800602b

08003b20 <siprintf>:
 8003b20:	b40e      	push	{r1, r2, r3}
 8003b22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b26:	b500      	push	{lr}
 8003b28:	b09c      	sub	sp, #112	; 0x70
 8003b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b2c:	9002      	str	r0, [sp, #8]
 8003b2e:	9006      	str	r0, [sp, #24]
 8003b30:	9107      	str	r1, [sp, #28]
 8003b32:	9104      	str	r1, [sp, #16]
 8003b34:	4808      	ldr	r0, [pc, #32]	; (8003b58 <siprintf+0x38>)
 8003b36:	4909      	ldr	r1, [pc, #36]	; (8003b5c <siprintf+0x3c>)
 8003b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b3c:	9105      	str	r1, [sp, #20]
 8003b3e:	6800      	ldr	r0, [r0, #0]
 8003b40:	a902      	add	r1, sp, #8
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	f001 fb44 	bl	80051d0 <_svfiprintf_r>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	9b02      	ldr	r3, [sp, #8]
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	b01c      	add	sp, #112	; 0x70
 8003b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b54:	b003      	add	sp, #12
 8003b56:	4770      	bx	lr
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	ffff0208 	.word	0xffff0208

08003b60 <quorem>:
 8003b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	6903      	ldr	r3, [r0, #16]
 8003b66:	690c      	ldr	r4, [r1, #16]
 8003b68:	4607      	mov	r7, r0
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	f2c0 8083 	blt.w	8003c76 <quorem+0x116>
 8003b70:	3c01      	subs	r4, #1
 8003b72:	f100 0514 	add.w	r5, r0, #20
 8003b76:	f101 0814 	add.w	r8, r1, #20
 8003b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b98:	d332      	bcc.n	8003c00 <quorem+0xa0>
 8003b9a:	f04f 0e00 	mov.w	lr, #0
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	46ac      	mov	ip, r5
 8003ba2:	46f2      	mov	sl, lr
 8003ba4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ba8:	b293      	uxth	r3, r2
 8003baa:	fb06 e303 	mla	r3, r6, r3, lr
 8003bae:	0c12      	lsrs	r2, r2, #16
 8003bb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bb4:	fb06 e202 	mla	r2, r6, r2, lr
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	ebaa 0303 	sub.w	r3, sl, r3
 8003bbe:	f8dc a000 	ldr.w	sl, [ip]
 8003bc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bc6:	fa1f fa8a 	uxth.w	sl, sl
 8003bca:	4453      	add	r3, sl
 8003bcc:	fa1f fa82 	uxth.w	sl, r2
 8003bd0:	f8dc 2000 	ldr.w	r2, [ip]
 8003bd4:	4581      	cmp	r9, r0
 8003bd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003be4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003be8:	f84c 3b04 	str.w	r3, [ip], #4
 8003bec:	d2da      	bcs.n	8003ba4 <quorem+0x44>
 8003bee:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bf2:	b92b      	cbnz	r3, 8003c00 <quorem+0xa0>
 8003bf4:	9b01      	ldr	r3, [sp, #4]
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	429d      	cmp	r5, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	d32f      	bcc.n	8003c5e <quorem+0xfe>
 8003bfe:	613c      	str	r4, [r7, #16]
 8003c00:	4638      	mov	r0, r7
 8003c02:	f001 f8cd 	bl	8004da0 <__mcmp>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	db25      	blt.n	8003c56 <quorem+0xf6>
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f04f 0c00 	mov.w	ip, #0
 8003c10:	3601      	adds	r6, #1
 8003c12:	f858 1b04 	ldr.w	r1, [r8], #4
 8003c16:	f8d0 e000 	ldr.w	lr, [r0]
 8003c1a:	b28b      	uxth	r3, r1
 8003c1c:	ebac 0303 	sub.w	r3, ip, r3
 8003c20:	fa1f f28e 	uxth.w	r2, lr
 8003c24:	4413      	add	r3, r2
 8003c26:	0c0a      	lsrs	r2, r1, #16
 8003c28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c36:	45c1      	cmp	r9, r8
 8003c38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c3c:	f840 3b04 	str.w	r3, [r0], #4
 8003c40:	d2e7      	bcs.n	8003c12 <quorem+0xb2>
 8003c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c4a:	b922      	cbnz	r2, 8003c56 <quorem+0xf6>
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	429d      	cmp	r5, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	d30a      	bcc.n	8003c6a <quorem+0x10a>
 8003c54:	613c      	str	r4, [r7, #16]
 8003c56:	4630      	mov	r0, r6
 8003c58:	b003      	add	sp, #12
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	3b04      	subs	r3, #4
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	d1cb      	bne.n	8003bfe <quorem+0x9e>
 8003c66:	3c01      	subs	r4, #1
 8003c68:	e7c6      	b.n	8003bf8 <quorem+0x98>
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d1f0      	bne.n	8003c54 <quorem+0xf4>
 8003c72:	3c01      	subs	r4, #1
 8003c74:	e7eb      	b.n	8003c4e <quorem+0xee>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e7ee      	b.n	8003c58 <quorem+0xf8>
 8003c7a:	0000      	movs	r0, r0
 8003c7c:	0000      	movs	r0, r0
	...

08003c80 <_dtoa_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	4616      	mov	r6, r2
 8003c86:	461f      	mov	r7, r3
 8003c88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c8a:	b099      	sub	sp, #100	; 0x64
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003c96:	b974      	cbnz	r4, 8003cb6 <_dtoa_r+0x36>
 8003c98:	2010      	movs	r0, #16
 8003c9a:	f000 fde3 	bl	8004864 <malloc>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6268      	str	r0, [r5, #36]	; 0x24
 8003ca2:	b920      	cbnz	r0, 8003cae <_dtoa_r+0x2e>
 8003ca4:	21ea      	movs	r1, #234	; 0xea
 8003ca6:	4bae      	ldr	r3, [pc, #696]	; (8003f60 <_dtoa_r+0x2e0>)
 8003ca8:	48ae      	ldr	r0, [pc, #696]	; (8003f64 <_dtoa_r+0x2e4>)
 8003caa:	f001 fba1 	bl	80053f0 <__assert_func>
 8003cae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cb2:	6004      	str	r4, [r0, #0]
 8003cb4:	60c4      	str	r4, [r0, #12]
 8003cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	b151      	cbz	r1, 8003cd2 <_dtoa_r+0x52>
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4093      	lsls	r3, r2
 8003cc2:	604a      	str	r2, [r1, #4]
 8003cc4:	608b      	str	r3, [r1, #8]
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 fe30 	bl	800492c <_Bfree>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	1e3b      	subs	r3, r7, #0
 8003cd4:	bfaf      	iteee	ge
 8003cd6:	2300      	movge	r3, #0
 8003cd8:	2201      	movlt	r2, #1
 8003cda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cde:	9305      	strlt	r3, [sp, #20]
 8003ce0:	bfa8      	it	ge
 8003ce2:	f8c8 3000 	strge.w	r3, [r8]
 8003ce6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003cea:	4b9f      	ldr	r3, [pc, #636]	; (8003f68 <_dtoa_r+0x2e8>)
 8003cec:	bfb8      	it	lt
 8003cee:	f8c8 2000 	strlt.w	r2, [r8]
 8003cf2:	ea33 0309 	bics.w	r3, r3, r9
 8003cf6:	d119      	bne.n	8003d2c <_dtoa_r+0xac>
 8003cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d04:	4333      	orrs	r3, r6
 8003d06:	f000 8580 	beq.w	800480a <_dtoa_r+0xb8a>
 8003d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d0c:	b953      	cbnz	r3, 8003d24 <_dtoa_r+0xa4>
 8003d0e:	4b97      	ldr	r3, [pc, #604]	; (8003f6c <_dtoa_r+0x2ec>)
 8003d10:	e022      	b.n	8003d58 <_dtoa_r+0xd8>
 8003d12:	4b97      	ldr	r3, [pc, #604]	; (8003f70 <_dtoa_r+0x2f0>)
 8003d14:	9308      	str	r3, [sp, #32]
 8003d16:	3308      	adds	r3, #8
 8003d18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	9808      	ldr	r0, [sp, #32]
 8003d1e:	b019      	add	sp, #100	; 0x64
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <_dtoa_r+0x2ec>)
 8003d26:	9308      	str	r3, [sp, #32]
 8003d28:	3303      	adds	r3, #3
 8003d2a:	e7f5      	b.n	8003d18 <_dtoa_r+0x98>
 8003d2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f7fc fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8003d40:	4680      	mov	r8, r0
 8003d42:	b158      	cbz	r0, 8003d5c <_dtoa_r+0xdc>
 8003d44:	2301      	movs	r3, #1
 8003d46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8559 	beq.w	8004804 <_dtoa_r+0xb84>
 8003d52:	4888      	ldr	r0, [pc, #544]	; (8003f74 <_dtoa_r+0x2f4>)
 8003d54:	6018      	str	r0, [r3, #0]
 8003d56:	1e43      	subs	r3, r0, #1
 8003d58:	9308      	str	r3, [sp, #32]
 8003d5a:	e7df      	b.n	8003d1c <_dtoa_r+0x9c>
 8003d5c:	ab16      	add	r3, sp, #88	; 0x58
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	ab17      	add	r3, sp, #92	; 0x5c
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4628      	mov	r0, r5
 8003d66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d6a:	f001 f8c5 	bl	8004ef8 <__d2b>
 8003d6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d72:	4682      	mov	sl, r0
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	d07e      	beq.n	8003e76 <_dtoa_r+0x1f6>
 8003d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003d92:	2200      	movs	r2, #0
 8003d94:	4b78      	ldr	r3, [pc, #480]	; (8003f78 <_dtoa_r+0x2f8>)
 8003d96:	f7fc f9e7 	bl	8000168 <__aeabi_dsub>
 8003d9a:	a36b      	add	r3, pc, #428	; (adr r3, 8003f48 <_dtoa_r+0x2c8>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f7fc fb9a 	bl	80004d8 <__aeabi_dmul>
 8003da4:	a36a      	add	r3, pc, #424	; (adr r3, 8003f50 <_dtoa_r+0x2d0>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc f9df 	bl	800016c <__adddf3>
 8003dae:	4606      	mov	r6, r0
 8003db0:	4620      	mov	r0, r4
 8003db2:	460f      	mov	r7, r1
 8003db4:	f7fc fb26 	bl	8000404 <__aeabi_i2d>
 8003db8:	a367      	add	r3, pc, #412	; (adr r3, 8003f58 <_dtoa_r+0x2d8>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fb8b 	bl	80004d8 <__aeabi_dmul>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	4639      	mov	r1, r7
 8003dca:	f7fc f9cf 	bl	800016c <__adddf3>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	460f      	mov	r7, r1
 8003dd2:	f7fc fe31 	bl	8000a38 <__aeabi_d2iz>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4681      	mov	r9, r0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4639      	mov	r1, r7
 8003de0:	f7fc fdec 	bl	80009bc <__aeabi_dcmplt>
 8003de4:	b148      	cbz	r0, 8003dfa <_dtoa_r+0x17a>
 8003de6:	4648      	mov	r0, r9
 8003de8:	f7fc fb0c 	bl	8000404 <__aeabi_i2d>
 8003dec:	4632      	mov	r2, r6
 8003dee:	463b      	mov	r3, r7
 8003df0:	f7fc fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8003df4:	b908      	cbnz	r0, 8003dfa <_dtoa_r+0x17a>
 8003df6:	f109 39ff 	add.w	r9, r9, #4294967295
 8003dfa:	f1b9 0f16 	cmp.w	r9, #22
 8003dfe:	d857      	bhi.n	8003eb0 <_dtoa_r+0x230>
 8003e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e04:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <_dtoa_r+0x2fc>)
 8003e06:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fdd5 	bl	80009bc <__aeabi_dcmplt>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d04e      	beq.n	8003eb4 <_dtoa_r+0x234>
 8003e16:	2300      	movs	r3, #0
 8003e18:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e20:	1b1c      	subs	r4, r3, r4
 8003e22:	1e63      	subs	r3, r4, #1
 8003e24:	9309      	str	r3, [sp, #36]	; 0x24
 8003e26:	bf49      	itett	mi
 8003e28:	f1c4 0301 	rsbmi	r3, r4, #1
 8003e2c:	2300      	movpl	r3, #0
 8003e2e:	9306      	strmi	r3, [sp, #24]
 8003e30:	2300      	movmi	r3, #0
 8003e32:	bf54      	ite	pl
 8003e34:	9306      	strpl	r3, [sp, #24]
 8003e36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e38:	f1b9 0f00 	cmp.w	r9, #0
 8003e3c:	db3c      	blt.n	8003eb8 <_dtoa_r+0x238>
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003e44:	444b      	add	r3, r9
 8003e46:	9309      	str	r3, [sp, #36]	; 0x24
 8003e48:	2300      	movs	r3, #0
 8003e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8003e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e4e:	2b09      	cmp	r3, #9
 8003e50:	d86c      	bhi.n	8003f2c <_dtoa_r+0x2ac>
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	bfc4      	itt	gt
 8003e56:	3b04      	subgt	r3, #4
 8003e58:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e5c:	bfc8      	it	gt
 8003e5e:	2400      	movgt	r4, #0
 8003e60:	f1a3 0302 	sub.w	r3, r3, #2
 8003e64:	bfd8      	it	le
 8003e66:	2401      	movle	r4, #1
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	f200 808b 	bhi.w	8003f84 <_dtoa_r+0x304>
 8003e6e:	e8df f003 	tbb	[pc, r3]
 8003e72:	4f2d      	.short	0x4f2d
 8003e74:	5b4d      	.short	0x5b4d
 8003e76:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e7a:	441c      	add	r4, r3
 8003e7c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	bfc3      	ittte	gt
 8003e84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e88:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003e8c:	fa09 f303 	lslgt.w	r3, r9, r3
 8003e90:	f1c3 0320 	rsble	r3, r3, #32
 8003e94:	bfc6      	itte	gt
 8003e96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003e9a:	4318      	orrgt	r0, r3
 8003e9c:	fa06 f003 	lslle.w	r0, r6, r3
 8003ea0:	f7fc faa0 	bl	80003e4 <__aeabi_ui2d>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003eaa:	3c01      	subs	r4, #1
 8003eac:	9313      	str	r3, [sp, #76]	; 0x4c
 8003eae:	e770      	b.n	8003d92 <_dtoa_r+0x112>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e7b3      	b.n	8003e1c <_dtoa_r+0x19c>
 8003eb4:	900f      	str	r0, [sp, #60]	; 0x3c
 8003eb6:	e7b2      	b.n	8003e1e <_dtoa_r+0x19e>
 8003eb8:	9b06      	ldr	r3, [sp, #24]
 8003eba:	eba3 0309 	sub.w	r3, r3, r9
 8003ebe:	9306      	str	r3, [sp, #24]
 8003ec0:	f1c9 0300 	rsb	r3, r9, #0
 8003ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	930e      	str	r3, [sp, #56]	; 0x38
 8003eca:	e7bf      	b.n	8003e4c <_dtoa_r+0x1cc>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	dc59      	bgt.n	8003f8a <_dtoa_r+0x30a>
 8003ed6:	f04f 0b01 	mov.w	fp, #1
 8003eda:	465b      	mov	r3, fp
 8003edc:	f8cd b008 	str.w	fp, [sp, #8]
 8003ee0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003ee8:	6042      	str	r2, [r0, #4]
 8003eea:	2204      	movs	r2, #4
 8003eec:	f102 0614 	add.w	r6, r2, #20
 8003ef0:	429e      	cmp	r6, r3
 8003ef2:	6841      	ldr	r1, [r0, #4]
 8003ef4:	d94f      	bls.n	8003f96 <_dtoa_r+0x316>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 fcd8 	bl	80048ac <_Balloc>
 8003efc:	9008      	str	r0, [sp, #32]
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d14d      	bne.n	8003f9e <_dtoa_r+0x31e>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <_dtoa_r+0x300>)
 8003f0a:	e6cd      	b.n	8003ca8 <_dtoa_r+0x28>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e7de      	b.n	8003ece <_dtoa_r+0x24e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f16:	eb09 0b03 	add.w	fp, r9, r3
 8003f1a:	f10b 0301 	add.w	r3, fp, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	9302      	str	r3, [sp, #8]
 8003f22:	bfb8      	it	lt
 8003f24:	2301      	movlt	r3, #1
 8003f26:	e7dd      	b.n	8003ee4 <_dtoa_r+0x264>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e7f2      	b.n	8003f12 <_dtoa_r+0x292>
 8003f2c:	2401      	movs	r4, #1
 8003f2e:	2300      	movs	r3, #0
 8003f30:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f32:	9322      	str	r3, [sp, #136]	; 0x88
 8003f34:	f04f 3bff 	mov.w	fp, #4294967295
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2312      	movs	r3, #18
 8003f3c:	f8cd b008 	str.w	fp, [sp, #8]
 8003f40:	9223      	str	r2, [sp, #140]	; 0x8c
 8003f42:	e7cf      	b.n	8003ee4 <_dtoa_r+0x264>
 8003f44:	f3af 8000 	nop.w
 8003f48:	636f4361 	.word	0x636f4361
 8003f4c:	3fd287a7 	.word	0x3fd287a7
 8003f50:	8b60c8b3 	.word	0x8b60c8b3
 8003f54:	3fc68a28 	.word	0x3fc68a28
 8003f58:	509f79fb 	.word	0x509f79fb
 8003f5c:	3fd34413 	.word	0x3fd34413
 8003f60:	08006049 	.word	0x08006049
 8003f64:	08006060 	.word	0x08006060
 8003f68:	7ff00000 	.word	0x7ff00000
 8003f6c:	08006045 	.word	0x08006045
 8003f70:	0800603c 	.word	0x0800603c
 8003f74:	08006019 	.word	0x08006019
 8003f78:	3ff80000 	.word	0x3ff80000
 8003f7c:	08006158 	.word	0x08006158
 8003f80:	080060bf 	.word	0x080060bf
 8003f84:	2301      	movs	r3, #1
 8003f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f88:	e7d4      	b.n	8003f34 <_dtoa_r+0x2b4>
 8003f8a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003f8e:	465b      	mov	r3, fp
 8003f90:	f8cd b008 	str.w	fp, [sp, #8]
 8003f94:	e7a6      	b.n	8003ee4 <_dtoa_r+0x264>
 8003f96:	3101      	adds	r1, #1
 8003f98:	6041      	str	r1, [r0, #4]
 8003f9a:	0052      	lsls	r2, r2, #1
 8003f9c:	e7a6      	b.n	8003eec <_dtoa_r+0x26c>
 8003f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fa0:	9a08      	ldr	r2, [sp, #32]
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	9b02      	ldr	r3, [sp, #8]
 8003fa6:	2b0e      	cmp	r3, #14
 8003fa8:	f200 80a8 	bhi.w	80040fc <_dtoa_r+0x47c>
 8003fac:	2c00      	cmp	r4, #0
 8003fae:	f000 80a5 	beq.w	80040fc <_dtoa_r+0x47c>
 8003fb2:	f1b9 0f00 	cmp.w	r9, #0
 8003fb6:	dd34      	ble.n	8004022 <_dtoa_r+0x3a2>
 8003fb8:	4a9a      	ldr	r2, [pc, #616]	; (8004224 <_dtoa_r+0x5a4>)
 8003fba:	f009 030f 	and.w	r3, r9, #15
 8003fbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fc2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003fc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fce:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003fd2:	d016      	beq.n	8004002 <_dtoa_r+0x382>
 8003fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fd8:	4b93      	ldr	r3, [pc, #588]	; (8004228 <_dtoa_r+0x5a8>)
 8003fda:	2703      	movs	r7, #3
 8003fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fe0:	f7fc fba4 	bl	800072c <__aeabi_ddiv>
 8003fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fe8:	f004 040f 	and.w	r4, r4, #15
 8003fec:	4e8e      	ldr	r6, [pc, #568]	; (8004228 <_dtoa_r+0x5a8>)
 8003fee:	b954      	cbnz	r4, 8004006 <_dtoa_r+0x386>
 8003ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ff8:	f7fc fb98 	bl	800072c <__aeabi_ddiv>
 8003ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004000:	e029      	b.n	8004056 <_dtoa_r+0x3d6>
 8004002:	2702      	movs	r7, #2
 8004004:	e7f2      	b.n	8003fec <_dtoa_r+0x36c>
 8004006:	07e1      	lsls	r1, r4, #31
 8004008:	d508      	bpl.n	800401c <_dtoa_r+0x39c>
 800400a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800400e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004012:	f7fc fa61 	bl	80004d8 <__aeabi_dmul>
 8004016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800401a:	3701      	adds	r7, #1
 800401c:	1064      	asrs	r4, r4, #1
 800401e:	3608      	adds	r6, #8
 8004020:	e7e5      	b.n	8003fee <_dtoa_r+0x36e>
 8004022:	f000 80a5 	beq.w	8004170 <_dtoa_r+0x4f0>
 8004026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800402a:	f1c9 0400 	rsb	r4, r9, #0
 800402e:	4b7d      	ldr	r3, [pc, #500]	; (8004224 <_dtoa_r+0x5a4>)
 8004030:	f004 020f 	and.w	r2, r4, #15
 8004034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc fa4c 	bl	80004d8 <__aeabi_dmul>
 8004040:	2702      	movs	r7, #2
 8004042:	2300      	movs	r3, #0
 8004044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004048:	4e77      	ldr	r6, [pc, #476]	; (8004228 <_dtoa_r+0x5a8>)
 800404a:	1124      	asrs	r4, r4, #4
 800404c:	2c00      	cmp	r4, #0
 800404e:	f040 8084 	bne.w	800415a <_dtoa_r+0x4da>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1d2      	bne.n	8003ffc <_dtoa_r+0x37c>
 8004056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 808b 	beq.w	8004174 <_dtoa_r+0x4f4>
 800405e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004062:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800406a:	2200      	movs	r2, #0
 800406c:	4b6f      	ldr	r3, [pc, #444]	; (800422c <_dtoa_r+0x5ac>)
 800406e:	f7fc fca5 	bl	80009bc <__aeabi_dcmplt>
 8004072:	2800      	cmp	r0, #0
 8004074:	d07e      	beq.n	8004174 <_dtoa_r+0x4f4>
 8004076:	9b02      	ldr	r3, [sp, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d07b      	beq.n	8004174 <_dtoa_r+0x4f4>
 800407c:	f1bb 0f00 	cmp.w	fp, #0
 8004080:	dd38      	ble.n	80040f4 <_dtoa_r+0x474>
 8004082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004086:	2200      	movs	r2, #0
 8004088:	4b69      	ldr	r3, [pc, #420]	; (8004230 <_dtoa_r+0x5b0>)
 800408a:	f7fc fa25 	bl	80004d8 <__aeabi_dmul>
 800408e:	465c      	mov	r4, fp
 8004090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004094:	f109 38ff 	add.w	r8, r9, #4294967295
 8004098:	3701      	adds	r7, #1
 800409a:	4638      	mov	r0, r7
 800409c:	f7fc f9b2 	bl	8000404 <__aeabi_i2d>
 80040a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040a4:	f7fc fa18 	bl	80004d8 <__aeabi_dmul>
 80040a8:	2200      	movs	r2, #0
 80040aa:	4b62      	ldr	r3, [pc, #392]	; (8004234 <_dtoa_r+0x5b4>)
 80040ac:	f7fc f85e 	bl	800016c <__adddf3>
 80040b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040b8:	9611      	str	r6, [sp, #68]	; 0x44
 80040ba:	2c00      	cmp	r4, #0
 80040bc:	d15d      	bne.n	800417a <_dtoa_r+0x4fa>
 80040be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c2:	2200      	movs	r2, #0
 80040c4:	4b5c      	ldr	r3, [pc, #368]	; (8004238 <_dtoa_r+0x5b8>)
 80040c6:	f7fc f84f 	bl	8000168 <__aeabi_dsub>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040d2:	4633      	mov	r3, r6
 80040d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040d6:	f7fc fc8f 	bl	80009f8 <__aeabi_dcmpgt>
 80040da:	2800      	cmp	r0, #0
 80040dc:	f040 829e 	bne.w	800461c <_dtoa_r+0x99c>
 80040e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040ea:	f7fc fc67 	bl	80009bc <__aeabi_dcmplt>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	f040 8292 	bne.w	8004618 <_dtoa_r+0x998>
 80040f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80040f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f2c0 8153 	blt.w	80043aa <_dtoa_r+0x72a>
 8004104:	f1b9 0f0e 	cmp.w	r9, #14
 8004108:	f300 814f 	bgt.w	80043aa <_dtoa_r+0x72a>
 800410c:	4b45      	ldr	r3, [pc, #276]	; (8004224 <_dtoa_r+0x5a4>)
 800410e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004112:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004116:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800411a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800411c:	2b00      	cmp	r3, #0
 800411e:	f280 80db 	bge.w	80042d8 <_dtoa_r+0x658>
 8004122:	9b02      	ldr	r3, [sp, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f300 80d7 	bgt.w	80042d8 <_dtoa_r+0x658>
 800412a:	f040 8274 	bne.w	8004616 <_dtoa_r+0x996>
 800412e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004132:	2200      	movs	r2, #0
 8004134:	4b40      	ldr	r3, [pc, #256]	; (8004238 <_dtoa_r+0x5b8>)
 8004136:	f7fc f9cf 	bl	80004d8 <__aeabi_dmul>
 800413a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800413e:	f7fc fc51 	bl	80009e4 <__aeabi_dcmpge>
 8004142:	9c02      	ldr	r4, [sp, #8]
 8004144:	4626      	mov	r6, r4
 8004146:	2800      	cmp	r0, #0
 8004148:	f040 824a 	bne.w	80045e0 <_dtoa_r+0x960>
 800414c:	2331      	movs	r3, #49	; 0x31
 800414e:	9f08      	ldr	r7, [sp, #32]
 8004150:	f109 0901 	add.w	r9, r9, #1
 8004154:	f807 3b01 	strb.w	r3, [r7], #1
 8004158:	e246      	b.n	80045e8 <_dtoa_r+0x968>
 800415a:	07e2      	lsls	r2, r4, #31
 800415c:	d505      	bpl.n	800416a <_dtoa_r+0x4ea>
 800415e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004162:	f7fc f9b9 	bl	80004d8 <__aeabi_dmul>
 8004166:	2301      	movs	r3, #1
 8004168:	3701      	adds	r7, #1
 800416a:	1064      	asrs	r4, r4, #1
 800416c:	3608      	adds	r6, #8
 800416e:	e76d      	b.n	800404c <_dtoa_r+0x3cc>
 8004170:	2702      	movs	r7, #2
 8004172:	e770      	b.n	8004056 <_dtoa_r+0x3d6>
 8004174:	46c8      	mov	r8, r9
 8004176:	9c02      	ldr	r4, [sp, #8]
 8004178:	e78f      	b.n	800409a <_dtoa_r+0x41a>
 800417a:	9908      	ldr	r1, [sp, #32]
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <_dtoa_r+0x5a4>)
 800417e:	4421      	add	r1, r4
 8004180:	9112      	str	r1, [sp, #72]	; 0x48
 8004182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004188:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800418c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004190:	2900      	cmp	r1, #0
 8004192:	d055      	beq.n	8004240 <_dtoa_r+0x5c0>
 8004194:	2000      	movs	r0, #0
 8004196:	4929      	ldr	r1, [pc, #164]	; (800423c <_dtoa_r+0x5bc>)
 8004198:	f7fc fac8 	bl	800072c <__aeabi_ddiv>
 800419c:	463b      	mov	r3, r7
 800419e:	4632      	mov	r2, r6
 80041a0:	f7fb ffe2 	bl	8000168 <__aeabi_dsub>
 80041a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041a8:	9f08      	ldr	r7, [sp, #32]
 80041aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ae:	f7fc fc43 	bl	8000a38 <__aeabi_d2iz>
 80041b2:	4604      	mov	r4, r0
 80041b4:	f7fc f926 	bl	8000404 <__aeabi_i2d>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c0:	f7fb ffd2 	bl	8000168 <__aeabi_dsub>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	3430      	adds	r4, #48	; 0x30
 80041ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041d2:	f807 4b01 	strb.w	r4, [r7], #1
 80041d6:	f7fc fbf1 	bl	80009bc <__aeabi_dcmplt>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d174      	bne.n	80042c8 <_dtoa_r+0x648>
 80041de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041e2:	2000      	movs	r0, #0
 80041e4:	4911      	ldr	r1, [pc, #68]	; (800422c <_dtoa_r+0x5ac>)
 80041e6:	f7fb ffbf 	bl	8000168 <__aeabi_dsub>
 80041ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041ee:	f7fc fbe5 	bl	80009bc <__aeabi_dcmplt>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f040 80b6 	bne.w	8004364 <_dtoa_r+0x6e4>
 80041f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041fa:	429f      	cmp	r7, r3
 80041fc:	f43f af7a 	beq.w	80040f4 <_dtoa_r+0x474>
 8004200:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004204:	2200      	movs	r2, #0
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <_dtoa_r+0x5b0>)
 8004208:	f7fc f966 	bl	80004d8 <__aeabi_dmul>
 800420c:	2200      	movs	r2, #0
 800420e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <_dtoa_r+0x5b0>)
 8004218:	f7fc f95e 	bl	80004d8 <__aeabi_dmul>
 800421c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004220:	e7c3      	b.n	80041aa <_dtoa_r+0x52a>
 8004222:	bf00      	nop
 8004224:	08006158 	.word	0x08006158
 8004228:	08006130 	.word	0x08006130
 800422c:	3ff00000 	.word	0x3ff00000
 8004230:	40240000 	.word	0x40240000
 8004234:	401c0000 	.word	0x401c0000
 8004238:	40140000 	.word	0x40140000
 800423c:	3fe00000 	.word	0x3fe00000
 8004240:	4630      	mov	r0, r6
 8004242:	4639      	mov	r1, r7
 8004244:	f7fc f948 	bl	80004d8 <__aeabi_dmul>
 8004248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800424a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800424e:	9c08      	ldr	r4, [sp, #32]
 8004250:	9314      	str	r3, [sp, #80]	; 0x50
 8004252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004256:	f7fc fbef 	bl	8000a38 <__aeabi_d2iz>
 800425a:	9015      	str	r0, [sp, #84]	; 0x54
 800425c:	f7fc f8d2 	bl	8000404 <__aeabi_i2d>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004268:	f7fb ff7e 	bl	8000168 <__aeabi_dsub>
 800426c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800426e:	4606      	mov	r6, r0
 8004270:	3330      	adds	r3, #48	; 0x30
 8004272:	f804 3b01 	strb.w	r3, [r4], #1
 8004276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004278:	460f      	mov	r7, r1
 800427a:	429c      	cmp	r4, r3
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	d124      	bne.n	80042cc <_dtoa_r+0x64c>
 8004282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004286:	4bb3      	ldr	r3, [pc, #716]	; (8004554 <_dtoa_r+0x8d4>)
 8004288:	f7fb ff70 	bl	800016c <__adddf3>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4630      	mov	r0, r6
 8004292:	4639      	mov	r1, r7
 8004294:	f7fc fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8004298:	2800      	cmp	r0, #0
 800429a:	d162      	bne.n	8004362 <_dtoa_r+0x6e2>
 800429c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042a0:	2000      	movs	r0, #0
 80042a2:	49ac      	ldr	r1, [pc, #688]	; (8004554 <_dtoa_r+0x8d4>)
 80042a4:	f7fb ff60 	bl	8000168 <__aeabi_dsub>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4630      	mov	r0, r6
 80042ae:	4639      	mov	r1, r7
 80042b0:	f7fc fb84 	bl	80009bc <__aeabi_dcmplt>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	f43f af1d 	beq.w	80040f4 <_dtoa_r+0x474>
 80042ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042bc:	1e7b      	subs	r3, r7, #1
 80042be:	9314      	str	r3, [sp, #80]	; 0x50
 80042c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d0f8      	beq.n	80042ba <_dtoa_r+0x63a>
 80042c8:	46c1      	mov	r9, r8
 80042ca:	e03a      	b.n	8004342 <_dtoa_r+0x6c2>
 80042cc:	4ba2      	ldr	r3, [pc, #648]	; (8004558 <_dtoa_r+0x8d8>)
 80042ce:	f7fc f903 	bl	80004d8 <__aeabi_dmul>
 80042d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042d6:	e7bc      	b.n	8004252 <_dtoa_r+0x5d2>
 80042d8:	9f08      	ldr	r7, [sp, #32]
 80042da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042e2:	f7fc fa23 	bl	800072c <__aeabi_ddiv>
 80042e6:	f7fc fba7 	bl	8000a38 <__aeabi_d2iz>
 80042ea:	4604      	mov	r4, r0
 80042ec:	f7fc f88a 	bl	8000404 <__aeabi_i2d>
 80042f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042f4:	f7fc f8f0 	bl	80004d8 <__aeabi_dmul>
 80042f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80042fc:	460b      	mov	r3, r1
 80042fe:	4602      	mov	r2, r0
 8004300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004304:	f7fb ff30 	bl	8000168 <__aeabi_dsub>
 8004308:	f807 6b01 	strb.w	r6, [r7], #1
 800430c:	9e08      	ldr	r6, [sp, #32]
 800430e:	9b02      	ldr	r3, [sp, #8]
 8004310:	1bbe      	subs	r6, r7, r6
 8004312:	42b3      	cmp	r3, r6
 8004314:	d13a      	bne.n	800438c <_dtoa_r+0x70c>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	f7fb ff27 	bl	800016c <__adddf3>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800432a:	f7fc fb65 	bl	80009f8 <__aeabi_dcmpgt>
 800432e:	bb58      	cbnz	r0, 8004388 <_dtoa_r+0x708>
 8004330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004338:	f7fc fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800433c:	b108      	cbz	r0, 8004342 <_dtoa_r+0x6c2>
 800433e:	07e1      	lsls	r1, r4, #31
 8004340:	d422      	bmi.n	8004388 <_dtoa_r+0x708>
 8004342:	4628      	mov	r0, r5
 8004344:	4651      	mov	r1, sl
 8004346:	f000 faf1 	bl	800492c <_Bfree>
 800434a:	2300      	movs	r3, #0
 800434c:	703b      	strb	r3, [r7, #0]
 800434e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004350:	f109 0001 	add.w	r0, r9, #1
 8004354:	6018      	str	r0, [r3, #0]
 8004356:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004358:	2b00      	cmp	r3, #0
 800435a:	f43f acdf 	beq.w	8003d1c <_dtoa_r+0x9c>
 800435e:	601f      	str	r7, [r3, #0]
 8004360:	e4dc      	b.n	8003d1c <_dtoa_r+0x9c>
 8004362:	4627      	mov	r7, r4
 8004364:	463b      	mov	r3, r7
 8004366:	461f      	mov	r7, r3
 8004368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800436c:	2a39      	cmp	r2, #57	; 0x39
 800436e:	d107      	bne.n	8004380 <_dtoa_r+0x700>
 8004370:	9a08      	ldr	r2, [sp, #32]
 8004372:	429a      	cmp	r2, r3
 8004374:	d1f7      	bne.n	8004366 <_dtoa_r+0x6e6>
 8004376:	2230      	movs	r2, #48	; 0x30
 8004378:	9908      	ldr	r1, [sp, #32]
 800437a:	f108 0801 	add.w	r8, r8, #1
 800437e:	700a      	strb	r2, [r1, #0]
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	3201      	adds	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e79f      	b.n	80042c8 <_dtoa_r+0x648>
 8004388:	46c8      	mov	r8, r9
 800438a:	e7eb      	b.n	8004364 <_dtoa_r+0x6e4>
 800438c:	2200      	movs	r2, #0
 800438e:	4b72      	ldr	r3, [pc, #456]	; (8004558 <_dtoa_r+0x8d8>)
 8004390:	f7fc f8a2 	bl	80004d8 <__aeabi_dmul>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800439c:	2200      	movs	r2, #0
 800439e:	2300      	movs	r3, #0
 80043a0:	f7fc fb02 	bl	80009a8 <__aeabi_dcmpeq>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d098      	beq.n	80042da <_dtoa_r+0x65a>
 80043a8:	e7cb      	b.n	8004342 <_dtoa_r+0x6c2>
 80043aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	f000 80cd 	beq.w	800454c <_dtoa_r+0x8cc>
 80043b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043b4:	2a01      	cmp	r2, #1
 80043b6:	f300 80af 	bgt.w	8004518 <_dtoa_r+0x898>
 80043ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043bc:	2a00      	cmp	r2, #0
 80043be:	f000 80a7 	beq.w	8004510 <_dtoa_r+0x890>
 80043c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043c8:	9f06      	ldr	r7, [sp, #24]
 80043ca:	9a06      	ldr	r2, [sp, #24]
 80043cc:	2101      	movs	r1, #1
 80043ce:	441a      	add	r2, r3
 80043d0:	9206      	str	r2, [sp, #24]
 80043d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d4:	4628      	mov	r0, r5
 80043d6:	441a      	add	r2, r3
 80043d8:	9209      	str	r2, [sp, #36]	; 0x24
 80043da:	f000 fb61 	bl	8004aa0 <__i2b>
 80043de:	4606      	mov	r6, r0
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	dd0c      	ble.n	80043fe <_dtoa_r+0x77e>
 80043e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	dd09      	ble.n	80043fe <_dtoa_r+0x77e>
 80043ea:	42bb      	cmp	r3, r7
 80043ec:	bfa8      	it	ge
 80043ee:	463b      	movge	r3, r7
 80043f0:	9a06      	ldr	r2, [sp, #24]
 80043f2:	1aff      	subs	r7, r7, r3
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	9206      	str	r2, [sp, #24]
 80043f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	9309      	str	r3, [sp, #36]	; 0x24
 80043fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004400:	b1f3      	cbz	r3, 8004440 <_dtoa_r+0x7c0>
 8004402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a9 	beq.w	800455c <_dtoa_r+0x8dc>
 800440a:	2c00      	cmp	r4, #0
 800440c:	dd10      	ble.n	8004430 <_dtoa_r+0x7b0>
 800440e:	4631      	mov	r1, r6
 8004410:	4622      	mov	r2, r4
 8004412:	4628      	mov	r0, r5
 8004414:	f000 fbfe 	bl	8004c14 <__pow5mult>
 8004418:	4652      	mov	r2, sl
 800441a:	4601      	mov	r1, r0
 800441c:	4606      	mov	r6, r0
 800441e:	4628      	mov	r0, r5
 8004420:	f000 fb54 	bl	8004acc <__multiply>
 8004424:	4680      	mov	r8, r0
 8004426:	4651      	mov	r1, sl
 8004428:	4628      	mov	r0, r5
 800442a:	f000 fa7f 	bl	800492c <_Bfree>
 800442e:	46c2      	mov	sl, r8
 8004430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004432:	1b1a      	subs	r2, r3, r4
 8004434:	d004      	beq.n	8004440 <_dtoa_r+0x7c0>
 8004436:	4651      	mov	r1, sl
 8004438:	4628      	mov	r0, r5
 800443a:	f000 fbeb 	bl	8004c14 <__pow5mult>
 800443e:	4682      	mov	sl, r0
 8004440:	2101      	movs	r1, #1
 8004442:	4628      	mov	r0, r5
 8004444:	f000 fb2c 	bl	8004aa0 <__i2b>
 8004448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800444a:	4604      	mov	r4, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f340 8087 	ble.w	8004560 <_dtoa_r+0x8e0>
 8004452:	461a      	mov	r2, r3
 8004454:	4601      	mov	r1, r0
 8004456:	4628      	mov	r0, r5
 8004458:	f000 fbdc 	bl	8004c14 <__pow5mult>
 800445c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800445e:	4604      	mov	r4, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	f340 8080 	ble.w	8004566 <_dtoa_r+0x8e6>
 8004466:	f04f 0800 	mov.w	r8, #0
 800446a:	6923      	ldr	r3, [r4, #16]
 800446c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004470:	6918      	ldr	r0, [r3, #16]
 8004472:	f000 fac7 	bl	8004a04 <__hi0bits>
 8004476:	f1c0 0020 	rsb	r0, r0, #32
 800447a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447c:	4418      	add	r0, r3
 800447e:	f010 001f 	ands.w	r0, r0, #31
 8004482:	f000 8092 	beq.w	80045aa <_dtoa_r+0x92a>
 8004486:	f1c0 0320 	rsb	r3, r0, #32
 800448a:	2b04      	cmp	r3, #4
 800448c:	f340 808a 	ble.w	80045a4 <_dtoa_r+0x924>
 8004490:	f1c0 001c 	rsb	r0, r0, #28
 8004494:	9b06      	ldr	r3, [sp, #24]
 8004496:	4407      	add	r7, r0
 8004498:	4403      	add	r3, r0
 800449a:	9306      	str	r3, [sp, #24]
 800449c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449e:	4403      	add	r3, r0
 80044a0:	9309      	str	r3, [sp, #36]	; 0x24
 80044a2:	9b06      	ldr	r3, [sp, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd05      	ble.n	80044b4 <_dtoa_r+0x834>
 80044a8:	4651      	mov	r1, sl
 80044aa:	461a      	mov	r2, r3
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 fc0b 	bl	8004cc8 <__lshift>
 80044b2:	4682      	mov	sl, r0
 80044b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dd05      	ble.n	80044c6 <_dtoa_r+0x846>
 80044ba:	4621      	mov	r1, r4
 80044bc:	461a      	mov	r2, r3
 80044be:	4628      	mov	r0, r5
 80044c0:	f000 fc02 	bl	8004cc8 <__lshift>
 80044c4:	4604      	mov	r4, r0
 80044c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d070      	beq.n	80045ae <_dtoa_r+0x92e>
 80044cc:	4621      	mov	r1, r4
 80044ce:	4650      	mov	r0, sl
 80044d0:	f000 fc66 	bl	8004da0 <__mcmp>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	da6a      	bge.n	80045ae <_dtoa_r+0x92e>
 80044d8:	2300      	movs	r3, #0
 80044da:	4651      	mov	r1, sl
 80044dc:	220a      	movs	r2, #10
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fa46 	bl	8004970 <__multadd>
 80044e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044e6:	4682      	mov	sl, r0
 80044e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8193 	beq.w	8004818 <_dtoa_r+0xb98>
 80044f2:	4631      	mov	r1, r6
 80044f4:	2300      	movs	r3, #0
 80044f6:	220a      	movs	r2, #10
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 fa39 	bl	8004970 <__multadd>
 80044fe:	f1bb 0f00 	cmp.w	fp, #0
 8004502:	4606      	mov	r6, r0
 8004504:	f300 8093 	bgt.w	800462e <_dtoa_r+0x9ae>
 8004508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800450a:	2b02      	cmp	r3, #2
 800450c:	dc57      	bgt.n	80045be <_dtoa_r+0x93e>
 800450e:	e08e      	b.n	800462e <_dtoa_r+0x9ae>
 8004510:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004512:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004516:	e756      	b.n	80043c6 <_dtoa_r+0x746>
 8004518:	9b02      	ldr	r3, [sp, #8]
 800451a:	1e5c      	subs	r4, r3, #1
 800451c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800451e:	42a3      	cmp	r3, r4
 8004520:	bfb7      	itett	lt
 8004522:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004524:	1b1c      	subge	r4, r3, r4
 8004526:	1ae2      	sublt	r2, r4, r3
 8004528:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800452a:	bfbe      	ittt	lt
 800452c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800452e:	189b      	addlt	r3, r3, r2
 8004530:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	bfb8      	it	lt
 8004536:	2400      	movlt	r4, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	bfbb      	ittet	lt
 800453c:	9b06      	ldrlt	r3, [sp, #24]
 800453e:	9a02      	ldrlt	r2, [sp, #8]
 8004540:	9f06      	ldrge	r7, [sp, #24]
 8004542:	1a9f      	sublt	r7, r3, r2
 8004544:	bfac      	ite	ge
 8004546:	9b02      	ldrge	r3, [sp, #8]
 8004548:	2300      	movlt	r3, #0
 800454a:	e73e      	b.n	80043ca <_dtoa_r+0x74a>
 800454c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800454e:	9f06      	ldr	r7, [sp, #24]
 8004550:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004552:	e745      	b.n	80043e0 <_dtoa_r+0x760>
 8004554:	3fe00000 	.word	0x3fe00000
 8004558:	40240000 	.word	0x40240000
 800455c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800455e:	e76a      	b.n	8004436 <_dtoa_r+0x7b6>
 8004560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004562:	2b01      	cmp	r3, #1
 8004564:	dc19      	bgt.n	800459a <_dtoa_r+0x91a>
 8004566:	9b04      	ldr	r3, [sp, #16]
 8004568:	b9bb      	cbnz	r3, 800459a <_dtoa_r+0x91a>
 800456a:	9b05      	ldr	r3, [sp, #20]
 800456c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004570:	b99b      	cbnz	r3, 800459a <_dtoa_r+0x91a>
 8004572:	9b05      	ldr	r3, [sp, #20]
 8004574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004578:	0d1b      	lsrs	r3, r3, #20
 800457a:	051b      	lsls	r3, r3, #20
 800457c:	b183      	cbz	r3, 80045a0 <_dtoa_r+0x920>
 800457e:	f04f 0801 	mov.w	r8, #1
 8004582:	9b06      	ldr	r3, [sp, #24]
 8004584:	3301      	adds	r3, #1
 8004586:	9306      	str	r3, [sp, #24]
 8004588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	9309      	str	r3, [sp, #36]	; 0x24
 800458e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af6a 	bne.w	800446a <_dtoa_r+0x7ea>
 8004596:	2001      	movs	r0, #1
 8004598:	e76f      	b.n	800447a <_dtoa_r+0x7fa>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	e7f6      	b.n	800458e <_dtoa_r+0x90e>
 80045a0:	4698      	mov	r8, r3
 80045a2:	e7f4      	b.n	800458e <_dtoa_r+0x90e>
 80045a4:	f43f af7d 	beq.w	80044a2 <_dtoa_r+0x822>
 80045a8:	4618      	mov	r0, r3
 80045aa:	301c      	adds	r0, #28
 80045ac:	e772      	b.n	8004494 <_dtoa_r+0x814>
 80045ae:	9b02      	ldr	r3, [sp, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dc36      	bgt.n	8004622 <_dtoa_r+0x9a2>
 80045b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	dd33      	ble.n	8004622 <_dtoa_r+0x9a2>
 80045ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 80045be:	f1bb 0f00 	cmp.w	fp, #0
 80045c2:	d10d      	bne.n	80045e0 <_dtoa_r+0x960>
 80045c4:	4621      	mov	r1, r4
 80045c6:	465b      	mov	r3, fp
 80045c8:	2205      	movs	r2, #5
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 f9d0 	bl	8004970 <__multadd>
 80045d0:	4601      	mov	r1, r0
 80045d2:	4604      	mov	r4, r0
 80045d4:	4650      	mov	r0, sl
 80045d6:	f000 fbe3 	bl	8004da0 <__mcmp>
 80045da:	2800      	cmp	r0, #0
 80045dc:	f73f adb6 	bgt.w	800414c <_dtoa_r+0x4cc>
 80045e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045e2:	9f08      	ldr	r7, [sp, #32]
 80045e4:	ea6f 0903 	mvn.w	r9, r3
 80045e8:	f04f 0800 	mov.w	r8, #0
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f99c 	bl	800492c <_Bfree>
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	f43f aea4 	beq.w	8004342 <_dtoa_r+0x6c2>
 80045fa:	f1b8 0f00 	cmp.w	r8, #0
 80045fe:	d005      	beq.n	800460c <_dtoa_r+0x98c>
 8004600:	45b0      	cmp	r8, r6
 8004602:	d003      	beq.n	800460c <_dtoa_r+0x98c>
 8004604:	4641      	mov	r1, r8
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f990 	bl	800492c <_Bfree>
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f98c 	bl	800492c <_Bfree>
 8004614:	e695      	b.n	8004342 <_dtoa_r+0x6c2>
 8004616:	2400      	movs	r4, #0
 8004618:	4626      	mov	r6, r4
 800461a:	e7e1      	b.n	80045e0 <_dtoa_r+0x960>
 800461c:	46c1      	mov	r9, r8
 800461e:	4626      	mov	r6, r4
 8004620:	e594      	b.n	800414c <_dtoa_r+0x4cc>
 8004622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004624:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80fc 	beq.w	8004826 <_dtoa_r+0xba6>
 800462e:	2f00      	cmp	r7, #0
 8004630:	dd05      	ble.n	800463e <_dtoa_r+0x9be>
 8004632:	4631      	mov	r1, r6
 8004634:	463a      	mov	r2, r7
 8004636:	4628      	mov	r0, r5
 8004638:	f000 fb46 	bl	8004cc8 <__lshift>
 800463c:	4606      	mov	r6, r0
 800463e:	f1b8 0f00 	cmp.w	r8, #0
 8004642:	d05c      	beq.n	80046fe <_dtoa_r+0xa7e>
 8004644:	4628      	mov	r0, r5
 8004646:	6871      	ldr	r1, [r6, #4]
 8004648:	f000 f930 	bl	80048ac <_Balloc>
 800464c:	4607      	mov	r7, r0
 800464e:	b928      	cbnz	r0, 800465c <_dtoa_r+0x9dc>
 8004650:	4602      	mov	r2, r0
 8004652:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004656:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <_dtoa_r+0xbd0>)
 8004658:	f7ff bb26 	b.w	8003ca8 <_dtoa_r+0x28>
 800465c:	6932      	ldr	r2, [r6, #16]
 800465e:	f106 010c 	add.w	r1, r6, #12
 8004662:	3202      	adds	r2, #2
 8004664:	0092      	lsls	r2, r2, #2
 8004666:	300c      	adds	r0, #12
 8004668:	f000 f912 	bl	8004890 <memcpy>
 800466c:	2201      	movs	r2, #1
 800466e:	4639      	mov	r1, r7
 8004670:	4628      	mov	r0, r5
 8004672:	f000 fb29 	bl	8004cc8 <__lshift>
 8004676:	46b0      	mov	r8, r6
 8004678:	4606      	mov	r6, r0
 800467a:	9b08      	ldr	r3, [sp, #32]
 800467c:	3301      	adds	r3, #1
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	9b08      	ldr	r3, [sp, #32]
 8004682:	445b      	add	r3, fp
 8004684:	930a      	str	r3, [sp, #40]	; 0x28
 8004686:	9b04      	ldr	r3, [sp, #16]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	9309      	str	r3, [sp, #36]	; 0x24
 800468e:	9b02      	ldr	r3, [sp, #8]
 8004690:	4621      	mov	r1, r4
 8004692:	4650      	mov	r0, sl
 8004694:	f103 3bff 	add.w	fp, r3, #4294967295
 8004698:	f7ff fa62 	bl	8003b60 <quorem>
 800469c:	4603      	mov	r3, r0
 800469e:	4641      	mov	r1, r8
 80046a0:	3330      	adds	r3, #48	; 0x30
 80046a2:	9004      	str	r0, [sp, #16]
 80046a4:	4650      	mov	r0, sl
 80046a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046a8:	f000 fb7a 	bl	8004da0 <__mcmp>
 80046ac:	4632      	mov	r2, r6
 80046ae:	9006      	str	r0, [sp, #24]
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fb90 	bl	8004dd8 <__mdiff>
 80046b8:	68c2      	ldr	r2, [r0, #12]
 80046ba:	4607      	mov	r7, r0
 80046bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046be:	bb02      	cbnz	r2, 8004702 <_dtoa_r+0xa82>
 80046c0:	4601      	mov	r1, r0
 80046c2:	4650      	mov	r0, sl
 80046c4:	f000 fb6c 	bl	8004da0 <__mcmp>
 80046c8:	4602      	mov	r2, r0
 80046ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046cc:	4639      	mov	r1, r7
 80046ce:	4628      	mov	r0, r5
 80046d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80046d4:	f000 f92a 	bl	800492c <_Bfree>
 80046d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046dc:	9f02      	ldr	r7, [sp, #8]
 80046de:	ea43 0102 	orr.w	r1, r3, r2
 80046e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e4:	430b      	orrs	r3, r1
 80046e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e8:	d10d      	bne.n	8004706 <_dtoa_r+0xa86>
 80046ea:	2b39      	cmp	r3, #57	; 0x39
 80046ec:	d027      	beq.n	800473e <_dtoa_r+0xabe>
 80046ee:	9a06      	ldr	r2, [sp, #24]
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	dd01      	ble.n	80046f8 <_dtoa_r+0xa78>
 80046f4:	9b04      	ldr	r3, [sp, #16]
 80046f6:	3331      	adds	r3, #49	; 0x31
 80046f8:	f88b 3000 	strb.w	r3, [fp]
 80046fc:	e776      	b.n	80045ec <_dtoa_r+0x96c>
 80046fe:	4630      	mov	r0, r6
 8004700:	e7b9      	b.n	8004676 <_dtoa_r+0x9f6>
 8004702:	2201      	movs	r2, #1
 8004704:	e7e2      	b.n	80046cc <_dtoa_r+0xa4c>
 8004706:	9906      	ldr	r1, [sp, #24]
 8004708:	2900      	cmp	r1, #0
 800470a:	db04      	blt.n	8004716 <_dtoa_r+0xa96>
 800470c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800470e:	4301      	orrs	r1, r0
 8004710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004712:	4301      	orrs	r1, r0
 8004714:	d120      	bne.n	8004758 <_dtoa_r+0xad8>
 8004716:	2a00      	cmp	r2, #0
 8004718:	ddee      	ble.n	80046f8 <_dtoa_r+0xa78>
 800471a:	4651      	mov	r1, sl
 800471c:	2201      	movs	r2, #1
 800471e:	4628      	mov	r0, r5
 8004720:	9302      	str	r3, [sp, #8]
 8004722:	f000 fad1 	bl	8004cc8 <__lshift>
 8004726:	4621      	mov	r1, r4
 8004728:	4682      	mov	sl, r0
 800472a:	f000 fb39 	bl	8004da0 <__mcmp>
 800472e:	2800      	cmp	r0, #0
 8004730:	9b02      	ldr	r3, [sp, #8]
 8004732:	dc02      	bgt.n	800473a <_dtoa_r+0xaba>
 8004734:	d1e0      	bne.n	80046f8 <_dtoa_r+0xa78>
 8004736:	07da      	lsls	r2, r3, #31
 8004738:	d5de      	bpl.n	80046f8 <_dtoa_r+0xa78>
 800473a:	2b39      	cmp	r3, #57	; 0x39
 800473c:	d1da      	bne.n	80046f4 <_dtoa_r+0xa74>
 800473e:	2339      	movs	r3, #57	; 0x39
 8004740:	f88b 3000 	strb.w	r3, [fp]
 8004744:	463b      	mov	r3, r7
 8004746:	461f      	mov	r7, r3
 8004748:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800474c:	3b01      	subs	r3, #1
 800474e:	2a39      	cmp	r2, #57	; 0x39
 8004750:	d050      	beq.n	80047f4 <_dtoa_r+0xb74>
 8004752:	3201      	adds	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e749      	b.n	80045ec <_dtoa_r+0x96c>
 8004758:	2a00      	cmp	r2, #0
 800475a:	dd03      	ble.n	8004764 <_dtoa_r+0xae4>
 800475c:	2b39      	cmp	r3, #57	; 0x39
 800475e:	d0ee      	beq.n	800473e <_dtoa_r+0xabe>
 8004760:	3301      	adds	r3, #1
 8004762:	e7c9      	b.n	80046f8 <_dtoa_r+0xa78>
 8004764:	9a02      	ldr	r2, [sp, #8]
 8004766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004768:	f802 3c01 	strb.w	r3, [r2, #-1]
 800476c:	428a      	cmp	r2, r1
 800476e:	d02a      	beq.n	80047c6 <_dtoa_r+0xb46>
 8004770:	4651      	mov	r1, sl
 8004772:	2300      	movs	r3, #0
 8004774:	220a      	movs	r2, #10
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f8fa 	bl	8004970 <__multadd>
 800477c:	45b0      	cmp	r8, r6
 800477e:	4682      	mov	sl, r0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	f04f 020a 	mov.w	r2, #10
 8004788:	4641      	mov	r1, r8
 800478a:	4628      	mov	r0, r5
 800478c:	d107      	bne.n	800479e <_dtoa_r+0xb1e>
 800478e:	f000 f8ef 	bl	8004970 <__multadd>
 8004792:	4680      	mov	r8, r0
 8004794:	4606      	mov	r6, r0
 8004796:	9b02      	ldr	r3, [sp, #8]
 8004798:	3301      	adds	r3, #1
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	e777      	b.n	800468e <_dtoa_r+0xa0e>
 800479e:	f000 f8e7 	bl	8004970 <__multadd>
 80047a2:	4631      	mov	r1, r6
 80047a4:	4680      	mov	r8, r0
 80047a6:	2300      	movs	r3, #0
 80047a8:	220a      	movs	r2, #10
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f8e0 	bl	8004970 <__multadd>
 80047b0:	4606      	mov	r6, r0
 80047b2:	e7f0      	b.n	8004796 <_dtoa_r+0xb16>
 80047b4:	f1bb 0f00 	cmp.w	fp, #0
 80047b8:	bfcc      	ite	gt
 80047ba:	465f      	movgt	r7, fp
 80047bc:	2701      	movle	r7, #1
 80047be:	f04f 0800 	mov.w	r8, #0
 80047c2:	9a08      	ldr	r2, [sp, #32]
 80047c4:	4417      	add	r7, r2
 80047c6:	4651      	mov	r1, sl
 80047c8:	2201      	movs	r2, #1
 80047ca:	4628      	mov	r0, r5
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	f000 fa7b 	bl	8004cc8 <__lshift>
 80047d2:	4621      	mov	r1, r4
 80047d4:	4682      	mov	sl, r0
 80047d6:	f000 fae3 	bl	8004da0 <__mcmp>
 80047da:	2800      	cmp	r0, #0
 80047dc:	dcb2      	bgt.n	8004744 <_dtoa_r+0xac4>
 80047de:	d102      	bne.n	80047e6 <_dtoa_r+0xb66>
 80047e0:	9b02      	ldr	r3, [sp, #8]
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d4ae      	bmi.n	8004744 <_dtoa_r+0xac4>
 80047e6:	463b      	mov	r3, r7
 80047e8:	461f      	mov	r7, r3
 80047ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047ee:	2a30      	cmp	r2, #48	; 0x30
 80047f0:	d0fa      	beq.n	80047e8 <_dtoa_r+0xb68>
 80047f2:	e6fb      	b.n	80045ec <_dtoa_r+0x96c>
 80047f4:	9a08      	ldr	r2, [sp, #32]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d1a5      	bne.n	8004746 <_dtoa_r+0xac6>
 80047fa:	2331      	movs	r3, #49	; 0x31
 80047fc:	f109 0901 	add.w	r9, r9, #1
 8004800:	7013      	strb	r3, [r2, #0]
 8004802:	e6f3      	b.n	80045ec <_dtoa_r+0x96c>
 8004804:	4b13      	ldr	r3, [pc, #76]	; (8004854 <_dtoa_r+0xbd4>)
 8004806:	f7ff baa7 	b.w	8003d58 <_dtoa_r+0xd8>
 800480a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f aa80 	bne.w	8003d12 <_dtoa_r+0x92>
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <_dtoa_r+0xbd8>)
 8004814:	f7ff baa0 	b.w	8003d58 <_dtoa_r+0xd8>
 8004818:	f1bb 0f00 	cmp.w	fp, #0
 800481c:	dc03      	bgt.n	8004826 <_dtoa_r+0xba6>
 800481e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004820:	2b02      	cmp	r3, #2
 8004822:	f73f aecc 	bgt.w	80045be <_dtoa_r+0x93e>
 8004826:	9f08      	ldr	r7, [sp, #32]
 8004828:	4621      	mov	r1, r4
 800482a:	4650      	mov	r0, sl
 800482c:	f7ff f998 	bl	8003b60 <quorem>
 8004830:	9a08      	ldr	r2, [sp, #32]
 8004832:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004836:	f807 3b01 	strb.w	r3, [r7], #1
 800483a:	1aba      	subs	r2, r7, r2
 800483c:	4593      	cmp	fp, r2
 800483e:	ddb9      	ble.n	80047b4 <_dtoa_r+0xb34>
 8004840:	4651      	mov	r1, sl
 8004842:	2300      	movs	r3, #0
 8004844:	220a      	movs	r2, #10
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f892 	bl	8004970 <__multadd>
 800484c:	4682      	mov	sl, r0
 800484e:	e7eb      	b.n	8004828 <_dtoa_r+0xba8>
 8004850:	080060bf 	.word	0x080060bf
 8004854:	08006018 	.word	0x08006018
 8004858:	0800603c 	.word	0x0800603c

0800485c <_localeconv_r>:
 800485c:	4800      	ldr	r0, [pc, #0]	; (8004860 <_localeconv_r+0x4>)
 800485e:	4770      	bx	lr
 8004860:	20000160 	.word	0x20000160

08004864 <malloc>:
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <malloc+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f000 bbfb 	b.w	8005064 <_malloc_r>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c

08004874 <memchr>:
 8004874:	4603      	mov	r3, r0
 8004876:	b510      	push	{r4, lr}
 8004878:	b2c9      	uxtb	r1, r1
 800487a:	4402      	add	r2, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	4618      	mov	r0, r3
 8004880:	d101      	bne.n	8004886 <memchr+0x12>
 8004882:	2000      	movs	r0, #0
 8004884:	e003      	b.n	800488e <memchr+0x1a>
 8004886:	7804      	ldrb	r4, [r0, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	428c      	cmp	r4, r1
 800488c:	d1f6      	bne.n	800487c <memchr+0x8>
 800488e:	bd10      	pop	{r4, pc}

08004890 <memcpy>:
 8004890:	440a      	add	r2, r1
 8004892:	4291      	cmp	r1, r2
 8004894:	f100 33ff 	add.w	r3, r0, #4294967295
 8004898:	d100      	bne.n	800489c <memcpy+0xc>
 800489a:	4770      	bx	lr
 800489c:	b510      	push	{r4, lr}
 800489e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a2:	4291      	cmp	r1, r2
 80048a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a8:	d1f9      	bne.n	800489e <memcpy+0xe>
 80048aa:	bd10      	pop	{r4, pc}

080048ac <_Balloc>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048b0:	4604      	mov	r4, r0
 80048b2:	460d      	mov	r5, r1
 80048b4:	b976      	cbnz	r6, 80048d4 <_Balloc+0x28>
 80048b6:	2010      	movs	r0, #16
 80048b8:	f7ff ffd4 	bl	8004864 <malloc>
 80048bc:	4602      	mov	r2, r0
 80048be:	6260      	str	r0, [r4, #36]	; 0x24
 80048c0:	b920      	cbnz	r0, 80048cc <_Balloc+0x20>
 80048c2:	2166      	movs	r1, #102	; 0x66
 80048c4:	4b17      	ldr	r3, [pc, #92]	; (8004924 <_Balloc+0x78>)
 80048c6:	4818      	ldr	r0, [pc, #96]	; (8004928 <_Balloc+0x7c>)
 80048c8:	f000 fd92 	bl	80053f0 <__assert_func>
 80048cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048d0:	6006      	str	r6, [r0, #0]
 80048d2:	60c6      	str	r6, [r0, #12]
 80048d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048d6:	68f3      	ldr	r3, [r6, #12]
 80048d8:	b183      	cbz	r3, 80048fc <_Balloc+0x50>
 80048da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048e2:	b9b8      	cbnz	r0, 8004914 <_Balloc+0x68>
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f605 	lsl.w	r6, r1, r5
 80048ea:	1d72      	adds	r2, r6, #5
 80048ec:	4620      	mov	r0, r4
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	f000 fb5e 	bl	8004fb0 <_calloc_r>
 80048f4:	b160      	cbz	r0, 8004910 <_Balloc+0x64>
 80048f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80048fa:	e00e      	b.n	800491a <_Balloc+0x6e>
 80048fc:	2221      	movs	r2, #33	; 0x21
 80048fe:	2104      	movs	r1, #4
 8004900:	4620      	mov	r0, r4
 8004902:	f000 fb55 	bl	8004fb0 <_calloc_r>
 8004906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004908:	60f0      	str	r0, [r6, #12]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e4      	bne.n	80048da <_Balloc+0x2e>
 8004910:	2000      	movs	r0, #0
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	6802      	ldr	r2, [r0, #0]
 8004916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800491a:	2300      	movs	r3, #0
 800491c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004920:	e7f7      	b.n	8004912 <_Balloc+0x66>
 8004922:	bf00      	nop
 8004924:	08006049 	.word	0x08006049
 8004928:	080060d0 	.word	0x080060d0

0800492c <_Bfree>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004930:	4605      	mov	r5, r0
 8004932:	460c      	mov	r4, r1
 8004934:	b976      	cbnz	r6, 8004954 <_Bfree+0x28>
 8004936:	2010      	movs	r0, #16
 8004938:	f7ff ff94 	bl	8004864 <malloc>
 800493c:	4602      	mov	r2, r0
 800493e:	6268      	str	r0, [r5, #36]	; 0x24
 8004940:	b920      	cbnz	r0, 800494c <_Bfree+0x20>
 8004942:	218a      	movs	r1, #138	; 0x8a
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <_Bfree+0x3c>)
 8004946:	4809      	ldr	r0, [pc, #36]	; (800496c <_Bfree+0x40>)
 8004948:	f000 fd52 	bl	80053f0 <__assert_func>
 800494c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004950:	6006      	str	r6, [r0, #0]
 8004952:	60c6      	str	r6, [r0, #12]
 8004954:	b13c      	cbz	r4, 8004966 <_Bfree+0x3a>
 8004956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004958:	6862      	ldr	r2, [r4, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004960:	6021      	str	r1, [r4, #0]
 8004962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	08006049 	.word	0x08006049
 800496c:	080060d0 	.word	0x080060d0

08004970 <__multadd>:
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	4698      	mov	r8, r3
 8004976:	460c      	mov	r4, r1
 8004978:	2300      	movs	r3, #0
 800497a:	690e      	ldr	r6, [r1, #16]
 800497c:	4607      	mov	r7, r0
 800497e:	f101 0014 	add.w	r0, r1, #20
 8004982:	6805      	ldr	r5, [r0, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	b2a9      	uxth	r1, r5
 8004988:	fb02 8101 	mla	r1, r2, r1, r8
 800498c:	0c2d      	lsrs	r5, r5, #16
 800498e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004992:	fb02 c505 	mla	r5, r2, r5, ip
 8004996:	b289      	uxth	r1, r1
 8004998:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800499c:	429e      	cmp	r6, r3
 800499e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80049a2:	f840 1b04 	str.w	r1, [r0], #4
 80049a6:	dcec      	bgt.n	8004982 <__multadd+0x12>
 80049a8:	f1b8 0f00 	cmp.w	r8, #0
 80049ac:	d022      	beq.n	80049f4 <__multadd+0x84>
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	42b3      	cmp	r3, r6
 80049b2:	dc19      	bgt.n	80049e8 <__multadd+0x78>
 80049b4:	6861      	ldr	r1, [r4, #4]
 80049b6:	4638      	mov	r0, r7
 80049b8:	3101      	adds	r1, #1
 80049ba:	f7ff ff77 	bl	80048ac <_Balloc>
 80049be:	4605      	mov	r5, r0
 80049c0:	b928      	cbnz	r0, 80049ce <__multadd+0x5e>
 80049c2:	4602      	mov	r2, r0
 80049c4:	21b5      	movs	r1, #181	; 0xb5
 80049c6:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <__multadd+0x8c>)
 80049c8:	480d      	ldr	r0, [pc, #52]	; (8004a00 <__multadd+0x90>)
 80049ca:	f000 fd11 	bl	80053f0 <__assert_func>
 80049ce:	6922      	ldr	r2, [r4, #16]
 80049d0:	f104 010c 	add.w	r1, r4, #12
 80049d4:	3202      	adds	r2, #2
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	300c      	adds	r0, #12
 80049da:	f7ff ff59 	bl	8004890 <memcpy>
 80049de:	4621      	mov	r1, r4
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ffa3 	bl	800492c <_Bfree>
 80049e6:	462c      	mov	r4, r5
 80049e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80049ec:	3601      	adds	r6, #1
 80049ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80049f2:	6126      	str	r6, [r4, #16]
 80049f4:	4620      	mov	r0, r4
 80049f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049fa:	bf00      	nop
 80049fc:	080060bf 	.word	0x080060bf
 8004a00:	080060d0 	.word	0x080060d0

08004a04 <__hi0bits>:
 8004a04:	0c02      	lsrs	r2, r0, #16
 8004a06:	0412      	lsls	r2, r2, #16
 8004a08:	4603      	mov	r3, r0
 8004a0a:	b9ca      	cbnz	r2, 8004a40 <__hi0bits+0x3c>
 8004a0c:	0403      	lsls	r3, r0, #16
 8004a0e:	2010      	movs	r0, #16
 8004a10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004a14:	bf04      	itt	eq
 8004a16:	021b      	lsleq	r3, r3, #8
 8004a18:	3008      	addeq	r0, #8
 8004a1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a1e:	bf04      	itt	eq
 8004a20:	011b      	lsleq	r3, r3, #4
 8004a22:	3004      	addeq	r0, #4
 8004a24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a28:	bf04      	itt	eq
 8004a2a:	009b      	lsleq	r3, r3, #2
 8004a2c:	3002      	addeq	r0, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db05      	blt.n	8004a3e <__hi0bits+0x3a>
 8004a32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004a36:	f100 0001 	add.w	r0, r0, #1
 8004a3a:	bf08      	it	eq
 8004a3c:	2020      	moveq	r0, #32
 8004a3e:	4770      	bx	lr
 8004a40:	2000      	movs	r0, #0
 8004a42:	e7e5      	b.n	8004a10 <__hi0bits+0xc>

08004a44 <__lo0bits>:
 8004a44:	6803      	ldr	r3, [r0, #0]
 8004a46:	4602      	mov	r2, r0
 8004a48:	f013 0007 	ands.w	r0, r3, #7
 8004a4c:	d00b      	beq.n	8004a66 <__lo0bits+0x22>
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	d422      	bmi.n	8004a98 <__lo0bits+0x54>
 8004a52:	0798      	lsls	r0, r3, #30
 8004a54:	bf49      	itett	mi
 8004a56:	085b      	lsrmi	r3, r3, #1
 8004a58:	089b      	lsrpl	r3, r3, #2
 8004a5a:	2001      	movmi	r0, #1
 8004a5c:	6013      	strmi	r3, [r2, #0]
 8004a5e:	bf5c      	itt	pl
 8004a60:	2002      	movpl	r0, #2
 8004a62:	6013      	strpl	r3, [r2, #0]
 8004a64:	4770      	bx	lr
 8004a66:	b299      	uxth	r1, r3
 8004a68:	b909      	cbnz	r1, 8004a6e <__lo0bits+0x2a>
 8004a6a:	2010      	movs	r0, #16
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a72:	bf04      	itt	eq
 8004a74:	0a1b      	lsreq	r3, r3, #8
 8004a76:	3008      	addeq	r0, #8
 8004a78:	0719      	lsls	r1, r3, #28
 8004a7a:	bf04      	itt	eq
 8004a7c:	091b      	lsreq	r3, r3, #4
 8004a7e:	3004      	addeq	r0, #4
 8004a80:	0799      	lsls	r1, r3, #30
 8004a82:	bf04      	itt	eq
 8004a84:	089b      	lsreq	r3, r3, #2
 8004a86:	3002      	addeq	r0, #2
 8004a88:	07d9      	lsls	r1, r3, #31
 8004a8a:	d403      	bmi.n	8004a94 <__lo0bits+0x50>
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	f100 0001 	add.w	r0, r0, #1
 8004a92:	d003      	beq.n	8004a9c <__lo0bits+0x58>
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4770      	bx	lr
 8004a98:	2000      	movs	r0, #0
 8004a9a:	4770      	bx	lr
 8004a9c:	2020      	movs	r0, #32
 8004a9e:	4770      	bx	lr

08004aa0 <__i2b>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	f7ff ff01 	bl	80048ac <_Balloc>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	b928      	cbnz	r0, 8004aba <__i2b+0x1a>
 8004aae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ab2:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <__i2b+0x24>)
 8004ab4:	4804      	ldr	r0, [pc, #16]	; (8004ac8 <__i2b+0x28>)
 8004ab6:	f000 fc9b 	bl	80053f0 <__assert_func>
 8004aba:	2301      	movs	r3, #1
 8004abc:	6144      	str	r4, [r0, #20]
 8004abe:	6103      	str	r3, [r0, #16]
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	bf00      	nop
 8004ac4:	080060bf 	.word	0x080060bf
 8004ac8:	080060d0 	.word	0x080060d0

08004acc <__multiply>:
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	690a      	ldr	r2, [r1, #16]
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	bfbe      	ittt	lt
 8004adc:	460b      	movlt	r3, r1
 8004ade:	4625      	movlt	r5, r4
 8004ae0:	461c      	movlt	r4, r3
 8004ae2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004ae6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004aea:	68ab      	ldr	r3, [r5, #8]
 8004aec:	6869      	ldr	r1, [r5, #4]
 8004aee:	eb0a 0709 	add.w	r7, sl, r9
 8004af2:	42bb      	cmp	r3, r7
 8004af4:	b085      	sub	sp, #20
 8004af6:	bfb8      	it	lt
 8004af8:	3101      	addlt	r1, #1
 8004afa:	f7ff fed7 	bl	80048ac <_Balloc>
 8004afe:	b930      	cbnz	r0, 8004b0e <__multiply+0x42>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f240 115d 	movw	r1, #349	; 0x15d
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <__multiply+0x140>)
 8004b08:	4841      	ldr	r0, [pc, #260]	; (8004c10 <__multiply+0x144>)
 8004b0a:	f000 fc71 	bl	80053f0 <__assert_func>
 8004b0e:	f100 0614 	add.w	r6, r0, #20
 8004b12:	4633      	mov	r3, r6
 8004b14:	2200      	movs	r2, #0
 8004b16:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004b1a:	4543      	cmp	r3, r8
 8004b1c:	d31e      	bcc.n	8004b5c <__multiply+0x90>
 8004b1e:	f105 0c14 	add.w	ip, r5, #20
 8004b22:	f104 0314 	add.w	r3, r4, #20
 8004b26:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004b2a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004b2e:	9202      	str	r2, [sp, #8]
 8004b30:	ebac 0205 	sub.w	r2, ip, r5
 8004b34:	3a15      	subs	r2, #21
 8004b36:	f022 0203 	bic.w	r2, r2, #3
 8004b3a:	3204      	adds	r2, #4
 8004b3c:	f105 0115 	add.w	r1, r5, #21
 8004b40:	458c      	cmp	ip, r1
 8004b42:	bf38      	it	cc
 8004b44:	2204      	movcc	r2, #4
 8004b46:	9201      	str	r2, [sp, #4]
 8004b48:	9a02      	ldr	r2, [sp, #8]
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d808      	bhi.n	8004b62 <__multiply+0x96>
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	dc55      	bgt.n	8004c00 <__multiply+0x134>
 8004b54:	6107      	str	r7, [r0, #16]
 8004b56:	b005      	add	sp, #20
 8004b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	f843 2b04 	str.w	r2, [r3], #4
 8004b60:	e7db      	b.n	8004b1a <__multiply+0x4e>
 8004b62:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b66:	f1ba 0f00 	cmp.w	sl, #0
 8004b6a:	d020      	beq.n	8004bae <__multiply+0xe2>
 8004b6c:	46b1      	mov	r9, r6
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f105 0e14 	add.w	lr, r5, #20
 8004b74:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b78:	f8d9 b000 	ldr.w	fp, [r9]
 8004b7c:	b2a1      	uxth	r1, r4
 8004b7e:	fa1f fb8b 	uxth.w	fp, fp
 8004b82:	fb0a b101 	mla	r1, sl, r1, fp
 8004b86:	4411      	add	r1, r2
 8004b88:	f8d9 2000 	ldr.w	r2, [r9]
 8004b8c:	0c24      	lsrs	r4, r4, #16
 8004b8e:	0c12      	lsrs	r2, r2, #16
 8004b90:	fb0a 2404 	mla	r4, sl, r4, r2
 8004b94:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004b98:	b289      	uxth	r1, r1
 8004b9a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004b9e:	45f4      	cmp	ip, lr
 8004ba0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004ba4:	f849 1b04 	str.w	r1, [r9], #4
 8004ba8:	d8e4      	bhi.n	8004b74 <__multiply+0xa8>
 8004baa:	9901      	ldr	r1, [sp, #4]
 8004bac:	5072      	str	r2, [r6, r1]
 8004bae:	9a03      	ldr	r2, [sp, #12]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004bb6:	f1b9 0f00 	cmp.w	r9, #0
 8004bba:	d01f      	beq.n	8004bfc <__multiply+0x130>
 8004bbc:	46b6      	mov	lr, r6
 8004bbe:	f04f 0a00 	mov.w	sl, #0
 8004bc2:	6834      	ldr	r4, [r6, #0]
 8004bc4:	f105 0114 	add.w	r1, r5, #20
 8004bc8:	880a      	ldrh	r2, [r1, #0]
 8004bca:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004bce:	b2a4      	uxth	r4, r4
 8004bd0:	fb09 b202 	mla	r2, r9, r2, fp
 8004bd4:	4492      	add	sl, r2
 8004bd6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004bda:	f84e 4b04 	str.w	r4, [lr], #4
 8004bde:	f851 4b04 	ldr.w	r4, [r1], #4
 8004be2:	f8be 2000 	ldrh.w	r2, [lr]
 8004be6:	0c24      	lsrs	r4, r4, #16
 8004be8:	fb09 2404 	mla	r4, r9, r4, r2
 8004bec:	458c      	cmp	ip, r1
 8004bee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004bf2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004bf6:	d8e7      	bhi.n	8004bc8 <__multiply+0xfc>
 8004bf8:	9a01      	ldr	r2, [sp, #4]
 8004bfa:	50b4      	str	r4, [r6, r2]
 8004bfc:	3604      	adds	r6, #4
 8004bfe:	e7a3      	b.n	8004b48 <__multiply+0x7c>
 8004c00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1a5      	bne.n	8004b54 <__multiply+0x88>
 8004c08:	3f01      	subs	r7, #1
 8004c0a:	e7a1      	b.n	8004b50 <__multiply+0x84>
 8004c0c:	080060bf 	.word	0x080060bf
 8004c10:	080060d0 	.word	0x080060d0

08004c14 <__pow5mult>:
 8004c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c18:	4615      	mov	r5, r2
 8004c1a:	f012 0203 	ands.w	r2, r2, #3
 8004c1e:	4606      	mov	r6, r0
 8004c20:	460f      	mov	r7, r1
 8004c22:	d007      	beq.n	8004c34 <__pow5mult+0x20>
 8004c24:	4c25      	ldr	r4, [pc, #148]	; (8004cbc <__pow5mult+0xa8>)
 8004c26:	3a01      	subs	r2, #1
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c2e:	f7ff fe9f 	bl	8004970 <__multadd>
 8004c32:	4607      	mov	r7, r0
 8004c34:	10ad      	asrs	r5, r5, #2
 8004c36:	d03d      	beq.n	8004cb4 <__pow5mult+0xa0>
 8004c38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c3a:	b97c      	cbnz	r4, 8004c5c <__pow5mult+0x48>
 8004c3c:	2010      	movs	r0, #16
 8004c3e:	f7ff fe11 	bl	8004864 <malloc>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6270      	str	r0, [r6, #36]	; 0x24
 8004c46:	b928      	cbnz	r0, 8004c54 <__pow5mult+0x40>
 8004c48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <__pow5mult+0xac>)
 8004c4e:	481d      	ldr	r0, [pc, #116]	; (8004cc4 <__pow5mult+0xb0>)
 8004c50:	f000 fbce 	bl	80053f0 <__assert_func>
 8004c54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c58:	6004      	str	r4, [r0, #0]
 8004c5a:	60c4      	str	r4, [r0, #12]
 8004c5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c64:	b94c      	cbnz	r4, 8004c7a <__pow5mult+0x66>
 8004c66:	f240 2171 	movw	r1, #625	; 0x271
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff ff18 	bl	8004aa0 <__i2b>
 8004c70:	2300      	movs	r3, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c78:	6003      	str	r3, [r0, #0]
 8004c7a:	f04f 0900 	mov.w	r9, #0
 8004c7e:	07eb      	lsls	r3, r5, #31
 8004c80:	d50a      	bpl.n	8004c98 <__pow5mult+0x84>
 8004c82:	4639      	mov	r1, r7
 8004c84:	4622      	mov	r2, r4
 8004c86:	4630      	mov	r0, r6
 8004c88:	f7ff ff20 	bl	8004acc <__multiply>
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	4639      	mov	r1, r7
 8004c90:	4630      	mov	r0, r6
 8004c92:	f7ff fe4b 	bl	800492c <_Bfree>
 8004c96:	4647      	mov	r7, r8
 8004c98:	106d      	asrs	r5, r5, #1
 8004c9a:	d00b      	beq.n	8004cb4 <__pow5mult+0xa0>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	b938      	cbnz	r0, 8004cb0 <__pow5mult+0x9c>
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f7ff ff11 	bl	8004acc <__multiply>
 8004caa:	6020      	str	r0, [r4, #0]
 8004cac:	f8c0 9000 	str.w	r9, [r0]
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	e7e4      	b.n	8004c7e <__pow5mult+0x6a>
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cba:	bf00      	nop
 8004cbc:	08006220 	.word	0x08006220
 8004cc0:	08006049 	.word	0x08006049
 8004cc4:	080060d0 	.word	0x080060d0

08004cc8 <__lshift>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4607      	mov	r7, r0
 8004cd0:	4691      	mov	r9, r2
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	6849      	ldr	r1, [r1, #4]
 8004cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ce0:	f108 0601 	add.w	r6, r8, #1
 8004ce4:	42b3      	cmp	r3, r6
 8004ce6:	db0b      	blt.n	8004d00 <__lshift+0x38>
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff fddf 	bl	80048ac <_Balloc>
 8004cee:	4605      	mov	r5, r0
 8004cf0:	b948      	cbnz	r0, 8004d06 <__lshift+0x3e>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <__lshift+0xd0>)
 8004cfa:	4828      	ldr	r0, [pc, #160]	; (8004d9c <__lshift+0xd4>)
 8004cfc:	f000 fb78 	bl	80053f0 <__assert_func>
 8004d00:	3101      	adds	r1, #1
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	e7ee      	b.n	8004ce4 <__lshift+0x1c>
 8004d06:	2300      	movs	r3, #0
 8004d08:	f100 0114 	add.w	r1, r0, #20
 8004d0c:	f100 0210 	add.w	r2, r0, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	4553      	cmp	r3, sl
 8004d14:	db33      	blt.n	8004d7e <__lshift+0xb6>
 8004d16:	6920      	ldr	r0, [r4, #16]
 8004d18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d1c:	f104 0314 	add.w	r3, r4, #20
 8004d20:	f019 091f 	ands.w	r9, r9, #31
 8004d24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d2c:	d02b      	beq.n	8004d86 <__lshift+0xbe>
 8004d2e:	468a      	mov	sl, r1
 8004d30:	2200      	movs	r2, #0
 8004d32:	f1c9 0e20 	rsb	lr, r9, #32
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	fa00 f009 	lsl.w	r0, r0, r9
 8004d3c:	4302      	orrs	r2, r0
 8004d3e:	f84a 2b04 	str.w	r2, [sl], #4
 8004d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d46:	459c      	cmp	ip, r3
 8004d48:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d4c:	d8f3      	bhi.n	8004d36 <__lshift+0x6e>
 8004d4e:	ebac 0304 	sub.w	r3, ip, r4
 8004d52:	3b15      	subs	r3, #21
 8004d54:	f023 0303 	bic.w	r3, r3, #3
 8004d58:	3304      	adds	r3, #4
 8004d5a:	f104 0015 	add.w	r0, r4, #21
 8004d5e:	4584      	cmp	ip, r0
 8004d60:	bf38      	it	cc
 8004d62:	2304      	movcc	r3, #4
 8004d64:	50ca      	str	r2, [r1, r3]
 8004d66:	b10a      	cbz	r2, 8004d6c <__lshift+0xa4>
 8004d68:	f108 0602 	add.w	r6, r8, #2
 8004d6c:	3e01      	subs	r6, #1
 8004d6e:	4638      	mov	r0, r7
 8004d70:	4621      	mov	r1, r4
 8004d72:	612e      	str	r6, [r5, #16]
 8004d74:	f7ff fdda 	bl	800492c <_Bfree>
 8004d78:	4628      	mov	r0, r5
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d82:	3301      	adds	r3, #1
 8004d84:	e7c5      	b.n	8004d12 <__lshift+0x4a>
 8004d86:	3904      	subs	r1, #4
 8004d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8c:	459c      	cmp	ip, r3
 8004d8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d92:	d8f9      	bhi.n	8004d88 <__lshift+0xc0>
 8004d94:	e7ea      	b.n	8004d6c <__lshift+0xa4>
 8004d96:	bf00      	nop
 8004d98:	080060bf 	.word	0x080060bf
 8004d9c:	080060d0 	.word	0x080060d0

08004da0 <__mcmp>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	690a      	ldr	r2, [r1, #16]
 8004da4:	6900      	ldr	r0, [r0, #16]
 8004da6:	b530      	push	{r4, r5, lr}
 8004da8:	1a80      	subs	r0, r0, r2
 8004daa:	d10d      	bne.n	8004dc8 <__mcmp+0x28>
 8004dac:	3314      	adds	r3, #20
 8004dae:	3114      	adds	r1, #20
 8004db0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004db4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004dc0:	4295      	cmp	r5, r2
 8004dc2:	d002      	beq.n	8004dca <__mcmp+0x2a>
 8004dc4:	d304      	bcc.n	8004dd0 <__mcmp+0x30>
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	bd30      	pop	{r4, r5, pc}
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	d3f4      	bcc.n	8004db8 <__mcmp+0x18>
 8004dce:	e7fb      	b.n	8004dc8 <__mcmp+0x28>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	e7f8      	b.n	8004dc8 <__mcmp+0x28>
	...

08004dd8 <__mdiff>:
 8004dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	460c      	mov	r4, r1
 8004dde:	4606      	mov	r6, r0
 8004de0:	4611      	mov	r1, r2
 8004de2:	4620      	mov	r0, r4
 8004de4:	4692      	mov	sl, r2
 8004de6:	f7ff ffdb 	bl	8004da0 <__mcmp>
 8004dea:	1e05      	subs	r5, r0, #0
 8004dec:	d111      	bne.n	8004e12 <__mdiff+0x3a>
 8004dee:	4629      	mov	r1, r5
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff fd5b 	bl	80048ac <_Balloc>
 8004df6:	4602      	mov	r2, r0
 8004df8:	b928      	cbnz	r0, 8004e06 <__mdiff+0x2e>
 8004dfa:	f240 2132 	movw	r1, #562	; 0x232
 8004dfe:	4b3c      	ldr	r3, [pc, #240]	; (8004ef0 <__mdiff+0x118>)
 8004e00:	483c      	ldr	r0, [pc, #240]	; (8004ef4 <__mdiff+0x11c>)
 8004e02:	f000 faf5 	bl	80053f0 <__assert_func>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	bfa4      	itt	ge
 8004e14:	4653      	movge	r3, sl
 8004e16:	46a2      	movge	sl, r4
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004e1e:	bfa6      	itte	ge
 8004e20:	461c      	movge	r4, r3
 8004e22:	2500      	movge	r5, #0
 8004e24:	2501      	movlt	r5, #1
 8004e26:	f7ff fd41 	bl	80048ac <_Balloc>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	b918      	cbnz	r0, 8004e36 <__mdiff+0x5e>
 8004e2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e32:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <__mdiff+0x118>)
 8004e34:	e7e4      	b.n	8004e00 <__mdiff+0x28>
 8004e36:	f100 0814 	add.w	r8, r0, #20
 8004e3a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004e3e:	60c5      	str	r5, [r0, #12]
 8004e40:	f04f 0c00 	mov.w	ip, #0
 8004e44:	f10a 0514 	add.w	r5, sl, #20
 8004e48:	f10a 0010 	add.w	r0, sl, #16
 8004e4c:	46c2      	mov	sl, r8
 8004e4e:	6926      	ldr	r6, [r4, #16]
 8004e50:	f104 0914 	add.w	r9, r4, #20
 8004e54:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004e58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e5c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004e60:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e64:	fa1f f18b 	uxth.w	r1, fp
 8004e68:	4461      	add	r1, ip
 8004e6a:	fa1f fc83 	uxth.w	ip, r3
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	eba1 010c 	sub.w	r1, r1, ip
 8004e74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004e7c:	b289      	uxth	r1, r1
 8004e7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004e82:	454e      	cmp	r6, r9
 8004e84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004e88:	f84a 3b04 	str.w	r3, [sl], #4
 8004e8c:	d8e6      	bhi.n	8004e5c <__mdiff+0x84>
 8004e8e:	1b33      	subs	r3, r6, r4
 8004e90:	3b15      	subs	r3, #21
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	3415      	adds	r4, #21
 8004e98:	3304      	adds	r3, #4
 8004e9a:	42a6      	cmp	r6, r4
 8004e9c:	bf38      	it	cc
 8004e9e:	2304      	movcc	r3, #4
 8004ea0:	441d      	add	r5, r3
 8004ea2:	4443      	add	r3, r8
 8004ea4:	461e      	mov	r6, r3
 8004ea6:	462c      	mov	r4, r5
 8004ea8:	4574      	cmp	r4, lr
 8004eaa:	d30e      	bcc.n	8004eca <__mdiff+0xf2>
 8004eac:	f10e 0103 	add.w	r1, lr, #3
 8004eb0:	1b49      	subs	r1, r1, r5
 8004eb2:	f021 0103 	bic.w	r1, r1, #3
 8004eb6:	3d03      	subs	r5, #3
 8004eb8:	45ae      	cmp	lr, r5
 8004eba:	bf38      	it	cc
 8004ebc:	2100      	movcc	r1, #0
 8004ebe:	4419      	add	r1, r3
 8004ec0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ec4:	b18b      	cbz	r3, 8004eea <__mdiff+0x112>
 8004ec6:	6117      	str	r7, [r2, #16]
 8004ec8:	e7a0      	b.n	8004e0c <__mdiff+0x34>
 8004eca:	f854 8b04 	ldr.w	r8, [r4], #4
 8004ece:	fa1f f188 	uxth.w	r1, r8
 8004ed2:	4461      	add	r1, ip
 8004ed4:	1408      	asrs	r0, r1, #16
 8004ed6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004eda:	b289      	uxth	r1, r1
 8004edc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004ee0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ee4:	f846 1b04 	str.w	r1, [r6], #4
 8004ee8:	e7de      	b.n	8004ea8 <__mdiff+0xd0>
 8004eea:	3f01      	subs	r7, #1
 8004eec:	e7e8      	b.n	8004ec0 <__mdiff+0xe8>
 8004eee:	bf00      	nop
 8004ef0:	080060bf 	.word	0x080060bf
 8004ef4:	080060d0 	.word	0x080060d0

08004ef8 <__d2b>:
 8004ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004efc:	2101      	movs	r1, #1
 8004efe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004f02:	4690      	mov	r8, r2
 8004f04:	461d      	mov	r5, r3
 8004f06:	f7ff fcd1 	bl	80048ac <_Balloc>
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	b930      	cbnz	r0, 8004f1c <__d2b+0x24>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	f240 310a 	movw	r1, #778	; 0x30a
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <__d2b+0xb0>)
 8004f16:	4825      	ldr	r0, [pc, #148]	; (8004fac <__d2b+0xb4>)
 8004f18:	f000 fa6a 	bl	80053f0 <__assert_func>
 8004f1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004f20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004f24:	bb2d      	cbnz	r5, 8004f72 <__d2b+0x7a>
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	f1b8 0300 	subs.w	r3, r8, #0
 8004f2c:	d026      	beq.n	8004f7c <__d2b+0x84>
 8004f2e:	4668      	mov	r0, sp
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	f7ff fd87 	bl	8004a44 <__lo0bits>
 8004f36:	9900      	ldr	r1, [sp, #0]
 8004f38:	b1f0      	cbz	r0, 8004f78 <__d2b+0x80>
 8004f3a:	9a01      	ldr	r2, [sp, #4]
 8004f3c:	f1c0 0320 	rsb	r3, r0, #32
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	430b      	orrs	r3, r1
 8004f46:	40c2      	lsrs	r2, r0
 8004f48:	6163      	str	r3, [r4, #20]
 8004f4a:	9201      	str	r2, [sp, #4]
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2102      	movne	r1, #2
 8004f54:	2101      	moveq	r1, #1
 8004f56:	61a3      	str	r3, [r4, #24]
 8004f58:	6121      	str	r1, [r4, #16]
 8004f5a:	b1c5      	cbz	r5, 8004f8e <__d2b+0x96>
 8004f5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f60:	4405      	add	r5, r0
 8004f62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f66:	603d      	str	r5, [r7, #0]
 8004f68:	6030      	str	r0, [r6, #0]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	b002      	add	sp, #8
 8004f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f76:	e7d6      	b.n	8004f26 <__d2b+0x2e>
 8004f78:	6161      	str	r1, [r4, #20]
 8004f7a:	e7e7      	b.n	8004f4c <__d2b+0x54>
 8004f7c:	a801      	add	r0, sp, #4
 8004f7e:	f7ff fd61 	bl	8004a44 <__lo0bits>
 8004f82:	2101      	movs	r1, #1
 8004f84:	9b01      	ldr	r3, [sp, #4]
 8004f86:	6121      	str	r1, [r4, #16]
 8004f88:	6163      	str	r3, [r4, #20]
 8004f8a:	3020      	adds	r0, #32
 8004f8c:	e7e5      	b.n	8004f5a <__d2b+0x62>
 8004f8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004f92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f96:	6038      	str	r0, [r7, #0]
 8004f98:	6918      	ldr	r0, [r3, #16]
 8004f9a:	f7ff fd33 	bl	8004a04 <__hi0bits>
 8004f9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004fa2:	6031      	str	r1, [r6, #0]
 8004fa4:	e7e1      	b.n	8004f6a <__d2b+0x72>
 8004fa6:	bf00      	nop
 8004fa8:	080060bf 	.word	0x080060bf
 8004fac:	080060d0 	.word	0x080060d0

08004fb0 <_calloc_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	fb02 f501 	mul.w	r5, r2, r1
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f000 f854 	bl	8005064 <_malloc_r>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	b118      	cbz	r0, 8004fc8 <_calloc_r+0x18>
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	f7fe f944 	bl	8003250 <memset>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bd38      	pop	{r3, r4, r5, pc}

08004fcc <_free_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4605      	mov	r5, r0
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	d043      	beq.n	800505c <_free_r+0x90>
 8004fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd8:	1f0c      	subs	r4, r1, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bfb8      	it	lt
 8004fde:	18e4      	addlt	r4, r4, r3
 8004fe0:	f000 fa62 	bl	80054a8 <__malloc_lock>
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <_free_r+0x94>)
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	4610      	mov	r0, r2
 8004fea:	b933      	cbnz	r3, 8004ffa <_free_r+0x2e>
 8004fec:	6063      	str	r3, [r4, #4]
 8004fee:	6014      	str	r4, [r2, #0]
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ff6:	f000 ba5d 	b.w	80054b4 <__malloc_unlock>
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	d90a      	bls.n	8005014 <_free_r+0x48>
 8004ffe:	6821      	ldr	r1, [r4, #0]
 8005000:	1862      	adds	r2, r4, r1
 8005002:	4293      	cmp	r3, r2
 8005004:	bf01      	itttt	eq
 8005006:	681a      	ldreq	r2, [r3, #0]
 8005008:	685b      	ldreq	r3, [r3, #4]
 800500a:	1852      	addeq	r2, r2, r1
 800500c:	6022      	streq	r2, [r4, #0]
 800500e:	6063      	str	r3, [r4, #4]
 8005010:	6004      	str	r4, [r0, #0]
 8005012:	e7ed      	b.n	8004ff0 <_free_r+0x24>
 8005014:	461a      	mov	r2, r3
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	b10b      	cbz	r3, 800501e <_free_r+0x52>
 800501a:	42a3      	cmp	r3, r4
 800501c:	d9fa      	bls.n	8005014 <_free_r+0x48>
 800501e:	6811      	ldr	r1, [r2, #0]
 8005020:	1850      	adds	r0, r2, r1
 8005022:	42a0      	cmp	r0, r4
 8005024:	d10b      	bne.n	800503e <_free_r+0x72>
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	4401      	add	r1, r0
 800502a:	1850      	adds	r0, r2, r1
 800502c:	4283      	cmp	r3, r0
 800502e:	6011      	str	r1, [r2, #0]
 8005030:	d1de      	bne.n	8004ff0 <_free_r+0x24>
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4401      	add	r1, r0
 8005038:	6011      	str	r1, [r2, #0]
 800503a:	6053      	str	r3, [r2, #4]
 800503c:	e7d8      	b.n	8004ff0 <_free_r+0x24>
 800503e:	d902      	bls.n	8005046 <_free_r+0x7a>
 8005040:	230c      	movs	r3, #12
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	e7d4      	b.n	8004ff0 <_free_r+0x24>
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1821      	adds	r1, r4, r0
 800504a:	428b      	cmp	r3, r1
 800504c:	bf01      	itttt	eq
 800504e:	6819      	ldreq	r1, [r3, #0]
 8005050:	685b      	ldreq	r3, [r3, #4]
 8005052:	1809      	addeq	r1, r1, r0
 8005054:	6021      	streq	r1, [r4, #0]
 8005056:	6063      	str	r3, [r4, #4]
 8005058:	6054      	str	r4, [r2, #4]
 800505a:	e7c9      	b.n	8004ff0 <_free_r+0x24>
 800505c:	bd38      	pop	{r3, r4, r5, pc}
 800505e:	bf00      	nop
 8005060:	2000021c 	.word	0x2000021c

08005064 <_malloc_r>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	1ccd      	adds	r5, r1, #3
 8005068:	f025 0503 	bic.w	r5, r5, #3
 800506c:	3508      	adds	r5, #8
 800506e:	2d0c      	cmp	r5, #12
 8005070:	bf38      	it	cc
 8005072:	250c      	movcc	r5, #12
 8005074:	2d00      	cmp	r5, #0
 8005076:	4606      	mov	r6, r0
 8005078:	db01      	blt.n	800507e <_malloc_r+0x1a>
 800507a:	42a9      	cmp	r1, r5
 800507c:	d903      	bls.n	8005086 <_malloc_r+0x22>
 800507e:	230c      	movs	r3, #12
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	2000      	movs	r0, #0
 8005084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005086:	f000 fa0f 	bl	80054a8 <__malloc_lock>
 800508a:	4921      	ldr	r1, [pc, #132]	; (8005110 <_malloc_r+0xac>)
 800508c:	680a      	ldr	r2, [r1, #0]
 800508e:	4614      	mov	r4, r2
 8005090:	b99c      	cbnz	r4, 80050ba <_malloc_r+0x56>
 8005092:	4f20      	ldr	r7, [pc, #128]	; (8005114 <_malloc_r+0xb0>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b923      	cbnz	r3, 80050a2 <_malloc_r+0x3e>
 8005098:	4621      	mov	r1, r4
 800509a:	4630      	mov	r0, r6
 800509c:	f000 f998 	bl	80053d0 <_sbrk_r>
 80050a0:	6038      	str	r0, [r7, #0]
 80050a2:	4629      	mov	r1, r5
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 f993 	bl	80053d0 <_sbrk_r>
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d123      	bne.n	80050f6 <_malloc_r+0x92>
 80050ae:	230c      	movs	r3, #12
 80050b0:	4630      	mov	r0, r6
 80050b2:	6033      	str	r3, [r6, #0]
 80050b4:	f000 f9fe 	bl	80054b4 <__malloc_unlock>
 80050b8:	e7e3      	b.n	8005082 <_malloc_r+0x1e>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	1b5b      	subs	r3, r3, r5
 80050be:	d417      	bmi.n	80050f0 <_malloc_r+0x8c>
 80050c0:	2b0b      	cmp	r3, #11
 80050c2:	d903      	bls.n	80050cc <_malloc_r+0x68>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	441c      	add	r4, r3
 80050c8:	6025      	str	r5, [r4, #0]
 80050ca:	e004      	b.n	80050d6 <_malloc_r+0x72>
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	42a2      	cmp	r2, r4
 80050d0:	bf0c      	ite	eq
 80050d2:	600b      	streq	r3, [r1, #0]
 80050d4:	6053      	strne	r3, [r2, #4]
 80050d6:	4630      	mov	r0, r6
 80050d8:	f000 f9ec 	bl	80054b4 <__malloc_unlock>
 80050dc:	f104 000b 	add.w	r0, r4, #11
 80050e0:	1d23      	adds	r3, r4, #4
 80050e2:	f020 0007 	bic.w	r0, r0, #7
 80050e6:	1ac2      	subs	r2, r0, r3
 80050e8:	d0cc      	beq.n	8005084 <_malloc_r+0x20>
 80050ea:	1a1b      	subs	r3, r3, r0
 80050ec:	50a3      	str	r3, [r4, r2]
 80050ee:	e7c9      	b.n	8005084 <_malloc_r+0x20>
 80050f0:	4622      	mov	r2, r4
 80050f2:	6864      	ldr	r4, [r4, #4]
 80050f4:	e7cc      	b.n	8005090 <_malloc_r+0x2c>
 80050f6:	1cc4      	adds	r4, r0, #3
 80050f8:	f024 0403 	bic.w	r4, r4, #3
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d0e3      	beq.n	80050c8 <_malloc_r+0x64>
 8005100:	1a21      	subs	r1, r4, r0
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f964 	bl	80053d0 <_sbrk_r>
 8005108:	3001      	adds	r0, #1
 800510a:	d1dd      	bne.n	80050c8 <_malloc_r+0x64>
 800510c:	e7cf      	b.n	80050ae <_malloc_r+0x4a>
 800510e:	bf00      	nop
 8005110:	2000021c 	.word	0x2000021c
 8005114:	20000220 	.word	0x20000220

08005118 <__ssputs_r>:
 8005118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	688e      	ldr	r6, [r1, #8]
 800511e:	4682      	mov	sl, r0
 8005120:	429e      	cmp	r6, r3
 8005122:	460c      	mov	r4, r1
 8005124:	4690      	mov	r8, r2
 8005126:	461f      	mov	r7, r3
 8005128:	d838      	bhi.n	800519c <__ssputs_r+0x84>
 800512a:	898a      	ldrh	r2, [r1, #12]
 800512c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005130:	d032      	beq.n	8005198 <__ssputs_r+0x80>
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	6909      	ldr	r1, [r1, #16]
 8005136:	3301      	adds	r3, #1
 8005138:	eba5 0901 	sub.w	r9, r5, r1
 800513c:	6965      	ldr	r5, [r4, #20]
 800513e:	444b      	add	r3, r9
 8005140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005148:	106d      	asrs	r5, r5, #1
 800514a:	429d      	cmp	r5, r3
 800514c:	bf38      	it	cc
 800514e:	461d      	movcc	r5, r3
 8005150:	0553      	lsls	r3, r2, #21
 8005152:	d531      	bpl.n	80051b8 <__ssputs_r+0xa0>
 8005154:	4629      	mov	r1, r5
 8005156:	f7ff ff85 	bl	8005064 <_malloc_r>
 800515a:	4606      	mov	r6, r0
 800515c:	b950      	cbnz	r0, 8005174 <__ssputs_r+0x5c>
 800515e:	230c      	movs	r3, #12
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	f8ca 3000 	str.w	r3, [sl]
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516e:	81a3      	strh	r3, [r4, #12]
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005174:	464a      	mov	r2, r9
 8005176:	6921      	ldr	r1, [r4, #16]
 8005178:	f7ff fb8a 	bl	8004890 <memcpy>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	6126      	str	r6, [r4, #16]
 800518a:	444e      	add	r6, r9
 800518c:	6026      	str	r6, [r4, #0]
 800518e:	463e      	mov	r6, r7
 8005190:	6165      	str	r5, [r4, #20]
 8005192:	eba5 0509 	sub.w	r5, r5, r9
 8005196:	60a5      	str	r5, [r4, #8]
 8005198:	42be      	cmp	r6, r7
 800519a:	d900      	bls.n	800519e <__ssputs_r+0x86>
 800519c:	463e      	mov	r6, r7
 800519e:	4632      	mov	r2, r6
 80051a0:	4641      	mov	r1, r8
 80051a2:	6820      	ldr	r0, [r4, #0]
 80051a4:	f000 f966 	bl	8005474 <memmove>
 80051a8:	68a3      	ldr	r3, [r4, #8]
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	1b9b      	subs	r3, r3, r6
 80051ae:	4432      	add	r2, r6
 80051b0:	2000      	movs	r0, #0
 80051b2:	60a3      	str	r3, [r4, #8]
 80051b4:	6022      	str	r2, [r4, #0]
 80051b6:	e7db      	b.n	8005170 <__ssputs_r+0x58>
 80051b8:	462a      	mov	r2, r5
 80051ba:	f000 f981 	bl	80054c0 <_realloc_r>
 80051be:	4606      	mov	r6, r0
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d1e1      	bne.n	8005188 <__ssputs_r+0x70>
 80051c4:	4650      	mov	r0, sl
 80051c6:	6921      	ldr	r1, [r4, #16]
 80051c8:	f7ff ff00 	bl	8004fcc <_free_r>
 80051cc:	e7c7      	b.n	800515e <__ssputs_r+0x46>
	...

080051d0 <_svfiprintf_r>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	4698      	mov	r8, r3
 80051d6:	898b      	ldrh	r3, [r1, #12]
 80051d8:	4607      	mov	r7, r0
 80051da:	061b      	lsls	r3, r3, #24
 80051dc:	460d      	mov	r5, r1
 80051de:	4614      	mov	r4, r2
 80051e0:	b09d      	sub	sp, #116	; 0x74
 80051e2:	d50e      	bpl.n	8005202 <_svfiprintf_r+0x32>
 80051e4:	690b      	ldr	r3, [r1, #16]
 80051e6:	b963      	cbnz	r3, 8005202 <_svfiprintf_r+0x32>
 80051e8:	2140      	movs	r1, #64	; 0x40
 80051ea:	f7ff ff3b 	bl	8005064 <_malloc_r>
 80051ee:	6028      	str	r0, [r5, #0]
 80051f0:	6128      	str	r0, [r5, #16]
 80051f2:	b920      	cbnz	r0, 80051fe <_svfiprintf_r+0x2e>
 80051f4:	230c      	movs	r3, #12
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	e0d1      	b.n	80053a2 <_svfiprintf_r+0x1d2>
 80051fe:	2340      	movs	r3, #64	; 0x40
 8005200:	616b      	str	r3, [r5, #20]
 8005202:	2300      	movs	r3, #0
 8005204:	9309      	str	r3, [sp, #36]	; 0x24
 8005206:	2320      	movs	r3, #32
 8005208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800520c:	2330      	movs	r3, #48	; 0x30
 800520e:	f04f 0901 	mov.w	r9, #1
 8005212:	f8cd 800c 	str.w	r8, [sp, #12]
 8005216:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053bc <_svfiprintf_r+0x1ec>
 800521a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800521e:	4623      	mov	r3, r4
 8005220:	469a      	mov	sl, r3
 8005222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005226:	b10a      	cbz	r2, 800522c <_svfiprintf_r+0x5c>
 8005228:	2a25      	cmp	r2, #37	; 0x25
 800522a:	d1f9      	bne.n	8005220 <_svfiprintf_r+0x50>
 800522c:	ebba 0b04 	subs.w	fp, sl, r4
 8005230:	d00b      	beq.n	800524a <_svfiprintf_r+0x7a>
 8005232:	465b      	mov	r3, fp
 8005234:	4622      	mov	r2, r4
 8005236:	4629      	mov	r1, r5
 8005238:	4638      	mov	r0, r7
 800523a:	f7ff ff6d 	bl	8005118 <__ssputs_r>
 800523e:	3001      	adds	r0, #1
 8005240:	f000 80aa 	beq.w	8005398 <_svfiprintf_r+0x1c8>
 8005244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005246:	445a      	add	r2, fp
 8005248:	9209      	str	r2, [sp, #36]	; 0x24
 800524a:	f89a 3000 	ldrb.w	r3, [sl]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80a2 	beq.w	8005398 <_svfiprintf_r+0x1c8>
 8005254:	2300      	movs	r3, #0
 8005256:	f04f 32ff 	mov.w	r2, #4294967295
 800525a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800525e:	f10a 0a01 	add.w	sl, sl, #1
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	9307      	str	r3, [sp, #28]
 8005266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800526a:	931a      	str	r3, [sp, #104]	; 0x68
 800526c:	4654      	mov	r4, sl
 800526e:	2205      	movs	r2, #5
 8005270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005274:	4851      	ldr	r0, [pc, #324]	; (80053bc <_svfiprintf_r+0x1ec>)
 8005276:	f7ff fafd 	bl	8004874 <memchr>
 800527a:	9a04      	ldr	r2, [sp, #16]
 800527c:	b9d8      	cbnz	r0, 80052b6 <_svfiprintf_r+0xe6>
 800527e:	06d0      	lsls	r0, r2, #27
 8005280:	bf44      	itt	mi
 8005282:	2320      	movmi	r3, #32
 8005284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005288:	0711      	lsls	r1, r2, #28
 800528a:	bf44      	itt	mi
 800528c:	232b      	movmi	r3, #43	; 0x2b
 800528e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005292:	f89a 3000 	ldrb.w	r3, [sl]
 8005296:	2b2a      	cmp	r3, #42	; 0x2a
 8005298:	d015      	beq.n	80052c6 <_svfiprintf_r+0xf6>
 800529a:	4654      	mov	r4, sl
 800529c:	2000      	movs	r0, #0
 800529e:	f04f 0c0a 	mov.w	ip, #10
 80052a2:	9a07      	ldr	r2, [sp, #28]
 80052a4:	4621      	mov	r1, r4
 80052a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052aa:	3b30      	subs	r3, #48	; 0x30
 80052ac:	2b09      	cmp	r3, #9
 80052ae:	d94e      	bls.n	800534e <_svfiprintf_r+0x17e>
 80052b0:	b1b0      	cbz	r0, 80052e0 <_svfiprintf_r+0x110>
 80052b2:	9207      	str	r2, [sp, #28]
 80052b4:	e014      	b.n	80052e0 <_svfiprintf_r+0x110>
 80052b6:	eba0 0308 	sub.w	r3, r0, r8
 80052ba:	fa09 f303 	lsl.w	r3, r9, r3
 80052be:	4313      	orrs	r3, r2
 80052c0:	46a2      	mov	sl, r4
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	e7d2      	b.n	800526c <_svfiprintf_r+0x9c>
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	1d19      	adds	r1, r3, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	9103      	str	r1, [sp, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bfbb      	ittet	lt
 80052d2:	425b      	neglt	r3, r3
 80052d4:	f042 0202 	orrlt.w	r2, r2, #2
 80052d8:	9307      	strge	r3, [sp, #28]
 80052da:	9307      	strlt	r3, [sp, #28]
 80052dc:	bfb8      	it	lt
 80052de:	9204      	strlt	r2, [sp, #16]
 80052e0:	7823      	ldrb	r3, [r4, #0]
 80052e2:	2b2e      	cmp	r3, #46	; 0x2e
 80052e4:	d10c      	bne.n	8005300 <_svfiprintf_r+0x130>
 80052e6:	7863      	ldrb	r3, [r4, #1]
 80052e8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ea:	d135      	bne.n	8005358 <_svfiprintf_r+0x188>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	3402      	adds	r4, #2
 80052f0:	1d1a      	adds	r2, r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	9203      	str	r2, [sp, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053cc <_svfiprintf_r+0x1fc>
 8005304:	2203      	movs	r2, #3
 8005306:	4650      	mov	r0, sl
 8005308:	7821      	ldrb	r1, [r4, #0]
 800530a:	f7ff fab3 	bl	8004874 <memchr>
 800530e:	b140      	cbz	r0, 8005322 <_svfiprintf_r+0x152>
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	eba0 000a 	sub.w	r0, r0, sl
 8005316:	fa03 f000 	lsl.w	r0, r3, r0
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	3401      	adds	r4, #1
 800531e:	4303      	orrs	r3, r0
 8005320:	9304      	str	r3, [sp, #16]
 8005322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005326:	2206      	movs	r2, #6
 8005328:	4825      	ldr	r0, [pc, #148]	; (80053c0 <_svfiprintf_r+0x1f0>)
 800532a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800532e:	f7ff faa1 	bl	8004874 <memchr>
 8005332:	2800      	cmp	r0, #0
 8005334:	d038      	beq.n	80053a8 <_svfiprintf_r+0x1d8>
 8005336:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <_svfiprintf_r+0x1f4>)
 8005338:	bb1b      	cbnz	r3, 8005382 <_svfiprintf_r+0x1b2>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	3307      	adds	r3, #7
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	3308      	adds	r3, #8
 8005344:	9303      	str	r3, [sp, #12]
 8005346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005348:	4433      	add	r3, r6
 800534a:	9309      	str	r3, [sp, #36]	; 0x24
 800534c:	e767      	b.n	800521e <_svfiprintf_r+0x4e>
 800534e:	460c      	mov	r4, r1
 8005350:	2001      	movs	r0, #1
 8005352:	fb0c 3202 	mla	r2, ip, r2, r3
 8005356:	e7a5      	b.n	80052a4 <_svfiprintf_r+0xd4>
 8005358:	2300      	movs	r3, #0
 800535a:	f04f 0c0a 	mov.w	ip, #10
 800535e:	4619      	mov	r1, r3
 8005360:	3401      	adds	r4, #1
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	4620      	mov	r0, r4
 8005366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800536a:	3a30      	subs	r2, #48	; 0x30
 800536c:	2a09      	cmp	r2, #9
 800536e:	d903      	bls.n	8005378 <_svfiprintf_r+0x1a8>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0c5      	beq.n	8005300 <_svfiprintf_r+0x130>
 8005374:	9105      	str	r1, [sp, #20]
 8005376:	e7c3      	b.n	8005300 <_svfiprintf_r+0x130>
 8005378:	4604      	mov	r4, r0
 800537a:	2301      	movs	r3, #1
 800537c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005380:	e7f0      	b.n	8005364 <_svfiprintf_r+0x194>
 8005382:	ab03      	add	r3, sp, #12
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	462a      	mov	r2, r5
 8005388:	4638      	mov	r0, r7
 800538a:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <_svfiprintf_r+0x1f8>)
 800538c:	a904      	add	r1, sp, #16
 800538e:	f7fe f805 	bl	800339c <_printf_float>
 8005392:	1c42      	adds	r2, r0, #1
 8005394:	4606      	mov	r6, r0
 8005396:	d1d6      	bne.n	8005346 <_svfiprintf_r+0x176>
 8005398:	89ab      	ldrh	r3, [r5, #12]
 800539a:	065b      	lsls	r3, r3, #25
 800539c:	f53f af2c 	bmi.w	80051f8 <_svfiprintf_r+0x28>
 80053a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053a2:	b01d      	add	sp, #116	; 0x74
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	ab03      	add	r3, sp, #12
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	462a      	mov	r2, r5
 80053ae:	4638      	mov	r0, r7
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <_svfiprintf_r+0x1f8>)
 80053b2:	a904      	add	r1, sp, #16
 80053b4:	f7fe fa8e 	bl	80038d4 <_printf_i>
 80053b8:	e7eb      	b.n	8005392 <_svfiprintf_r+0x1c2>
 80053ba:	bf00      	nop
 80053bc:	0800622c 	.word	0x0800622c
 80053c0:	08006236 	.word	0x08006236
 80053c4:	0800339d 	.word	0x0800339d
 80053c8:	08005119 	.word	0x08005119
 80053cc:	08006232 	.word	0x08006232

080053d0 <_sbrk_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	2300      	movs	r3, #0
 80053d4:	4d05      	ldr	r5, [pc, #20]	; (80053ec <_sbrk_r+0x1c>)
 80053d6:	4604      	mov	r4, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	f7fc fba2 	bl	8001b24 <_sbrk>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_sbrk_r+0x1a>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_sbrk_r+0x1a>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	200002b4 	.word	0x200002b4

080053f0 <__assert_func>:
 80053f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053f2:	4614      	mov	r4, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <__assert_func+0x2c>)
 80053f8:	4605      	mov	r5, r0
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68d8      	ldr	r0, [r3, #12]
 80053fe:	b14c      	cbz	r4, 8005414 <__assert_func+0x24>
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <__assert_func+0x30>)
 8005402:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005406:	9100      	str	r1, [sp, #0]
 8005408:	462b      	mov	r3, r5
 800540a:	4906      	ldr	r1, [pc, #24]	; (8005424 <__assert_func+0x34>)
 800540c:	f000 f80e 	bl	800542c <fiprintf>
 8005410:	f000 faa2 	bl	8005958 <abort>
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <__assert_func+0x38>)
 8005416:	461c      	mov	r4, r3
 8005418:	e7f3      	b.n	8005402 <__assert_func+0x12>
 800541a:	bf00      	nop
 800541c:	2000000c 	.word	0x2000000c
 8005420:	0800623d 	.word	0x0800623d
 8005424:	0800624a 	.word	0x0800624a
 8005428:	08006278 	.word	0x08006278

0800542c <fiprintf>:
 800542c:	b40e      	push	{r1, r2, r3}
 800542e:	b503      	push	{r0, r1, lr}
 8005430:	4601      	mov	r1, r0
 8005432:	ab03      	add	r3, sp, #12
 8005434:	4805      	ldr	r0, [pc, #20]	; (800544c <fiprintf+0x20>)
 8005436:	f853 2b04 	ldr.w	r2, [r3], #4
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	f000 f88d 	bl	800555c <_vfiprintf_r>
 8005442:	b002      	add	sp, #8
 8005444:	f85d eb04 	ldr.w	lr, [sp], #4
 8005448:	b003      	add	sp, #12
 800544a:	4770      	bx	lr
 800544c:	2000000c 	.word	0x2000000c

08005450 <__ascii_mbtowc>:
 8005450:	b082      	sub	sp, #8
 8005452:	b901      	cbnz	r1, 8005456 <__ascii_mbtowc+0x6>
 8005454:	a901      	add	r1, sp, #4
 8005456:	b142      	cbz	r2, 800546a <__ascii_mbtowc+0x1a>
 8005458:	b14b      	cbz	r3, 800546e <__ascii_mbtowc+0x1e>
 800545a:	7813      	ldrb	r3, [r2, #0]
 800545c:	600b      	str	r3, [r1, #0]
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	1e10      	subs	r0, r2, #0
 8005462:	bf18      	it	ne
 8005464:	2001      	movne	r0, #1
 8005466:	b002      	add	sp, #8
 8005468:	4770      	bx	lr
 800546a:	4610      	mov	r0, r2
 800546c:	e7fb      	b.n	8005466 <__ascii_mbtowc+0x16>
 800546e:	f06f 0001 	mvn.w	r0, #1
 8005472:	e7f8      	b.n	8005466 <__ascii_mbtowc+0x16>

08005474 <memmove>:
 8005474:	4288      	cmp	r0, r1
 8005476:	b510      	push	{r4, lr}
 8005478:	eb01 0402 	add.w	r4, r1, r2
 800547c:	d902      	bls.n	8005484 <memmove+0x10>
 800547e:	4284      	cmp	r4, r0
 8005480:	4623      	mov	r3, r4
 8005482:	d807      	bhi.n	8005494 <memmove+0x20>
 8005484:	1e43      	subs	r3, r0, #1
 8005486:	42a1      	cmp	r1, r4
 8005488:	d008      	beq.n	800549c <memmove+0x28>
 800548a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800548e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005492:	e7f8      	b.n	8005486 <memmove+0x12>
 8005494:	4601      	mov	r1, r0
 8005496:	4402      	add	r2, r0
 8005498:	428a      	cmp	r2, r1
 800549a:	d100      	bne.n	800549e <memmove+0x2a>
 800549c:	bd10      	pop	{r4, pc}
 800549e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054a6:	e7f7      	b.n	8005498 <memmove+0x24>

080054a8 <__malloc_lock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__malloc_lock+0x8>)
 80054aa:	f000 bc15 	b.w	8005cd8 <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	200002bc 	.word	0x200002bc

080054b4 <__malloc_unlock>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__malloc_unlock+0x8>)
 80054b6:	f000 bc10 	b.w	8005cda <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	200002bc 	.word	0x200002bc

080054c0 <_realloc_r>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	4607      	mov	r7, r0
 80054c4:	4614      	mov	r4, r2
 80054c6:	460e      	mov	r6, r1
 80054c8:	b921      	cbnz	r1, 80054d4 <_realloc_r+0x14>
 80054ca:	4611      	mov	r1, r2
 80054cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054d0:	f7ff bdc8 	b.w	8005064 <_malloc_r>
 80054d4:	b922      	cbnz	r2, 80054e0 <_realloc_r+0x20>
 80054d6:	f7ff fd79 	bl	8004fcc <_free_r>
 80054da:	4625      	mov	r5, r4
 80054dc:	4628      	mov	r0, r5
 80054de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e0:	f000 fc60 	bl	8005da4 <_malloc_usable_size_r>
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d20f      	bcs.n	8005508 <_realloc_r+0x48>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff fdba 	bl	8005064 <_malloc_r>
 80054f0:	4605      	mov	r5, r0
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0f2      	beq.n	80054dc <_realloc_r+0x1c>
 80054f6:	4631      	mov	r1, r6
 80054f8:	4622      	mov	r2, r4
 80054fa:	f7ff f9c9 	bl	8004890 <memcpy>
 80054fe:	4631      	mov	r1, r6
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff fd63 	bl	8004fcc <_free_r>
 8005506:	e7e9      	b.n	80054dc <_realloc_r+0x1c>
 8005508:	4635      	mov	r5, r6
 800550a:	e7e7      	b.n	80054dc <_realloc_r+0x1c>

0800550c <__sfputc_r>:
 800550c:	6893      	ldr	r3, [r2, #8]
 800550e:	b410      	push	{r4}
 8005510:	3b01      	subs	r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	6093      	str	r3, [r2, #8]
 8005516:	da07      	bge.n	8005528 <__sfputc_r+0x1c>
 8005518:	6994      	ldr	r4, [r2, #24]
 800551a:	42a3      	cmp	r3, r4
 800551c:	db01      	blt.n	8005522 <__sfputc_r+0x16>
 800551e:	290a      	cmp	r1, #10
 8005520:	d102      	bne.n	8005528 <__sfputc_r+0x1c>
 8005522:	bc10      	pop	{r4}
 8005524:	f000 b94a 	b.w	80057bc <__swbuf_r>
 8005528:	6813      	ldr	r3, [r2, #0]
 800552a:	1c58      	adds	r0, r3, #1
 800552c:	6010      	str	r0, [r2, #0]
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	4608      	mov	r0, r1
 8005532:	bc10      	pop	{r4}
 8005534:	4770      	bx	lr

08005536 <__sfputs_r>:
 8005536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005538:	4606      	mov	r6, r0
 800553a:	460f      	mov	r7, r1
 800553c:	4614      	mov	r4, r2
 800553e:	18d5      	adds	r5, r2, r3
 8005540:	42ac      	cmp	r4, r5
 8005542:	d101      	bne.n	8005548 <__sfputs_r+0x12>
 8005544:	2000      	movs	r0, #0
 8005546:	e007      	b.n	8005558 <__sfputs_r+0x22>
 8005548:	463a      	mov	r2, r7
 800554a:	4630      	mov	r0, r6
 800554c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005550:	f7ff ffdc 	bl	800550c <__sfputc_r>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d1f3      	bne.n	8005540 <__sfputs_r+0xa>
 8005558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800555c <_vfiprintf_r>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	460d      	mov	r5, r1
 8005562:	4614      	mov	r4, r2
 8005564:	4698      	mov	r8, r3
 8005566:	4606      	mov	r6, r0
 8005568:	b09d      	sub	sp, #116	; 0x74
 800556a:	b118      	cbz	r0, 8005574 <_vfiprintf_r+0x18>
 800556c:	6983      	ldr	r3, [r0, #24]
 800556e:	b90b      	cbnz	r3, 8005574 <_vfiprintf_r+0x18>
 8005570:	f000 fb14 	bl	8005b9c <__sinit>
 8005574:	4b89      	ldr	r3, [pc, #548]	; (800579c <_vfiprintf_r+0x240>)
 8005576:	429d      	cmp	r5, r3
 8005578:	d11b      	bne.n	80055b2 <_vfiprintf_r+0x56>
 800557a:	6875      	ldr	r5, [r6, #4]
 800557c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800557e:	07d9      	lsls	r1, r3, #31
 8005580:	d405      	bmi.n	800558e <_vfiprintf_r+0x32>
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	059a      	lsls	r2, r3, #22
 8005586:	d402      	bmi.n	800558e <_vfiprintf_r+0x32>
 8005588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800558a:	f000 fba5 	bl	8005cd8 <__retarget_lock_acquire_recursive>
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	071b      	lsls	r3, r3, #28
 8005592:	d501      	bpl.n	8005598 <_vfiprintf_r+0x3c>
 8005594:	692b      	ldr	r3, [r5, #16]
 8005596:	b9eb      	cbnz	r3, 80055d4 <_vfiprintf_r+0x78>
 8005598:	4629      	mov	r1, r5
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f96e 	bl	800587c <__swsetup_r>
 80055a0:	b1c0      	cbz	r0, 80055d4 <_vfiprintf_r+0x78>
 80055a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a4:	07dc      	lsls	r4, r3, #31
 80055a6:	d50e      	bpl.n	80055c6 <_vfiprintf_r+0x6a>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	b01d      	add	sp, #116	; 0x74
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	4b7b      	ldr	r3, [pc, #492]	; (80057a0 <_vfiprintf_r+0x244>)
 80055b4:	429d      	cmp	r5, r3
 80055b6:	d101      	bne.n	80055bc <_vfiprintf_r+0x60>
 80055b8:	68b5      	ldr	r5, [r6, #8]
 80055ba:	e7df      	b.n	800557c <_vfiprintf_r+0x20>
 80055bc:	4b79      	ldr	r3, [pc, #484]	; (80057a4 <_vfiprintf_r+0x248>)
 80055be:	429d      	cmp	r5, r3
 80055c0:	bf08      	it	eq
 80055c2:	68f5      	ldreq	r5, [r6, #12]
 80055c4:	e7da      	b.n	800557c <_vfiprintf_r+0x20>
 80055c6:	89ab      	ldrh	r3, [r5, #12]
 80055c8:	0598      	lsls	r0, r3, #22
 80055ca:	d4ed      	bmi.n	80055a8 <_vfiprintf_r+0x4c>
 80055cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ce:	f000 fb84 	bl	8005cda <__retarget_lock_release_recursive>
 80055d2:	e7e9      	b.n	80055a8 <_vfiprintf_r+0x4c>
 80055d4:	2300      	movs	r3, #0
 80055d6:	9309      	str	r3, [sp, #36]	; 0x24
 80055d8:	2320      	movs	r3, #32
 80055da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055de:	2330      	movs	r3, #48	; 0x30
 80055e0:	f04f 0901 	mov.w	r9, #1
 80055e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80057a8 <_vfiprintf_r+0x24c>
 80055ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055f0:	4623      	mov	r3, r4
 80055f2:	469a      	mov	sl, r3
 80055f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055f8:	b10a      	cbz	r2, 80055fe <_vfiprintf_r+0xa2>
 80055fa:	2a25      	cmp	r2, #37	; 0x25
 80055fc:	d1f9      	bne.n	80055f2 <_vfiprintf_r+0x96>
 80055fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005602:	d00b      	beq.n	800561c <_vfiprintf_r+0xc0>
 8005604:	465b      	mov	r3, fp
 8005606:	4622      	mov	r2, r4
 8005608:	4629      	mov	r1, r5
 800560a:	4630      	mov	r0, r6
 800560c:	f7ff ff93 	bl	8005536 <__sfputs_r>
 8005610:	3001      	adds	r0, #1
 8005612:	f000 80aa 	beq.w	800576a <_vfiprintf_r+0x20e>
 8005616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005618:	445a      	add	r2, fp
 800561a:	9209      	str	r2, [sp, #36]	; 0x24
 800561c:	f89a 3000 	ldrb.w	r3, [sl]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80a2 	beq.w	800576a <_vfiprintf_r+0x20e>
 8005626:	2300      	movs	r3, #0
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	9304      	str	r3, [sp, #16]
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800563c:	931a      	str	r3, [sp, #104]	; 0x68
 800563e:	4654      	mov	r4, sl
 8005640:	2205      	movs	r2, #5
 8005642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005646:	4858      	ldr	r0, [pc, #352]	; (80057a8 <_vfiprintf_r+0x24c>)
 8005648:	f7ff f914 	bl	8004874 <memchr>
 800564c:	9a04      	ldr	r2, [sp, #16]
 800564e:	b9d8      	cbnz	r0, 8005688 <_vfiprintf_r+0x12c>
 8005650:	06d1      	lsls	r1, r2, #27
 8005652:	bf44      	itt	mi
 8005654:	2320      	movmi	r3, #32
 8005656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800565a:	0713      	lsls	r3, r2, #28
 800565c:	bf44      	itt	mi
 800565e:	232b      	movmi	r3, #43	; 0x2b
 8005660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005664:	f89a 3000 	ldrb.w	r3, [sl]
 8005668:	2b2a      	cmp	r3, #42	; 0x2a
 800566a:	d015      	beq.n	8005698 <_vfiprintf_r+0x13c>
 800566c:	4654      	mov	r4, sl
 800566e:	2000      	movs	r0, #0
 8005670:	f04f 0c0a 	mov.w	ip, #10
 8005674:	9a07      	ldr	r2, [sp, #28]
 8005676:	4621      	mov	r1, r4
 8005678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800567c:	3b30      	subs	r3, #48	; 0x30
 800567e:	2b09      	cmp	r3, #9
 8005680:	d94e      	bls.n	8005720 <_vfiprintf_r+0x1c4>
 8005682:	b1b0      	cbz	r0, 80056b2 <_vfiprintf_r+0x156>
 8005684:	9207      	str	r2, [sp, #28]
 8005686:	e014      	b.n	80056b2 <_vfiprintf_r+0x156>
 8005688:	eba0 0308 	sub.w	r3, r0, r8
 800568c:	fa09 f303 	lsl.w	r3, r9, r3
 8005690:	4313      	orrs	r3, r2
 8005692:	46a2      	mov	sl, r4
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	e7d2      	b.n	800563e <_vfiprintf_r+0xe2>
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	1d19      	adds	r1, r3, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	9103      	str	r1, [sp, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bfbb      	ittet	lt
 80056a4:	425b      	neglt	r3, r3
 80056a6:	f042 0202 	orrlt.w	r2, r2, #2
 80056aa:	9307      	strge	r3, [sp, #28]
 80056ac:	9307      	strlt	r3, [sp, #28]
 80056ae:	bfb8      	it	lt
 80056b0:	9204      	strlt	r2, [sp, #16]
 80056b2:	7823      	ldrb	r3, [r4, #0]
 80056b4:	2b2e      	cmp	r3, #46	; 0x2e
 80056b6:	d10c      	bne.n	80056d2 <_vfiprintf_r+0x176>
 80056b8:	7863      	ldrb	r3, [r4, #1]
 80056ba:	2b2a      	cmp	r3, #42	; 0x2a
 80056bc:	d135      	bne.n	800572a <_vfiprintf_r+0x1ce>
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	3402      	adds	r4, #2
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	9203      	str	r2, [sp, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bfb8      	it	lt
 80056cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80056d0:	9305      	str	r3, [sp, #20]
 80056d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057b8 <_vfiprintf_r+0x25c>
 80056d6:	2203      	movs	r2, #3
 80056d8:	4650      	mov	r0, sl
 80056da:	7821      	ldrb	r1, [r4, #0]
 80056dc:	f7ff f8ca 	bl	8004874 <memchr>
 80056e0:	b140      	cbz	r0, 80056f4 <_vfiprintf_r+0x198>
 80056e2:	2340      	movs	r3, #64	; 0x40
 80056e4:	eba0 000a 	sub.w	r0, r0, sl
 80056e8:	fa03 f000 	lsl.w	r0, r3, r0
 80056ec:	9b04      	ldr	r3, [sp, #16]
 80056ee:	3401      	adds	r4, #1
 80056f0:	4303      	orrs	r3, r0
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	2206      	movs	r2, #6
 80056fa:	482c      	ldr	r0, [pc, #176]	; (80057ac <_vfiprintf_r+0x250>)
 80056fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005700:	f7ff f8b8 	bl	8004874 <memchr>
 8005704:	2800      	cmp	r0, #0
 8005706:	d03f      	beq.n	8005788 <_vfiprintf_r+0x22c>
 8005708:	4b29      	ldr	r3, [pc, #164]	; (80057b0 <_vfiprintf_r+0x254>)
 800570a:	bb1b      	cbnz	r3, 8005754 <_vfiprintf_r+0x1f8>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	3307      	adds	r3, #7
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	3308      	adds	r3, #8
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571a:	443b      	add	r3, r7
 800571c:	9309      	str	r3, [sp, #36]	; 0x24
 800571e:	e767      	b.n	80055f0 <_vfiprintf_r+0x94>
 8005720:	460c      	mov	r4, r1
 8005722:	2001      	movs	r0, #1
 8005724:	fb0c 3202 	mla	r2, ip, r2, r3
 8005728:	e7a5      	b.n	8005676 <_vfiprintf_r+0x11a>
 800572a:	2300      	movs	r3, #0
 800572c:	f04f 0c0a 	mov.w	ip, #10
 8005730:	4619      	mov	r1, r3
 8005732:	3401      	adds	r4, #1
 8005734:	9305      	str	r3, [sp, #20]
 8005736:	4620      	mov	r0, r4
 8005738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800573c:	3a30      	subs	r2, #48	; 0x30
 800573e:	2a09      	cmp	r2, #9
 8005740:	d903      	bls.n	800574a <_vfiprintf_r+0x1ee>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0c5      	beq.n	80056d2 <_vfiprintf_r+0x176>
 8005746:	9105      	str	r1, [sp, #20]
 8005748:	e7c3      	b.n	80056d2 <_vfiprintf_r+0x176>
 800574a:	4604      	mov	r4, r0
 800574c:	2301      	movs	r3, #1
 800574e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005752:	e7f0      	b.n	8005736 <_vfiprintf_r+0x1da>
 8005754:	ab03      	add	r3, sp, #12
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	462a      	mov	r2, r5
 800575a:	4630      	mov	r0, r6
 800575c:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <_vfiprintf_r+0x258>)
 800575e:	a904      	add	r1, sp, #16
 8005760:	f7fd fe1c 	bl	800339c <_printf_float>
 8005764:	4607      	mov	r7, r0
 8005766:	1c78      	adds	r0, r7, #1
 8005768:	d1d6      	bne.n	8005718 <_vfiprintf_r+0x1bc>
 800576a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800576c:	07d9      	lsls	r1, r3, #31
 800576e:	d405      	bmi.n	800577c <_vfiprintf_r+0x220>
 8005770:	89ab      	ldrh	r3, [r5, #12]
 8005772:	059a      	lsls	r2, r3, #22
 8005774:	d402      	bmi.n	800577c <_vfiprintf_r+0x220>
 8005776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005778:	f000 faaf 	bl	8005cda <__retarget_lock_release_recursive>
 800577c:	89ab      	ldrh	r3, [r5, #12]
 800577e:	065b      	lsls	r3, r3, #25
 8005780:	f53f af12 	bmi.w	80055a8 <_vfiprintf_r+0x4c>
 8005784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005786:	e711      	b.n	80055ac <_vfiprintf_r+0x50>
 8005788:	ab03      	add	r3, sp, #12
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	462a      	mov	r2, r5
 800578e:	4630      	mov	r0, r6
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <_vfiprintf_r+0x258>)
 8005792:	a904      	add	r1, sp, #16
 8005794:	f7fe f89e 	bl	80038d4 <_printf_i>
 8005798:	e7e4      	b.n	8005764 <_vfiprintf_r+0x208>
 800579a:	bf00      	nop
 800579c:	080063a4 	.word	0x080063a4
 80057a0:	080063c4 	.word	0x080063c4
 80057a4:	08006384 	.word	0x08006384
 80057a8:	0800622c 	.word	0x0800622c
 80057ac:	08006236 	.word	0x08006236
 80057b0:	0800339d 	.word	0x0800339d
 80057b4:	08005537 	.word	0x08005537
 80057b8:	08006232 	.word	0x08006232

080057bc <__swbuf_r>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	460e      	mov	r6, r1
 80057c0:	4614      	mov	r4, r2
 80057c2:	4605      	mov	r5, r0
 80057c4:	b118      	cbz	r0, 80057ce <__swbuf_r+0x12>
 80057c6:	6983      	ldr	r3, [r0, #24]
 80057c8:	b90b      	cbnz	r3, 80057ce <__swbuf_r+0x12>
 80057ca:	f000 f9e7 	bl	8005b9c <__sinit>
 80057ce:	4b21      	ldr	r3, [pc, #132]	; (8005854 <__swbuf_r+0x98>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	d12b      	bne.n	800582c <__swbuf_r+0x70>
 80057d4:	686c      	ldr	r4, [r5, #4]
 80057d6:	69a3      	ldr	r3, [r4, #24]
 80057d8:	60a3      	str	r3, [r4, #8]
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	071a      	lsls	r2, r3, #28
 80057de:	d52f      	bpl.n	8005840 <__swbuf_r+0x84>
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	b36b      	cbz	r3, 8005840 <__swbuf_r+0x84>
 80057e4:	6923      	ldr	r3, [r4, #16]
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	b2f6      	uxtb	r6, r6
 80057ea:	1ac0      	subs	r0, r0, r3
 80057ec:	6963      	ldr	r3, [r4, #20]
 80057ee:	4637      	mov	r7, r6
 80057f0:	4283      	cmp	r3, r0
 80057f2:	dc04      	bgt.n	80057fe <__swbuf_r+0x42>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 f93c 	bl	8005a74 <_fflush_r>
 80057fc:	bb30      	cbnz	r0, 800584c <__swbuf_r+0x90>
 80057fe:	68a3      	ldr	r3, [r4, #8]
 8005800:	3001      	adds	r0, #1
 8005802:	3b01      	subs	r3, #1
 8005804:	60a3      	str	r3, [r4, #8]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	701e      	strb	r6, [r3, #0]
 800580e:	6963      	ldr	r3, [r4, #20]
 8005810:	4283      	cmp	r3, r0
 8005812:	d004      	beq.n	800581e <__swbuf_r+0x62>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	07db      	lsls	r3, r3, #31
 8005818:	d506      	bpl.n	8005828 <__swbuf_r+0x6c>
 800581a:	2e0a      	cmp	r6, #10
 800581c:	d104      	bne.n	8005828 <__swbuf_r+0x6c>
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f927 	bl	8005a74 <_fflush_r>
 8005826:	b988      	cbnz	r0, 800584c <__swbuf_r+0x90>
 8005828:	4638      	mov	r0, r7
 800582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582c:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <__swbuf_r+0x9c>)
 800582e:	429c      	cmp	r4, r3
 8005830:	d101      	bne.n	8005836 <__swbuf_r+0x7a>
 8005832:	68ac      	ldr	r4, [r5, #8]
 8005834:	e7cf      	b.n	80057d6 <__swbuf_r+0x1a>
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <__swbuf_r+0xa0>)
 8005838:	429c      	cmp	r4, r3
 800583a:	bf08      	it	eq
 800583c:	68ec      	ldreq	r4, [r5, #12]
 800583e:	e7ca      	b.n	80057d6 <__swbuf_r+0x1a>
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f81a 	bl	800587c <__swsetup_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	d0cb      	beq.n	80057e4 <__swbuf_r+0x28>
 800584c:	f04f 37ff 	mov.w	r7, #4294967295
 8005850:	e7ea      	b.n	8005828 <__swbuf_r+0x6c>
 8005852:	bf00      	nop
 8005854:	080063a4 	.word	0x080063a4
 8005858:	080063c4 	.word	0x080063c4
 800585c:	08006384 	.word	0x08006384

08005860 <__ascii_wctomb>:
 8005860:	4603      	mov	r3, r0
 8005862:	4608      	mov	r0, r1
 8005864:	b141      	cbz	r1, 8005878 <__ascii_wctomb+0x18>
 8005866:	2aff      	cmp	r2, #255	; 0xff
 8005868:	d904      	bls.n	8005874 <__ascii_wctomb+0x14>
 800586a:	228a      	movs	r2, #138	; 0x8a
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	4770      	bx	lr
 8005874:	2001      	movs	r0, #1
 8005876:	700a      	strb	r2, [r1, #0]
 8005878:	4770      	bx	lr
	...

0800587c <__swsetup_r>:
 800587c:	4b32      	ldr	r3, [pc, #200]	; (8005948 <__swsetup_r+0xcc>)
 800587e:	b570      	push	{r4, r5, r6, lr}
 8005880:	681d      	ldr	r5, [r3, #0]
 8005882:	4606      	mov	r6, r0
 8005884:	460c      	mov	r4, r1
 8005886:	b125      	cbz	r5, 8005892 <__swsetup_r+0x16>
 8005888:	69ab      	ldr	r3, [r5, #24]
 800588a:	b913      	cbnz	r3, 8005892 <__swsetup_r+0x16>
 800588c:	4628      	mov	r0, r5
 800588e:	f000 f985 	bl	8005b9c <__sinit>
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <__swsetup_r+0xd0>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d10f      	bne.n	80058b8 <__swsetup_r+0x3c>
 8005898:	686c      	ldr	r4, [r5, #4]
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058a0:	0719      	lsls	r1, r3, #28
 80058a2:	d42c      	bmi.n	80058fe <__swsetup_r+0x82>
 80058a4:	06dd      	lsls	r5, r3, #27
 80058a6:	d411      	bmi.n	80058cc <__swsetup_r+0x50>
 80058a8:	2309      	movs	r3, #9
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	e03e      	b.n	8005936 <__swsetup_r+0xba>
 80058b8:	4b25      	ldr	r3, [pc, #148]	; (8005950 <__swsetup_r+0xd4>)
 80058ba:	429c      	cmp	r4, r3
 80058bc:	d101      	bne.n	80058c2 <__swsetup_r+0x46>
 80058be:	68ac      	ldr	r4, [r5, #8]
 80058c0:	e7eb      	b.n	800589a <__swsetup_r+0x1e>
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <__swsetup_r+0xd8>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	bf08      	it	eq
 80058c8:	68ec      	ldreq	r4, [r5, #12]
 80058ca:	e7e6      	b.n	800589a <__swsetup_r+0x1e>
 80058cc:	0758      	lsls	r0, r3, #29
 80058ce:	d512      	bpl.n	80058f6 <__swsetup_r+0x7a>
 80058d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058d2:	b141      	cbz	r1, 80058e6 <__swsetup_r+0x6a>
 80058d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d8:	4299      	cmp	r1, r3
 80058da:	d002      	beq.n	80058e2 <__swsetup_r+0x66>
 80058dc:	4630      	mov	r0, r6
 80058de:	f7ff fb75 	bl	8004fcc <_free_r>
 80058e2:	2300      	movs	r3, #0
 80058e4:	6363      	str	r3, [r4, #52]	; 0x34
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	2300      	movs	r3, #0
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f043 0308 	orr.w	r3, r3, #8
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	b94b      	cbnz	r3, 8005916 <__swsetup_r+0x9a>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590c:	d003      	beq.n	8005916 <__swsetup_r+0x9a>
 800590e:	4621      	mov	r1, r4
 8005910:	4630      	mov	r0, r6
 8005912:	f000 fa07 	bl	8005d24 <__smakebuf_r>
 8005916:	89a0      	ldrh	r0, [r4, #12]
 8005918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800591c:	f010 0301 	ands.w	r3, r0, #1
 8005920:	d00a      	beq.n	8005938 <__swsetup_r+0xbc>
 8005922:	2300      	movs	r3, #0
 8005924:	60a3      	str	r3, [r4, #8]
 8005926:	6963      	ldr	r3, [r4, #20]
 8005928:	425b      	negs	r3, r3
 800592a:	61a3      	str	r3, [r4, #24]
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	b943      	cbnz	r3, 8005942 <__swsetup_r+0xc6>
 8005930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005934:	d1ba      	bne.n	80058ac <__swsetup_r+0x30>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	0781      	lsls	r1, r0, #30
 800593a:	bf58      	it	pl
 800593c:	6963      	ldrpl	r3, [r4, #20]
 800593e:	60a3      	str	r3, [r4, #8]
 8005940:	e7f4      	b.n	800592c <__swsetup_r+0xb0>
 8005942:	2000      	movs	r0, #0
 8005944:	e7f7      	b.n	8005936 <__swsetup_r+0xba>
 8005946:	bf00      	nop
 8005948:	2000000c 	.word	0x2000000c
 800594c:	080063a4 	.word	0x080063a4
 8005950:	080063c4 	.word	0x080063c4
 8005954:	08006384 	.word	0x08006384

08005958 <abort>:
 8005958:	2006      	movs	r0, #6
 800595a:	b508      	push	{r3, lr}
 800595c:	f000 fa52 	bl	8005e04 <raise>
 8005960:	2001      	movs	r0, #1
 8005962:	f7fc f86c 	bl	8001a3e <_exit>
	...

08005968 <__sflush_r>:
 8005968:	898a      	ldrh	r2, [r1, #12]
 800596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	4605      	mov	r5, r0
 8005970:	0710      	lsls	r0, r2, #28
 8005972:	460c      	mov	r4, r1
 8005974:	d458      	bmi.n	8005a28 <__sflush_r+0xc0>
 8005976:	684b      	ldr	r3, [r1, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dc05      	bgt.n	8005988 <__sflush_r+0x20>
 800597c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	dc02      	bgt.n	8005988 <__sflush_r+0x20>
 8005982:	2000      	movs	r0, #0
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800598a:	2e00      	cmp	r6, #0
 800598c:	d0f9      	beq.n	8005982 <__sflush_r+0x1a>
 800598e:	2300      	movs	r3, #0
 8005990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005994:	682f      	ldr	r7, [r5, #0]
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	d032      	beq.n	8005a00 <__sflush_r+0x98>
 800599a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	075a      	lsls	r2, r3, #29
 80059a0:	d505      	bpl.n	80059ae <__sflush_r+0x46>
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	1ac0      	subs	r0, r0, r3
 80059a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059a8:	b10b      	cbz	r3, 80059ae <__sflush_r+0x46>
 80059aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059ac:	1ac0      	subs	r0, r0, r3
 80059ae:	2300      	movs	r3, #0
 80059b0:	4602      	mov	r2, r0
 80059b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059b4:	4628      	mov	r0, r5
 80059b6:	6a21      	ldr	r1, [r4, #32]
 80059b8:	47b0      	blx	r6
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	d106      	bne.n	80059ce <__sflush_r+0x66>
 80059c0:	6829      	ldr	r1, [r5, #0]
 80059c2:	291d      	cmp	r1, #29
 80059c4:	d82c      	bhi.n	8005a20 <__sflush_r+0xb8>
 80059c6:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <__sflush_r+0x108>)
 80059c8:	40ca      	lsrs	r2, r1
 80059ca:	07d6      	lsls	r6, r2, #31
 80059cc:	d528      	bpl.n	8005a20 <__sflush_r+0xb8>
 80059ce:	2200      	movs	r2, #0
 80059d0:	6062      	str	r2, [r4, #4]
 80059d2:	6922      	ldr	r2, [r4, #16]
 80059d4:	04d9      	lsls	r1, r3, #19
 80059d6:	6022      	str	r2, [r4, #0]
 80059d8:	d504      	bpl.n	80059e4 <__sflush_r+0x7c>
 80059da:	1c42      	adds	r2, r0, #1
 80059dc:	d101      	bne.n	80059e2 <__sflush_r+0x7a>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	b903      	cbnz	r3, 80059e4 <__sflush_r+0x7c>
 80059e2:	6560      	str	r0, [r4, #84]	; 0x54
 80059e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059e6:	602f      	str	r7, [r5, #0]
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d0ca      	beq.n	8005982 <__sflush_r+0x1a>
 80059ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059f0:	4299      	cmp	r1, r3
 80059f2:	d002      	beq.n	80059fa <__sflush_r+0x92>
 80059f4:	4628      	mov	r0, r5
 80059f6:	f7ff fae9 	bl	8004fcc <_free_r>
 80059fa:	2000      	movs	r0, #0
 80059fc:	6360      	str	r0, [r4, #52]	; 0x34
 80059fe:	e7c1      	b.n	8005984 <__sflush_r+0x1c>
 8005a00:	6a21      	ldr	r1, [r4, #32]
 8005a02:	2301      	movs	r3, #1
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b0      	blx	r6
 8005a08:	1c41      	adds	r1, r0, #1
 8005a0a:	d1c7      	bne.n	800599c <__sflush_r+0x34>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0c4      	beq.n	800599c <__sflush_r+0x34>
 8005a12:	2b1d      	cmp	r3, #29
 8005a14:	d001      	beq.n	8005a1a <__sflush_r+0xb2>
 8005a16:	2b16      	cmp	r3, #22
 8005a18:	d101      	bne.n	8005a1e <__sflush_r+0xb6>
 8005a1a:	602f      	str	r7, [r5, #0]
 8005a1c:	e7b1      	b.n	8005982 <__sflush_r+0x1a>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	e7ad      	b.n	8005984 <__sflush_r+0x1c>
 8005a28:	690f      	ldr	r7, [r1, #16]
 8005a2a:	2f00      	cmp	r7, #0
 8005a2c:	d0a9      	beq.n	8005982 <__sflush_r+0x1a>
 8005a2e:	0793      	lsls	r3, r2, #30
 8005a30:	bf18      	it	ne
 8005a32:	2300      	movne	r3, #0
 8005a34:	680e      	ldr	r6, [r1, #0]
 8005a36:	bf08      	it	eq
 8005a38:	694b      	ldreq	r3, [r1, #20]
 8005a3a:	eba6 0807 	sub.w	r8, r6, r7
 8005a3e:	600f      	str	r7, [r1, #0]
 8005a40:	608b      	str	r3, [r1, #8]
 8005a42:	f1b8 0f00 	cmp.w	r8, #0
 8005a46:	dd9c      	ble.n	8005982 <__sflush_r+0x1a>
 8005a48:	4643      	mov	r3, r8
 8005a4a:	463a      	mov	r2, r7
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	6a21      	ldr	r1, [r4, #32]
 8005a50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a52:	47b0      	blx	r6
 8005a54:	2800      	cmp	r0, #0
 8005a56:	dc06      	bgt.n	8005a66 <__sflush_r+0xfe>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	e78e      	b.n	8005984 <__sflush_r+0x1c>
 8005a66:	4407      	add	r7, r0
 8005a68:	eba8 0800 	sub.w	r8, r8, r0
 8005a6c:	e7e9      	b.n	8005a42 <__sflush_r+0xda>
 8005a6e:	bf00      	nop
 8005a70:	20400001 	.word	0x20400001

08005a74 <_fflush_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	4605      	mov	r5, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	b913      	cbnz	r3, 8005a84 <_fflush_r+0x10>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	4628      	mov	r0, r5
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	b118      	cbz	r0, 8005a8e <_fflush_r+0x1a>
 8005a86:	6983      	ldr	r3, [r0, #24]
 8005a88:	b90b      	cbnz	r3, 8005a8e <_fflush_r+0x1a>
 8005a8a:	f000 f887 	bl	8005b9c <__sinit>
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <_fflush_r+0x6c>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d11b      	bne.n	8005acc <_fflush_r+0x58>
 8005a94:	686c      	ldr	r4, [r5, #4]
 8005a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0ef      	beq.n	8005a7e <_fflush_r+0xa>
 8005a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005aa0:	07d0      	lsls	r0, r2, #31
 8005aa2:	d404      	bmi.n	8005aae <_fflush_r+0x3a>
 8005aa4:	0599      	lsls	r1, r3, #22
 8005aa6:	d402      	bmi.n	8005aae <_fflush_r+0x3a>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aaa:	f000 f915 	bl	8005cd8 <__retarget_lock_acquire_recursive>
 8005aae:	4628      	mov	r0, r5
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	f7ff ff59 	bl	8005968 <__sflush_r>
 8005ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ab8:	4605      	mov	r5, r0
 8005aba:	07da      	lsls	r2, r3, #31
 8005abc:	d4e0      	bmi.n	8005a80 <_fflush_r+0xc>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	059b      	lsls	r3, r3, #22
 8005ac2:	d4dd      	bmi.n	8005a80 <_fflush_r+0xc>
 8005ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ac6:	f000 f908 	bl	8005cda <__retarget_lock_release_recursive>
 8005aca:	e7d9      	b.n	8005a80 <_fflush_r+0xc>
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <_fflush_r+0x70>)
 8005ace:	429c      	cmp	r4, r3
 8005ad0:	d101      	bne.n	8005ad6 <_fflush_r+0x62>
 8005ad2:	68ac      	ldr	r4, [r5, #8]
 8005ad4:	e7df      	b.n	8005a96 <_fflush_r+0x22>
 8005ad6:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <_fflush_r+0x74>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	bf08      	it	eq
 8005adc:	68ec      	ldreq	r4, [r5, #12]
 8005ade:	e7da      	b.n	8005a96 <_fflush_r+0x22>
 8005ae0:	080063a4 	.word	0x080063a4
 8005ae4:	080063c4 	.word	0x080063c4
 8005ae8:	08006384 	.word	0x08006384

08005aec <std>:
 8005aec:	2300      	movs	r3, #0
 8005aee:	b510      	push	{r4, lr}
 8005af0:	4604      	mov	r4, r0
 8005af2:	e9c0 3300 	strd	r3, r3, [r0]
 8005af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005afa:	6083      	str	r3, [r0, #8]
 8005afc:	8181      	strh	r1, [r0, #12]
 8005afe:	6643      	str	r3, [r0, #100]	; 0x64
 8005b00:	81c2      	strh	r2, [r0, #14]
 8005b02:	6183      	str	r3, [r0, #24]
 8005b04:	4619      	mov	r1, r3
 8005b06:	2208      	movs	r2, #8
 8005b08:	305c      	adds	r0, #92	; 0x5c
 8005b0a:	f7fd fba1 	bl	8003250 <memset>
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <std+0x38>)
 8005b10:	6224      	str	r4, [r4, #32]
 8005b12:	6263      	str	r3, [r4, #36]	; 0x24
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <std+0x3c>)
 8005b16:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <std+0x40>)
 8005b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b1c:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <std+0x44>)
 8005b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b20:	bd10      	pop	{r4, pc}
 8005b22:	bf00      	nop
 8005b24:	08005e3d 	.word	0x08005e3d
 8005b28:	08005e5f 	.word	0x08005e5f
 8005b2c:	08005e97 	.word	0x08005e97
 8005b30:	08005ebb 	.word	0x08005ebb

08005b34 <_cleanup_r>:
 8005b34:	4901      	ldr	r1, [pc, #4]	; (8005b3c <_cleanup_r+0x8>)
 8005b36:	f000 b8af 	b.w	8005c98 <_fwalk_reent>
 8005b3a:	bf00      	nop
 8005b3c:	08005a75 	.word	0x08005a75

08005b40 <__sfmoreglue>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	2568      	movs	r5, #104	; 0x68
 8005b44:	1e4a      	subs	r2, r1, #1
 8005b46:	4355      	muls	r5, r2
 8005b48:	460e      	mov	r6, r1
 8005b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b4e:	f7ff fa89 	bl	8005064 <_malloc_r>
 8005b52:	4604      	mov	r4, r0
 8005b54:	b140      	cbz	r0, 8005b68 <__sfmoreglue+0x28>
 8005b56:	2100      	movs	r1, #0
 8005b58:	e9c0 1600 	strd	r1, r6, [r0]
 8005b5c:	300c      	adds	r0, #12
 8005b5e:	60a0      	str	r0, [r4, #8]
 8005b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b64:	f7fd fb74 	bl	8003250 <memset>
 8005b68:	4620      	mov	r0, r4
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}

08005b6c <__sfp_lock_acquire>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__sfp_lock_acquire+0x8>)
 8005b6e:	f000 b8b3 	b.w	8005cd8 <__retarget_lock_acquire_recursive>
 8005b72:	bf00      	nop
 8005b74:	200002c0 	.word	0x200002c0

08005b78 <__sfp_lock_release>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__sfp_lock_release+0x8>)
 8005b7a:	f000 b8ae 	b.w	8005cda <__retarget_lock_release_recursive>
 8005b7e:	bf00      	nop
 8005b80:	200002c0 	.word	0x200002c0

08005b84 <__sinit_lock_acquire>:
 8005b84:	4801      	ldr	r0, [pc, #4]	; (8005b8c <__sinit_lock_acquire+0x8>)
 8005b86:	f000 b8a7 	b.w	8005cd8 <__retarget_lock_acquire_recursive>
 8005b8a:	bf00      	nop
 8005b8c:	200002bb 	.word	0x200002bb

08005b90 <__sinit_lock_release>:
 8005b90:	4801      	ldr	r0, [pc, #4]	; (8005b98 <__sinit_lock_release+0x8>)
 8005b92:	f000 b8a2 	b.w	8005cda <__retarget_lock_release_recursive>
 8005b96:	bf00      	nop
 8005b98:	200002bb 	.word	0x200002bb

08005b9c <__sinit>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	f7ff fff0 	bl	8005b84 <__sinit_lock_acquire>
 8005ba4:	69a3      	ldr	r3, [r4, #24]
 8005ba6:	b11b      	cbz	r3, 8005bb0 <__sinit+0x14>
 8005ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bac:	f7ff bff0 	b.w	8005b90 <__sinit_lock_release>
 8005bb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bb4:	6523      	str	r3, [r4, #80]	; 0x50
 8005bb6:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <__sinit+0x68>)
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <__sinit+0x6c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bbe:	42a3      	cmp	r3, r4
 8005bc0:	bf08      	it	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	bf08      	it	eq
 8005bc8:	61a3      	streq	r3, [r4, #24]
 8005bca:	f000 f81f 	bl	8005c0c <__sfp>
 8005bce:	6060      	str	r0, [r4, #4]
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 f81b 	bl	8005c0c <__sfp>
 8005bd6:	60a0      	str	r0, [r4, #8]
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 f817 	bl	8005c0c <__sfp>
 8005bde:	2200      	movs	r2, #0
 8005be0:	2104      	movs	r1, #4
 8005be2:	60e0      	str	r0, [r4, #12]
 8005be4:	6860      	ldr	r0, [r4, #4]
 8005be6:	f7ff ff81 	bl	8005aec <std>
 8005bea:	2201      	movs	r2, #1
 8005bec:	2109      	movs	r1, #9
 8005bee:	68a0      	ldr	r0, [r4, #8]
 8005bf0:	f7ff ff7c 	bl	8005aec <std>
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	2112      	movs	r1, #18
 8005bf8:	68e0      	ldr	r0, [r4, #12]
 8005bfa:	f7ff ff77 	bl	8005aec <std>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61a3      	str	r3, [r4, #24]
 8005c02:	e7d1      	b.n	8005ba8 <__sinit+0xc>
 8005c04:	08006004 	.word	0x08006004
 8005c08:	08005b35 	.word	0x08005b35

08005c0c <__sfp>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	4607      	mov	r7, r0
 8005c10:	f7ff ffac 	bl	8005b6c <__sfp_lock_acquire>
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <__sfp+0x84>)
 8005c16:	681e      	ldr	r6, [r3, #0]
 8005c18:	69b3      	ldr	r3, [r6, #24]
 8005c1a:	b913      	cbnz	r3, 8005c22 <__sfp+0x16>
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff ffbd 	bl	8005b9c <__sinit>
 8005c22:	3648      	adds	r6, #72	; 0x48
 8005c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	d503      	bpl.n	8005c34 <__sfp+0x28>
 8005c2c:	6833      	ldr	r3, [r6, #0]
 8005c2e:	b30b      	cbz	r3, 8005c74 <__sfp+0x68>
 8005c30:	6836      	ldr	r6, [r6, #0]
 8005c32:	e7f7      	b.n	8005c24 <__sfp+0x18>
 8005c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c38:	b9d5      	cbnz	r5, 8005c70 <__sfp+0x64>
 8005c3a:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <__sfp+0x88>)
 8005c3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c40:	60e3      	str	r3, [r4, #12]
 8005c42:	6665      	str	r5, [r4, #100]	; 0x64
 8005c44:	f000 f847 	bl	8005cd6 <__retarget_lock_init_recursive>
 8005c48:	f7ff ff96 	bl	8005b78 <__sfp_lock_release>
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	4629      	mov	r1, r5
 8005c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c58:	6025      	str	r5, [r4, #0]
 8005c5a:	61a5      	str	r5, [r4, #24]
 8005c5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c60:	f7fd faf6 	bl	8003250 <memset>
 8005c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c70:	3468      	adds	r4, #104	; 0x68
 8005c72:	e7d9      	b.n	8005c28 <__sfp+0x1c>
 8005c74:	2104      	movs	r1, #4
 8005c76:	4638      	mov	r0, r7
 8005c78:	f7ff ff62 	bl	8005b40 <__sfmoreglue>
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	6030      	str	r0, [r6, #0]
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d1d5      	bne.n	8005c30 <__sfp+0x24>
 8005c84:	f7ff ff78 	bl	8005b78 <__sfp_lock_release>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	e7ee      	b.n	8005c6c <__sfp+0x60>
 8005c8e:	bf00      	nop
 8005c90:	08006004 	.word	0x08006004
 8005c94:	ffff0001 	.word	0xffff0001

08005c98 <_fwalk_reent>:
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	4688      	mov	r8, r1
 8005ca0:	2700      	movs	r7, #0
 8005ca2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005caa:	f1b9 0901 	subs.w	r9, r9, #1
 8005cae:	d505      	bpl.n	8005cbc <_fwalk_reent+0x24>
 8005cb0:	6824      	ldr	r4, [r4, #0]
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	d1f7      	bne.n	8005ca6 <_fwalk_reent+0xe>
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbc:	89ab      	ldrh	r3, [r5, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d907      	bls.n	8005cd2 <_fwalk_reent+0x3a>
 8005cc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	d003      	beq.n	8005cd2 <_fwalk_reent+0x3a>
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4630      	mov	r0, r6
 8005cce:	47c0      	blx	r8
 8005cd0:	4307      	orrs	r7, r0
 8005cd2:	3568      	adds	r5, #104	; 0x68
 8005cd4:	e7e9      	b.n	8005caa <_fwalk_reent+0x12>

08005cd6 <__retarget_lock_init_recursive>:
 8005cd6:	4770      	bx	lr

08005cd8 <__retarget_lock_acquire_recursive>:
 8005cd8:	4770      	bx	lr

08005cda <__retarget_lock_release_recursive>:
 8005cda:	4770      	bx	lr

08005cdc <__swhatbuf_r>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	460e      	mov	r6, r1
 8005ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	461d      	mov	r5, r3
 8005cea:	b096      	sub	sp, #88	; 0x58
 8005cec:	da07      	bge.n	8005cfe <__swhatbuf_r+0x22>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	89b3      	ldrh	r3, [r6, #12]
 8005cf4:	061a      	lsls	r2, r3, #24
 8005cf6:	d410      	bmi.n	8005d1a <__swhatbuf_r+0x3e>
 8005cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfc:	e00e      	b.n	8005d1c <__swhatbuf_r+0x40>
 8005cfe:	466a      	mov	r2, sp
 8005d00:	f000 f902 	bl	8005f08 <_fstat_r>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	dbf2      	blt.n	8005cee <__swhatbuf_r+0x12>
 8005d08:	9a01      	ldr	r2, [sp, #4]
 8005d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d12:	425a      	negs	r2, r3
 8005d14:	415a      	adcs	r2, r3
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	e7ee      	b.n	8005cf8 <__swhatbuf_r+0x1c>
 8005d1a:	2340      	movs	r3, #64	; 0x40
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	b016      	add	sp, #88	; 0x58
 8005d22:	bd70      	pop	{r4, r5, r6, pc}

08005d24 <__smakebuf_r>:
 8005d24:	898b      	ldrh	r3, [r1, #12]
 8005d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d28:	079d      	lsls	r5, r3, #30
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	d507      	bpl.n	8005d40 <__smakebuf_r+0x1c>
 8005d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	6123      	str	r3, [r4, #16]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	6163      	str	r3, [r4, #20]
 8005d3c:	b002      	add	sp, #8
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	466a      	mov	r2, sp
 8005d42:	ab01      	add	r3, sp, #4
 8005d44:	f7ff ffca 	bl	8005cdc <__swhatbuf_r>
 8005d48:	9900      	ldr	r1, [sp, #0]
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff f989 	bl	8005064 <_malloc_r>
 8005d52:	b948      	cbnz	r0, 8005d68 <__smakebuf_r+0x44>
 8005d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d58:	059a      	lsls	r2, r3, #22
 8005d5a:	d4ef      	bmi.n	8005d3c <__smakebuf_r+0x18>
 8005d5c:	f023 0303 	bic.w	r3, r3, #3
 8005d60:	f043 0302 	orr.w	r3, r3, #2
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	e7e3      	b.n	8005d30 <__smakebuf_r+0xc>
 8005d68:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <__smakebuf_r+0x7c>)
 8005d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	6020      	str	r0, [r4, #0]
 8005d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	9b00      	ldr	r3, [sp, #0]
 8005d78:	6120      	str	r0, [r4, #16]
 8005d7a:	6163      	str	r3, [r4, #20]
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	b15b      	cbz	r3, 8005d98 <__smakebuf_r+0x74>
 8005d80:	4630      	mov	r0, r6
 8005d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d86:	f000 f8d1 	bl	8005f2c <_isatty_r>
 8005d8a:	b128      	cbz	r0, 8005d98 <__smakebuf_r+0x74>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	89a0      	ldrh	r0, [r4, #12]
 8005d9a:	4305      	orrs	r5, r0
 8005d9c:	81a5      	strh	r5, [r4, #12]
 8005d9e:	e7cd      	b.n	8005d3c <__smakebuf_r+0x18>
 8005da0:	08005b35 	.word	0x08005b35

08005da4 <_malloc_usable_size_r>:
 8005da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da8:	1f18      	subs	r0, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfbc      	itt	lt
 8005dae:	580b      	ldrlt	r3, [r1, r0]
 8005db0:	18c0      	addlt	r0, r0, r3
 8005db2:	4770      	bx	lr

08005db4 <_raise_r>:
 8005db4:	291f      	cmp	r1, #31
 8005db6:	b538      	push	{r3, r4, r5, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	460d      	mov	r5, r1
 8005dbc:	d904      	bls.n	8005dc8 <_raise_r+0x14>
 8005dbe:	2316      	movs	r3, #22
 8005dc0:	6003      	str	r3, [r0, #0]
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005dca:	b112      	cbz	r2, 8005dd2 <_raise_r+0x1e>
 8005dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dd0:	b94b      	cbnz	r3, 8005de6 <_raise_r+0x32>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f830 	bl	8005e38 <_getpid_r>
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4620      	mov	r0, r4
 8005dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de2:	f000 b817 	b.w	8005e14 <_kill_r>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d00a      	beq.n	8005e00 <_raise_r+0x4c>
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	d103      	bne.n	8005df6 <_raise_r+0x42>
 8005dee:	2316      	movs	r3, #22
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	2001      	movs	r0, #1
 8005df4:	e7e7      	b.n	8005dc6 <_raise_r+0x12>
 8005df6:	2400      	movs	r4, #0
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dfe:	4798      	blx	r3
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7e0      	b.n	8005dc6 <_raise_r+0x12>

08005e04 <raise>:
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <raise+0xc>)
 8005e06:	4601      	mov	r1, r0
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f7ff bfd3 	b.w	8005db4 <_raise_r>
 8005e0e:	bf00      	nop
 8005e10:	2000000c 	.word	0x2000000c

08005e14 <_kill_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	2300      	movs	r3, #0
 8005e18:	4d06      	ldr	r5, [pc, #24]	; (8005e34 <_kill_r+0x20>)
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f7fb fdfc 	bl	8001a1e <_kill>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d102      	bne.n	8005e30 <_kill_r+0x1c>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b103      	cbz	r3, 8005e30 <_kill_r+0x1c>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	200002b4 	.word	0x200002b4

08005e38 <_getpid_r>:
 8005e38:	f7fb bdea 	b.w	8001a10 <_getpid>

08005e3c <__sread>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	f000 f894 	bl	8005f70 <_read_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	bfab      	itete	ge
 8005e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e50:	181b      	addge	r3, r3, r0
 8005e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e56:	bfac      	ite	ge
 8005e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e5a:	81a3      	strhlt	r3, [r4, #12]
 8005e5c:	bd10      	pop	{r4, pc}

08005e5e <__swrite>:
 8005e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	461f      	mov	r7, r3
 8005e64:	898b      	ldrh	r3, [r1, #12]
 8005e66:	4605      	mov	r5, r0
 8005e68:	05db      	lsls	r3, r3, #23
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	d505      	bpl.n	8005e7c <__swrite+0x1e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	2200      	movs	r2, #0
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	f000 f868 	bl	8005f4c <_lseek_r>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	4632      	mov	r2, r6
 8005e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	4628      	mov	r0, r5
 8005e88:	463b      	mov	r3, r7
 8005e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	f000 b817 	b.w	8005ec4 <_write_r>

08005e96 <__sseek>:
 8005e96:	b510      	push	{r4, lr}
 8005e98:	460c      	mov	r4, r1
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 f855 	bl	8005f4c <_lseek_r>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	bf15      	itete	ne
 8005ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eb2:	81a3      	strheq	r3, [r4, #12]
 8005eb4:	bf18      	it	ne
 8005eb6:	81a3      	strhne	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__sclose>:
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 b813 	b.w	8005ee8 <_close_r>
	...

08005ec4 <_write_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4d05      	ldr	r5, [pc, #20]	; (8005ee4 <_write_r+0x20>)
 8005ed0:	602a      	str	r2, [r5, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fb fdda 	bl	8001a8c <_write>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_write_r+0x1e>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_write_r+0x1e>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	200002b4 	.word	0x200002b4

08005ee8 <_close_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	2300      	movs	r3, #0
 8005eec:	4d05      	ldr	r5, [pc, #20]	; (8005f04 <_close_r+0x1c>)
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	f7fb fde6 	bl	8001ac4 <_close>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_close_r+0x1a>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_close_r+0x1a>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	200002b4 	.word	0x200002b4

08005f08 <_fstat_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4d06      	ldr	r5, [pc, #24]	; (8005f28 <_fstat_r+0x20>)
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	4611      	mov	r1, r2
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	f7fb fde0 	bl	8001ada <_fstat>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d102      	bne.n	8005f24 <_fstat_r+0x1c>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	b103      	cbz	r3, 8005f24 <_fstat_r+0x1c>
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	200002b4 	.word	0x200002b4

08005f2c <_isatty_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4d05      	ldr	r5, [pc, #20]	; (8005f48 <_isatty_r+0x1c>)
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fb fdde 	bl	8001af8 <_isatty>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_isatty_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_isatty_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	200002b4 	.word	0x200002b4

08005f4c <_lseek_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	2200      	movs	r2, #0
 8005f56:	4d05      	ldr	r5, [pc, #20]	; (8005f6c <_lseek_r+0x20>)
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fb fdd6 	bl	8001b0c <_lseek>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_lseek_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_lseek_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	200002b4 	.word	0x200002b4

08005f70 <_read_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4d05      	ldr	r5, [pc, #20]	; (8005f90 <_read_r+0x20>)
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f7fb fd67 	bl	8001a52 <_read>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_read_r+0x1e>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_read_r+0x1e>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	200002b4 	.word	0x200002b4

08005f94 <_init>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr

08005fa0 <_fini>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr
